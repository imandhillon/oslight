diff --git a/build/install/bin/cat b/build/install/bin/cat
new file mode 100755
index 0000000..ca6512b
Binary files /dev/null and b/build/install/bin/cat differ
diff --git a/build/install/bin/cp b/build/install/bin/cp
new file mode 100755
index 0000000..f883740
Binary files /dev/null and b/build/install/bin/cp differ
diff --git a/build/install/bin/false b/build/install/bin/false
new file mode 100755
index 0000000..cdbbd60
Binary files /dev/null and b/build/install/bin/false differ
diff --git a/build/install/bin/ln b/build/install/bin/ln
new file mode 100755
index 0000000..26255bb
Binary files /dev/null and b/build/install/bin/ln differ
diff --git a/build/install/bin/ls b/build/install/bin/ls
new file mode 100755
index 0000000..a65ea5a
Binary files /dev/null and b/build/install/bin/ls differ
diff --git a/build/install/bin/mkdir b/build/install/bin/mkdir
new file mode 100755
index 0000000..a109a59
Binary files /dev/null and b/build/install/bin/mkdir differ
diff --git a/build/install/bin/mv b/build/install/bin/mv
new file mode 100755
index 0000000..088b559
Binary files /dev/null and b/build/install/bin/mv differ
diff --git a/build/install/bin/pwd b/build/install/bin/pwd
new file mode 100755
index 0000000..d1466d0
Binary files /dev/null and b/build/install/bin/pwd differ
diff --git a/build/install/bin/rm b/build/install/bin/rm
new file mode 100755
index 0000000..95096aa
Binary files /dev/null and b/build/install/bin/rm differ
diff --git a/build/install/bin/rmdir b/build/install/bin/rmdir
new file mode 100755
index 0000000..37673e3
Binary files /dev/null and b/build/install/bin/rmdir differ
diff --git a/build/install/bin/sh b/build/install/bin/sh
new file mode 100755
index 0000000..d57fefc
Binary files /dev/null and b/build/install/bin/sh differ
diff --git a/build/install/bin/sync b/build/install/bin/sync
new file mode 100755
index 0000000..58b0690
Binary files /dev/null and b/build/install/bin/sync differ
diff --git a/build/install/bin/tac b/build/install/bin/tac
new file mode 100755
index 0000000..a3fcf23
Binary files /dev/null and b/build/install/bin/tac differ
diff --git a/build/install/bin/true b/build/install/bin/true
new file mode 100755
index 0000000..d1685aa
Binary files /dev/null and b/build/install/bin/true differ
diff --git a/build/install/hostbin/host-dumpsfs b/build/install/hostbin/host-dumpsfs
new file mode 100755
index 0000000..fdf3e15
Binary files /dev/null and b/build/install/hostbin/host-dumpsfs differ
diff --git a/build/install/hostbin/host-hash b/build/install/hostbin/host-hash
new file mode 100755
index 0000000..a54bf42
Binary files /dev/null and b/build/install/hostbin/host-hash differ
diff --git a/build/install/hostbin/host-mksfs b/build/install/hostbin/host-mksfs
new file mode 100755
index 0000000..3f90039
Binary files /dev/null and b/build/install/hostbin/host-mksfs differ
diff --git a/build/install/hostbin/host-poisondisk b/build/install/hostbin/host-poisondisk
new file mode 100755
index 0000000..58e8995
Binary files /dev/null and b/build/install/hostbin/host-poisondisk differ
diff --git a/build/install/hostbin/host-psort b/build/install/hostbin/host-psort
new file mode 100755
index 0000000..540d779
Binary files /dev/null and b/build/install/hostbin/host-psort differ
diff --git a/build/install/hostbin/host-sfsck b/build/install/hostbin/host-sfsck
new file mode 100755
index 0000000..086fff5
Binary files /dev/null and b/build/install/hostbin/host-sfsck differ
diff --git a/build/install/hostbin/host-usemtest b/build/install/hostbin/host-usemtest
new file mode 100755
index 0000000..5bb9bdd
Binary files /dev/null and b/build/install/hostbin/host-usemtest differ
diff --git a/build/install/hostinclude/hostcompat.h b/build/install/hostinclude/hostcompat.h
new file mode 100644
index 0000000..7191964
--- /dev/null
+++ b/build/install/hostinclude/hostcompat.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+#include <sys/types.h>
+#include <stdint.h>
+
+void hostcompat_init(int argc, char **argv);
+
+time_t __time(time_t *secs, unsigned long *nsecs);
+
+#ifdef DECLARE_NTOHLL
+uint64_t ntohll(uint64_t);
+#define htonll(x) (ntohll(x))
+#endif
diff --git a/build/install/hostinclude/kern b/build/install/hostinclude/kern
new file mode 120000
index 0000000..d202793
--- /dev/null
+++ b/build/install/hostinclude/kern
@@ -0,0 +1 @@
+../include/kern
\ No newline at end of file
diff --git a/build/install/include/assert.h b/build/install/include/assert.h
new file mode 100644
index 0000000..4dbc2cd
--- /dev/null
+++ b/build/install/include/assert.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _ASSERT_H_
+#define _ASSERT_H_
+
+/*
+ * Required by the C standard
+ */
+#undef assert
+
+/*
+ * Function to call when an assert fails.
+ */
+void __bad_assert(const char *file, int line, const char *msg);
+
+/*
+ * Asserts are only "on" if NDEBUG isn't set. (This is standard C.)
+ */
+
+#ifdef NDEBUG
+
+#if 0 /* not allowed by the C standard */
+#define assert(x) ((void)(x))	/* retain any side effects of X */
+#else
+#define assert(x) ((void)0)	/* mysteriously hide any side effects of X */
+#endif
+
+#else
+#define assert(x) ((x) ? (void)0 : __bad_assert(__FILE__, __LINE__, #x))
+#endif
+
+
+#endif /* _ASSERT_H_ */
diff --git a/build/install/include/err.h b/build/install/include/err.h
new file mode 100644
index 0000000..8d3f9cb
--- /dev/null
+++ b/build/install/include/err.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _ERR_H_
+#define _ERR_H_
+
+#include <sys/cdefs.h>   /* for __DEAD */
+#include <kern/types.h>  /* for __va_list */
+
+/*
+ * 4.4BSD error-printing functions.
+ *
+ * These print the program name and the supplied message, and
+ * (non-*x versions only) the string for the error currently
+ * stored in "errno", and a newline. The err* versions then
+ * exit with the supplied exitcode.
+ *
+ * The v* versions are to the non-v* versions like vprintf is to
+ * printf.
+ */
+
+void warn(const char *fmt, ...);
+void warnx(const char *fmt, ...);
+__DEAD void err(int exitcode, const char *fmt, ...);
+__DEAD void errx(int exitcode, const char *fmt, ...);
+
+void vwarn(const char *fmt, __va_list);
+void vwarnx(const char *fmt, __va_list);
+__DEAD void verr(int exitcode, const char *fmt, __va_list);
+__DEAD void verrx(int exitcode, const char *fmt, __va_list);
+
+#endif /* _ERR_H_ */
diff --git a/build/install/include/errno.h b/build/install/include/errno.h
new file mode 100644
index 0000000..6c45396
--- /dev/null
+++ b/build/install/include/errno.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _ERRNO_H_
+#define _ERRNO_H_
+
+/* Get the error codes from the kernel. */
+#include <kern/errno.h>
+
+/* Declare the standard global variable errno. */
+extern int errno;
+
+#endif /* _ERRNO_H_ */
diff --git a/build/install/include/fcntl.h b/build/install/include/fcntl.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/fcntl.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/kern/endian.h b/build/install/include/kern/endian.h
new file mode 100644
index 0000000..0d83e2b
--- /dev/null
+++ b/build/install/include/kern/endian.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_ENDIAN_H_
+#define _KERN_ENDIAN_H_
+
+/*
+ * Machine-independent and exported endianness definitions.
+ *
+ * Note: get these via <endian.h> in the kernel and <arpa/inet.h> in
+ * userland.
+ *
+ * This is the historic BSD way of defining endianness.
+ */
+
+#define _LITTLE_ENDIAN 1234
+#define _BIG_ENDIAN    4321
+#define _PDP_ENDIAN    3412
+
+/* This defines _BYTE_ORDER to one of the above. */
+#include <kern/machine/endian.h>
+
+
+#endif /* _KERN_ENDIAN_H_ */
diff --git a/build/install/include/kern/errmsg.h b/build/install/include/kern/errmsg.h
new file mode 100644
index 0000000..097b217
--- /dev/null
+++ b/build/install/include/kern/errmsg.h
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_ERRMSG_H_
+#define _KERN_ERRMSG_H_
+
+/*
+ * Error strings.
+ * This table must agree with kern/errno.h.
+ *
+ * Note that since this actually defines sys_errlist and sys_nerrlist, it
+ * should only be included in one file. For the kernel, that file is
+ * lib/misc.c; for userland it's lib/libc/strerror.c.
+ */
+const char *const sys_errlist[] = {
+	"Operation succeeded",        /* 0 */
+	"Function not implemented",   /* ENOSYS */
+	"(undefined error 2)",        /* unused */
+	"Out of memory",              /* ENOMEM */
+	"Operation would block",      /* EAGAIN (also EWOULDBLOCK) */
+	"Interrupted system call",    /* EINTR */
+	"Bad memory reference",       /* EFAULT */
+	"String too long",            /* ENAMETOOLONG */
+	"Invalid argument",           /* EINVAL */
+	"Operation not permitted",    /* EPERM */
+	"Permission denied",          /* EACCES */
+	"Too many processes",         /* EMPROC (EPROCLIM in Unix) */
+	"Too many processes in system",/* ENPROC */
+	"File is not executable",     /* ENOEXEC */
+	"Argument list too long",     /* E2BIG */
+	"No such process",            /* ESRCH */
+	"No child processes",         /* ECHILD */
+	"Not a directory",            /* ENOTDIR */
+	"Is a directory",             /* EISDIR */
+	"No such file or directory",  /* ENOENT */
+	"Too many levels of symbolic links",/* ELOOP */
+	"Directory not empty",        /* ENOTEMPTY */
+	"File or object exists",      /* EEXIST */
+	"Too many hard links",        /* EMLINK */
+	"Cross-device link",          /* EXDEV */
+	"No such device",             /* ENODEV */
+	"Device not available",       /* ENXIO */
+	"Device or resource busy",    /* EBUSY */
+	"Too many open files",        /* EMFILE */
+	"Too many open files in system",/* ENFILE */
+	"Bad file number",            /* EBADF */
+	"Invalid or inappropriate ioctl",/* EIOCTL (ENOTTY in Unix) */
+	"Input/output error",         /* EIO */
+	"Illegal seek",               /* ESPIPE */
+	"Broken pipe",                /* EPIPE */
+	"Read-only file system",      /* EROFS */
+	"No space left on device",    /* ENOSPC */
+	"Disc quota exceeded",        /* EDQUOT */
+	"File too large",             /* EFBIG */
+	"Invalid file type or format",/* EFTYPE */
+	"Argument out of range",      /* EDOM */
+	"Result out of range",        /* ERANGE */
+	"Invalid multibyte character sequence",/* EILSEQ */
+	"Not a socket",               /* ENOTSOCK */
+	"Is a socket",                /* EISSOCK (EOPNOTSUPP in Unix) */
+	"Socket is already connected",/* EISCONN */
+	"Socket is not connected",    /* ENOTCONN */
+	"Socket has been shut down",  /* ESHUTDOWN */
+	"Protocol family not supported",/* EPFNOSUPPORT */
+	"Socket type not supported",  /* ESOCKTNOSUPPORT */
+	"Protocol not supported",     /* EPROTONOSUPPORT */
+	"Protocol wrong type for socket",/* EPROTOTYPE */
+	"Address family not supported by protocol family",/* EAFNOSUPPORT */
+	"Protocol option not available",/* ENOPROTOOPT */
+	"Address already in use",     /* EADDRINUSE */
+	"Cannot assign requested address",/* EADDRNOTAVAIL */
+	"Network is down",            /* ENETDOWN */
+	"Network is unreachable",     /* ENETUNREACH */
+	"Host is down",               /* EHOSTDOWN */
+	"Host is unreachable",        /* EHOSTUNREACH */
+	"Connection refused",         /* ECONNREFUSED */
+	"Connection timed out",       /* ETIMEDOUT */
+	"Connection reset by peer",   /* ECONNRESET */
+	"Message too large",          /* EMSGSIZE */
+	"Threads operation not supported",/* ENOTSUP */
+};
+
+/*
+ * Number of entries in sys_errlist.
+ */
+const int sys_nerr = sizeof(sys_errlist)/sizeof(const char *);
+
+#endif /* _KERN_ERRMSG_H_ */
diff --git a/build/install/include/kern/errno.h b/build/install/include/kern/errno.h
new file mode 100644
index 0000000..3c78d5e
--- /dev/null
+++ b/build/install/include/kern/errno.h
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_ERRNO_H_
+#define _KERN_ERRNO_H_
+
+/*
+ * If you change this, be sure to make appropriate corresponding changes
+ * to kern/errmsg.h as well. You might also want to change the man page
+ * for errno to document the new error.
+ *
+ * This has been changed relative to OS/161 1.x to make the grouping
+ * more logical.
+ *
+ * Also note that this file has to work from assembler, so it should
+ * contain only symbolic constants.
+ */
+
+#define ENOSYS          1      /* Function not implemented */
+/* unused               2                                  */
+#define ENOMEM          3      /* Out of memory */
+#define EAGAIN          4      /* Operation would block */
+#define EINTR           5      /* Interrupted system call */
+#define EFAULT          6      /* Bad memory reference */
+#define ENAMETOOLONG    7      /* String too long */
+#define EINVAL          8      /* Invalid argument */
+#define EPERM           9      /* Operation not permitted */
+#define EACCES          10     /* Permission denied */
+#define EMPROC          11     /* Too many processes */
+#define ENPROC          12     /* Too many processes in system */
+#define ENOEXEC         13     /* File is not executable */
+#define E2BIG           14     /* Argument list too long */
+#define ESRCH           15     /* No such process */
+#define ECHILD          16     /* No child processes */
+#define ENOTDIR         17     /* Not a directory */
+#define EISDIR          18     /* Is a directory */
+#define ENOENT          19     /* No such file or directory */
+#define ELOOP           20     /* Too many levels of symbolic links */
+#define ENOTEMPTY       21     /* Directory not empty */
+#define EEXIST          22     /* File or object exists */
+#define EMLINK          23     /* Too many hard links */
+#define EXDEV           24     /* Cross-device link */
+#define ENODEV          25     /* No such device */
+#define ENXIO           26     /* Device not available */
+#define EBUSY           27     /* Device or resource busy */
+#define EMFILE          28     /* Too many open files */
+#define ENFILE          29     /* Too many open files in system */
+#define EBADF           30     /* Bad file number */
+#define EIOCTL          31     /* Invalid or inappropriate ioctl */
+#define EIO             32     /* Input/output error */
+#define ESPIPE          33     /* Illegal seek */
+#define EPIPE           34     /* Broken pipe */
+#define EROFS           35     /* Read-only file system */
+#define ENOSPC          36     /* No space left on device */
+#define EDQUOT          37     /* Disc quota exceeded */
+#define EFBIG           38     /* File too large */
+#define EFTYPE          39     /* Invalid file type or format */
+#define EDOM            40     /* Argument out of range */
+#define ERANGE          41     /* Result out of range */
+#define EILSEQ          42     /* Invalid multibyte character sequence */
+#define ENOTSOCK        43     /* Not a socket */
+#define EISSOCK         44     /* Is a socket */
+#define EISCONN         45     /* Socket is already connected */
+#define ENOTCONN        46     /* Socket is not connected */
+#define ESHUTDOWN       47     /* Socket has been shut down */
+#define EPFNOSUPPORT    48     /* Protocol family not supported */
+#define ESOCKTNOSUPPORT 49     /* Socket type not supported */
+#define EPROTONOSUPPORT 50     /* Protocol not supported */
+#define EPROTOTYPE      51     /* Protocol wrong type for socket */
+#define EAFNOSUPPORT   52 /* Address family not supported by protocol family */
+#define ENOPROTOOPT     53     /* Protocol option not available */
+#define EADDRINUSE      54     /* Address already in use */
+#define EADDRNOTAVAIL   55     /* Cannot assign requested address */
+#define ENETDOWN        56     /* Network is down */
+#define ENETUNREACH     57     /* Network is unreachable */
+#define EHOSTDOWN       58     /* Host is down */
+#define EHOSTUNREACH    59     /* Host is unreachable */
+#define ECONNREFUSED    60     /* Connection refused */
+#define ETIMEDOUT       61     /* Connection timed out */
+#define ECONNRESET      62     /* Connection reset by peer */
+#define EMSGSIZE        63     /* Message too large */
+#define ENOTSUP         64     /* Threads operation not supported */
+
+
+#endif /* _KERN_ERRNO_H_ */
diff --git a/build/install/include/kern/fcntl.h b/build/install/include/kern/fcntl.h
new file mode 100644
index 0000000..4326806
--- /dev/null
+++ b/build/install/include/kern/fcntl.h
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_FCNTL_H_
+#define _KERN_FCNTL_H_
+
+/*
+ * Constants for libc's <fcntl.h>.
+ */
+
+
+/*
+ * Important
+ */
+
+/* Flags for open: choose one of these: */
+#define O_RDONLY      0      /* Open for read */
+#define O_WRONLY      1      /* Open for write */
+#define O_RDWR        2      /* Open for read and write */
+/* then or in any of these: */
+#define O_CREAT       4      /* Create file if it doesn't exist */
+#define O_EXCL        8      /* With O_CREAT, fail if file already exists */
+#define O_TRUNC      16      /* Truncate file upon open */
+#define O_APPEND     32      /* All writes happen at EOF (optional feature) */
+#define O_NOCTTY     64      /* Required by POSIX, != 0, but does nothing */
+
+/* Additional related definition */
+#define O_ACCMODE     3      /* mask for O_RDONLY/O_WRONLY/O_RDWR */
+
+/*
+ * Not so important
+ */
+
+/* operation codes for flock() */
+#define LOCK_SH         1       /* shared lock */
+#define LOCK_EX         2       /* exclusive lock */
+#define LOCK_UN         3       /* release the lock */
+#define LOCK_NB         4       /* flag: don't block */
+
+/*
+ * Mostly pretty useless
+ */
+
+/* fcntl() operations */
+#define F_DUPFD         0       /* like dup() but not quite */
+#define F_GETFD         1       /* get per-handle flags */
+#define F_SETFD         2       /* set per-handle flags */
+#define F_GETFL         3       /* get per-file flags (O_* open flags) */
+#define F_SETFL         4       /* set per-file flags (O_* open flags) */
+#define F_GETOWN        5       /* get process/pgroup for SIGURG and SIGIO */
+#define F_SETOWN        6       /* set process/pgroup for SIGURG and SIGIO */
+#define F_GETLK         7       /* inspect record locks */
+#define F_SETLK         8       /* acquire record locks nonblocking */
+#define F_SETLKW        9       /* acquire record locks and wait */
+
+/* flag for F_GETFD and F_SETFD */
+#define FD_CLOEXEC      1       /* close-on-exec */
+
+/* modes for fcntl (F_GETLK/SETLK) locking */
+#define F_RDLCK         0       /* shared lock */
+#define F_WRLCK         1       /* exclusive lock */
+#define F_UNLCK         2       /* unlock */
+
+/* struct for fcntl (F_GETLK/SETLK) locking */
+struct flock {
+	off_t l_start;          /* place in file */
+	int l_whence;           /* SEEK_SET, SEEK_CUR, or SEEK_END */
+	int l_type;             /* F_RDLCK or F_WRLCK */
+	off_t l_len;            /* length of locked region */
+	pid_t l_pid;            /* process that holds the lock */
+};
+
+
+#endif /* _KERN_FCNTL_H_ */
diff --git a/build/install/include/kern/ioctl.h b/build/install/include/kern/ioctl.h
new file mode 100644
index 0000000..f374e7e
--- /dev/null
+++ b/build/install/include/kern/ioctl.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_IOCTL_H_
+#define _KERN_IOCTL_H_
+
+/*
+ * ioctl operation codes
+ */
+
+/* (none yet) */
+
+#endif /* _KERN_IOCTL_H_*/
diff --git a/build/install/include/kern/iovec.h b/build/install/include/kern/iovec.h
new file mode 100644
index 0000000..3436557
--- /dev/null
+++ b/build/install/include/kern/iovec.h
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_IOVEC_H_
+#define _KERN_IOVEC_H_
+
+/*
+ * iovec structure, used in the readv/writev scatter/gather I/O calls,
+ * and within the kernel for keeping track of blocks of data for I/O.
+ */
+
+struct iovec {
+	/*
+	 * For maximum type safety, when in the kernel, distinguish
+	 * user pointers from kernel pointers.
+	 *
+	 * (A pointer is a user pointer if it *came* from userspace,
+	 * not necessarily if it *points* to userspace. If a system
+	 * call passes 0xdeadbeef, it points to the kernel, but it's
+	 * still a user pointer.)
+	 *
+	 * In userspace, there are only user pointers; also, the name
+	 * iov_base is defined by POSIX.
+	 *
+	 * Note that to work properly (without extra unwanted fiddling
+	 * around) this scheme requires that void* and userptr_t have
+	 * the same machine representation. Machines where this isn't
+	 * true are theoretically possible under the C standard, but
+	 * do not exist in practice.
+	 */
+#ifdef _KERNEL
+        union {
+                userptr_t  iov_ubase;	/* user-supplied pointer */
+                void      *iov_kbase;	/* kernel-supplied pointer */
+        };
+#else
+	void *iov_base;			/* user-supplied pointer */
+#endif
+        size_t iov_len;			/* Length of data */
+};
+
+#endif /* _KERN_IOVEC_H_ */
diff --git a/build/install/include/kern/limits.h b/build/install/include/kern/limits.h
new file mode 100644
index 0000000..8699b80
--- /dev/null
+++ b/build/install/include/kern/limits.h
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_LIMITS_H_
+#define _KERN_LIMITS_H_
+
+/*
+ * Constants for libc's <limits.h> - system limits.
+ *
+ * The symbols are prefixed with __ here to avoid namespace pollution
+ * in libc. Use <limits.h> (in either userspace or the kernel) to get
+ * the proper names.
+ *
+ * These are Unix-style limits that Unix defines; you can change them
+ * around or add others as needed or as are appropriate to your system
+ * design.
+ *
+ * Likewise, the default values provided here are fairly reasonable,
+ * but you can change them around pretty freely and userspace code
+ * should adapt. Do change these as needed to match your
+ * implementation.
+ */
+
+
+/*
+ * Important, both as part of the system call API and for system behavior.
+ *
+ * 255 for NAME_MAX and 1024 for PATH_MAX are conventional. ARG_MAX
+ * should be at least 16K. In real systems it often runs to 256K or
+ * more.
+ */
+
+/* Longest filename (without directory) not including null terminator */
+#define __NAME_MAX      255
+
+/* Longest full path name */
+#define __PATH_MAX      1024
+
+/* Max bytes for an exec function (should be at least 16K) */
+#define __ARG_MAX       (64 * 1024)
+
+
+/*
+ * Important for system behavior, but not a big part of the API.
+ *
+ * Most modern systems don't have OPEN_MAX at all, and instead go by
+ * whatever limit is set with setrlimit().
+ */
+
+/* Min value for a process ID (that can be assigned to a user process) */
+#define __PID_MIN       2
+
+/* Max value for a process ID (change this to match your implementation) */
+#define __PID_MAX       32767
+
+/* Max open files per process */
+#define __OPEN_MAX      128
+
+/* Max bytes for atomic pipe I/O -- see description in the pipe() man page */
+#define __PIPE_BUF      512
+
+
+/*
+ * Not so important parts of the API. (Especially in OS/161 where we
+ * don't do credentials by default.)
+ */
+
+/* Max number of supplemental group IDs in process credentials */
+#define __NGROUPS_MAX   32
+
+/* Max login name size (for setlogin/getlogin), incl. null */
+#define __LOGIN_NAME_MAX 17
+
+
+/*
+ * Not very important at all.
+ */
+
+/* Max number of iovec structures at once for readv/writev/preadv/pwritev */
+#define __IOV_MAX       1024
+
+
+#endif /* _KERN_LIMITS_H_ */
diff --git a/build/install/include/kern/machine b/build/install/include/kern/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/build/install/include/kern/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/build/install/include/kern/mips/endian.h b/build/install/include/kern/mips/endian.h
new file mode 100644
index 0000000..b9a1784
--- /dev/null
+++ b/build/install/include/kern/mips/endian.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_MIPS_ENDIAN_H_
+#define _KERN_MIPS_ENDIAN_H_
+
+/*
+ * Endianness. While the MIPS can be either big-endian (mipseb) or
+ * little-endian (mipsel), at least for now we only do mipseb.
+ *
+ * This file should only be included via <kern/endian.h> which in turn
+ * should be gotten via <endian.h> in the kernel or <arpa/inet.h> in
+ * userland.
+ */
+
+#define _BYTE_ORDER _BIG_ENDIAN
+
+#endif /* _KERN_MIPS_ENDIAN_H_ */
diff --git a/build/install/include/kern/mips/regdefs.h b/build/install/include/kern/mips/regdefs.h
new file mode 100644
index 0000000..5fd6a6e
--- /dev/null
+++ b/build/install/include/kern/mips/regdefs.h
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * Macros for general-purpose register numbers for MIPS.
+ *
+ * Exported to userlevel because it's ~standard for that architecture.
+ */
+
+#ifndef _KERN_MIPS_REGDEFS_H_
+#define _KERN_MIPS_REGDEFS_H_
+
+
+#define z0  $0     /* always zero register */
+#define AT  $1     /* assembler temp register */
+#define v0  $2     /* value 0 */
+#define v1  $3     /* value 1 */
+#define a0  $4     /* argument 0 */
+#define a1  $5     /* argument 1 */
+#define a2  $6     /* argument 2 */
+#define a3  $7     /* argument 3 */
+#define t0  $8     /* temporary (caller-save) 0 */
+#define t1  $9     /* temporary (caller-save) 1 */
+#define t2  $10    /* temporary (caller-save) 2 */
+#define t3  $11    /* temporary (caller-save) 3 */
+#define t4  $12    /* temporary (caller-save) 4 */
+#define t5  $13    /* temporary (caller-save) 5 */
+#define t6  $14    /* temporary (caller-save) 6 */
+#define t7  $15    /* temporary (caller-save) 7 */
+#define s0  $16    /* saved (callee-save) 0 */
+#define s1  $17    /* saved (callee-save) 1 */
+#define s2  $18    /* saved (callee-save) 2 */
+#define s3  $19    /* saved (callee-save) 3 */
+#define s4  $20    /* saved (callee-save) 4 */
+#define s5  $21    /* saved (callee-save) 5 */
+#define s6  $22    /* saved (callee-save) 6 */
+#define s7  $23    /* saved (callee-save) 7 */
+#define t8  $24    /* temporary (caller-save) 8 */
+#define t9  $25    /* temporary (caller-save) 9 */
+#define k0  $26    /* kernel temporary 0 */
+#define k1  $27    /* kernel temporary 1 */
+#define gp  $28    /* global pointer */
+#define sp  $29    /* stack pointer */
+#define s8  $30    /* saved (callee-save) 8 = frame pointer */
+#define ra  $31    /* return address */
+
+
+#endif /* _KERN_MIPS_REGDEFS_H_ */
diff --git a/build/install/include/kern/mips/setjmp.h b/build/install/include/kern/mips/setjmp.h
new file mode 100644
index 0000000..13596a1
--- /dev/null
+++ b/build/install/include/kern/mips/setjmp.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _MIPS_SETJMP_H_
+#define _MIPS_SETJMP_H_
+
+/*
+ * MIPS jmp_buf definition.
+ */
+
+/*
+ * Must save: s0-s8, sp, ra (11 registers)
+ * Don't change __JB_REGS without adjusting mips_setjmp.S accordingly.
+ */
+#define __JB_REGS  11
+
+/* A jmp_buf is an array of __JB_REGS registers */
+typedef uint32_t jmp_buf[__JB_REGS];
+
+
+#endif /* _MIPS_SETJMP_H_ */
diff --git a/build/install/include/kern/mips/signal.h b/build/install/include/kern/mips/signal.h
new file mode 100644
index 0000000..fbc713d
--- /dev/null
+++ b/build/install/include/kern/mips/signal.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+#ifndef _KERN_MIPS_SIGNAL_H_
+#define _KERN_MIPS_SIGNAL_H_
+
+/*
+ * Structure used to hold the register values for returning from a
+ * userland signal handler - basically the saved register values from
+ * whatever userlevel execution context the signal interrupted. Fill
+ * this in as needed, if you ever implement signal handlers. (Which you
+ * probably won't.)
+ */
+struct sigcontext {
+	/* Dummy. */
+};
+
+#endif /* _KERN_MIPS_SIGNAL_H_ */
diff --git a/build/install/include/kern/mips/types.h b/build/install/include/kern/mips/types.h
new file mode 100644
index 0000000..fd93ba4
--- /dev/null
+++ b/build/install/include/kern/mips/types.h
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_MIPS_TYPES_H_
+#define _KERN_MIPS_TYPES_H_
+
+/*
+ * Machine-dependent types visible to userland.
+ * (Kernel-only types should go in mips/types.h.)
+ * 32-bit MIPS version.
+ *
+ * See kern/types.h for an explanation of the underscores.
+ */
+
+
+/* Sized integer types, with convenient short names */
+typedef char      __i8;                 /* 8-bit signed integer */
+typedef short     __i16;                /* 16-bit signed integer */
+typedef int       __i32;                /* 32-bit signed integer */
+typedef long long __i64;                /* 64-bit signed integer */
+
+typedef unsigned char      __u8;        /* 8-bit unsigned integer */
+typedef unsigned short     __u16;       /* 16-bit unsigned integer */
+typedef unsigned int       __u32;       /* 32-bit unsigned integer */
+typedef unsigned long long __u64;       /* 64-bit unsigned integer */
+
+/* Further standard C types */
+typedef long __intptr_t;                /* Signed pointer-sized integer */
+typedef unsigned long __uintptr_t;      /* Unsigned pointer-sized integer */
+
+/*
+ * Since we're a 32-bit platform, size_t, ssize_t, and ptrdiff_t can
+ * correctly be either (unsigned) int or (unsigned) long. However, if we
+ * don't define it to the same one gcc is using, gcc will get
+ * upset. If you switch compilers and see otherwise unexplicable type
+ * errors involving size_t, try changing this.
+ */
+#if 1
+typedef unsigned __size_t;              /* Size of a memory region */
+typedef int __ssize_t;                  /* Signed type of same size */
+typedef int __ptrdiff_t;                /* Difference of two pointers */
+#else
+typedef unsigned long __size_t;         /* Size of a memory region */
+typedef long __ssize_t;                 /* Signed type of same size */
+typedef long __ptrdiff_t;               /* Difference of two pointers */
+#endif
+
+/* Number of bits per byte. */
+#define __CHAR_BIT  8
+
+
+#endif /* _KERN_MIPS_TYPES_H_ */
diff --git a/build/install/include/kern/reboot.h b/build/install/include/kern/reboot.h
new file mode 100644
index 0000000..6130466
--- /dev/null
+++ b/build/install/include/kern/reboot.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_REBOOT_H_
+#define _KERN_REBOOT_H_
+
+/*
+ * Constants for libc's <sys/reboot.h> and the reboot() system call.
+ * (Not all that important.)
+ */
+
+
+/* Codes for reboot */
+#define RB_REBOOT     0      /* Reboot system */
+#define RB_HALT       1      /* Halt system and do not reboot */
+#define RB_POWEROFF   2      /* Halt system and power off */
+
+
+#endif /* _KERN_REBOOT_H_ */
diff --git a/build/install/include/kern/resource.h b/build/install/include/kern/resource.h
new file mode 100644
index 0000000..bec2c3b
--- /dev/null
+++ b/build/install/include/kern/resource.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2004, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_RESOURCE_H_
+#define _KERN_RESOURCE_H_
+
+/*
+ * Definitions for resource usage and limits.
+ *
+ * Not very important.
+ */
+
+
+/* priorities for setpriority() */
+#define PRIO_MIN	(-20)
+#define PRIO_MAX	20
+
+/* "which" codes for setpriority() */
+#define PRIO_PROCESS	0
+#define PRIO_PGRP	1
+#define PRIO_USER	2
+
+/* flags for getrusage() */
+#define RUSAGE_SELF	0
+#define RUSAGE_CHILDREN	(-1)
+
+struct rusage {
+	struct timeval ru_utime;
+	struct timeval ru_stime;
+	__size_t ru_maxrss;		/* maximum RSS during lifespan (kb) */
+	__counter_t ru_ixrss;		/* text memory usage (kb-ticks) */
+	__counter_t ru_idrss;		/* data memory usage (kb-ticks) */
+	__counter_t ru_isrss;		/* stack memory usage (kb-ticks) */
+	__counter_t ru_minflt;		/* minor VM faults (count) */
+	__counter_t ru_majflt;		/* major VM faults (count) */
+	__counter_t ru_nswap;		/* whole-process swaps (count) */
+	__counter_t ru_inblock;		/* file blocks read (count) */
+	__counter_t ru_oublock;		/* file blocks written (count) */
+	__counter_t ru_msgrcv;		/* socket/pipe packets rcv'd (count) */
+	__counter_t ru_msgsnd;		/* socket/pipe packets sent (count) */
+	__counter_t ru_nsignals;	/* signals delivered (count) */
+	__counter_t ru_nvcsw;		/* voluntary context switches (count)*/
+	__counter_t ru_nivcsw;		/* involuntary ditto (count) */
+};
+
+/* limit codes for getrusage/setrusage */
+
+#define RLIMIT_NPROC		0	/* max procs per user (count) */
+#define RLIMIT_NOFILE		1	/* max open files per proc (count) */
+#define RLIMIT_CPU		2	/* cpu usage (seconds) */
+#define RLIMIT_DATA		3	/* max .data/sbrk size (bytes) */
+#define RLIMIT_STACK		4	/* max stack size (bytes) */
+#define RLIMIT_MEMLOCK		5	/* max locked memory region (bytes) */
+#define RLIMIT_RSS		6	/* max RSS (bytes) */
+#define RLIMIT_CORE		7	/* core file size (bytes) */
+#define RLIMIT_FSIZE		8	/* max file size (bytes) */
+#define __RLIMIT_NUM		9	/* number of limits */
+
+struct rlimit {
+	__rlim_t rlim_cur;	/* soft limit */
+	__rlim_t rlim_max;	/* hard limit */
+};
+
+#define RLIM_INFINITY	(~(__rlim_t)0)
+
+#endif /* _KERN_RESOURCE_H_ */
diff --git a/build/install/include/kern/seek.h b/build/install/include/kern/seek.h
new file mode 100644
index 0000000..cf1cfe6
--- /dev/null
+++ b/build/install/include/kern/seek.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SEEK_H_
+#define _KERN_SEEK_H_
+
+/*
+ * Codes for lseek(), which are shared in libc between <fcntl.h> and
+ * <unistd.h> and thus get their own file.
+ *
+ * These are pretty important. Back in the day (like 20+ years ago)
+ * people would often just write the values 0, 1, and 2, but that's
+ * really not recommended.
+ */
+
+#define SEEK_SET      0      /* Seek relative to beginning of file */
+#define SEEK_CUR      1      /* Seek relative to current position in file */
+#define SEEK_END      2      /* Seek relative to end of file */
+
+
+#endif /* _KERN_SEEK_H_ */
diff --git a/build/install/include/kern/sfs.h b/build/install/include/kern/sfs.h
new file mode 100644
index 0000000..49618ab
--- /dev/null
+++ b/build/install/include/kern/sfs.h
@@ -0,0 +1,160 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2014
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SFS_H_
+#define _KERN_SFS_H_
+
+
+/*
+ * SFS definitions visible to userspace. This covers the on-disk format
+ * and is used by tools that work on SFS volumes, such as mksfs.
+ */
+
+#define SFS_MAGIC         0xabadf001    /* magic number identifying us */
+#define SFS_BLOCKSIZE     512           /* size of our blocks */
+#define SFS_VOLNAME_SIZE  32            /* max length of volume name */
+#define SFS_NDIRECT       15            /* # of direct blocks in inode */
+#define SFS_NINDIRECT     1             /* # of indirect blocks in inode */
+#define SFS_NDINDIRECT    1             /* # of 2x indirect blocks in inode */
+#define SFS_NTINDIRECT    1             /* # of 3x indirect blocks in inode */
+#define SFS_DBPERIDB      128           /* # direct blks per indirect blk */
+#define SFS_NAMELEN       60            /* max length of filename */
+#define SFS_SUPER_BLOCK   0             /* block the superblock lives in */
+#define SFS_FREEMAP_START 2             /* 1st block of the freemap */
+#define SFS_NOINO         0             /* inode # for free dir entry */
+#define SFS_ROOTDIR_INO   1             /* loc'n of the root dir inode */
+
+/* Number of bits in a block */
+#define SFS_BITSPERBLOCK (SFS_BLOCKSIZE * CHAR_BIT)
+
+/* Utility macro */
+#define SFS_ROUNDUP(a,b)       ((((a)+(b)-1)/(b))*b)
+
+/* Size of free block bitmap (in bits) */
+#define SFS_FREEMAPBITS(nblocks) SFS_ROUNDUP(nblocks, SFS_BITSPERBLOCK)
+
+/* Size of free block bitmap (in blocks) */
+#define SFS_FREEMAPBLOCKS(nblocks)  (SFS_FREEMAPBITS(nblocks)/SFS_BITSPERBLOCK)
+
+/* File types for sfi_type */
+#define SFS_TYPE_INVAL    0       /* Should not appear on disk */
+#define SFS_TYPE_FILE     1
+#define SFS_TYPE_DIR      2
+
+/*
+ * On-disk superblock
+ */
+struct sfs_superblock {
+	uint32_t sb_magic;		/* Magic number; should be SFS_MAGIC */
+	uint32_t sb_nblocks;			/* Number of blocks in fs */
+	char sb_volname[SFS_VOLNAME_SIZE];	/* Name of this volume */
+	uint32_t sb_journalstart;		/* First block in journal */
+	uint32_t sb_journalblocks;		/* # of blocks in journal */
+	uint32_t reserved[116];			/* unused, set to 0 */
+};
+
+/*
+ * On-disk inode
+ */
+struct sfs_dinode {
+	uint32_t sfi_size;			/* Size of this file (bytes) */
+	uint16_t sfi_type;			/* One of SFS_TYPE_* above */
+	uint16_t sfi_linkcount;			/* # hard links to this file */
+	uint32_t sfi_direct[SFS_NDIRECT];	/* Direct blocks */
+	uint32_t sfi_indirect;			/* Indirect block */
+	uint32_t sfi_dindirect;   /* Double indirect block */
+	uint32_t sfi_tindirect;   /* Triple indirect block */
+	uint32_t sfi_waste[128-5-SFS_NDIRECT];	/* unused space, set to 0 */
+};
+
+/*
+ * On-disk directory entry
+ */
+struct sfs_direntry {
+	uint32_t sfd_ino;			/* Inode number */
+	char sfd_name[SFS_NAMELEN];		/* Filename */
+};
+
+/*
+ * On-disk journal container types and constants
+ */
+
+/*
+ * On-disk bit-packed type for use in record headers; contains the
+ * container-level information for a journal record, namely:
+ *     48-bit LSN
+ *     8-bit length, in 2-octet units
+ *     7-bit type code
+ *     1-bit type code class
+ *
+ * The type code class is either SFS_JPHYS_CONTAINER, for container-
+ * level records, or SFS_JPHYS_CLIENT, for records defined by higher-
+ * level code.
+ *
+ * The length is stored in 2-octet units so we only need 8 bits for a
+ * record of up to one whole block.
+ *
+ * The length includes the header. (struct sfs_jphys_header)
+ *
+ * Note that a coninfo whose integer value is 0 is not valid; this
+ * prevents us from getting confused by still-zeroed journal blocks.
+ */
+#define SFS_CONINFO_CLASS(ci)	((ci) >> 63)  /* client vs. container record */
+#define SFS_CONINFO_TYPE(ci)	(((ci) >> 56) & 0x7f)	/* record type */
+#define SFS_CONINFO_LEN(ci)	((((ci) >> 48) & 0xff)*2) /* record length */
+#define SFS_CONINFO_LSN(ci)	((ci) & 0xffffffffffff)	/* log sequence no. */
+#define SFS_MKCONINFO(cl, ty, len, lsn) \
+	(						\
+		((uint64_t)(cl) << 63) |		\
+		((uint64_t)(ty) << 56) |		\
+		((uint64_t)((len + 1) / 2) << 48) |	\
+		(lsn)					\
+	)
+
+/* symbolic names for the type code classes */
+#define SFS_JPHYS_CONTAINER	0
+#define SFS_JPHYS_CLIENT	1
+
+/* container-level record types (allowable range 0-127) */
+#define SFS_JPHYS_INVALID	0		/* No record here */
+#define SFS_JPHYS_PAD		1		/* Padding */
+#define SFS_JPHYS_TRIM		2		/* Log trim record */
+
+/* The record header */
+struct sfs_jphys_header {
+	uint64_t jh_coninfo;			/* Container info */
+};
+
+/* Contents for SFS_JPHYS_TRIM */
+struct sfs_jphys_trim {
+	uint64_t jt_taillsn;			/* Tail LSN */
+};
+
+
+#endif /* _KERN_SFS_H_ */
diff --git a/build/install/include/kern/signal.h b/build/install/include/kern/signal.h
new file mode 100644
index 0000000..4036bb3
--- /dev/null
+++ b/build/install/include/kern/signal.h
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) 1982, 1986, 1989, 1991, 1993
+ *	The Regents of the University of California.  All rights reserved.
+ * (c) UNIX System Laboratories, Inc.
+ * All or some portions of this file are derived from material licensed
+ * to the University of California by American Telephone and Telegraph
+ * Co. or Unix System Laboratories, Inc. and are reproduced herein with
+ * the permission of UNIX System Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	@(#)signal.h	8.4 (Berkeley) 5/4/95
+ */
+
+#ifndef _KERN_SIGNAL_H_
+#define _KERN_SIGNAL_H_
+
+/*
+ * Machine-independent definitions for signals.
+ */
+
+
+/*
+ * The signals.
+ *
+ * The values of many of these are "well known", particularly 1, 9,
+ * 10, and 11.
+ *
+ * Note that Unix signals are a semantic cesspool; many have special
+ * properties or are supposed to interact with the system in special
+ * ways. It is gross.
+ */
+
+#define SIGHUP		1	/* Hangup */
+#define SIGINT		2	/* Interrupt (^C) */
+#define SIGQUIT		3	/* Quit (typically ^\) */
+#define SIGILL		4	/* Illegal instruction */
+#define SIGTRAP		5	/* Breakpoint trap */
+#define SIGABRT		6	/* abort() call */
+#define SIGEMT		7	/* Emulator trap */
+#define SIGFPE		8	/* Floating point exception */
+#define SIGKILL		9	/* Hard kill (unblockable) */
+#define SIGBUS		10	/* Bus error, typically bad pointer alignment*/
+#define SIGSEGV		11	/* Segmentation fault */
+#define SIGSYS		12	/* Bad system call */
+#define SIGPIPE		13	/* Broken pipe */
+#define SIGALRM		14	/* alarm() expired */
+#define SIGTERM		15	/* Termination requested (default kill) */
+#define SIGURG		16	/* Urgent data on socket */
+#define SIGSTOP		17	/* Hard process stop (unblockable) */
+#define SIGTSTP		18	/* Terminal stop (^Z) */
+#define SIGCONT		19	/* Time to continue after stop */
+#define SIGCHLD		20	/* Child process exited */
+#define SIGTTIN		21	/* Stop on tty read while in background */
+#define SIGTTOU		22	/* Stop on tty write while in background */
+#define SIGIO		23	/* Nonblocking or async I/O is now ready */
+#define SIGXCPU		24	/* CPU time resource limit exceeded */
+#define SIGXFSZ		25	/* File size resource limit exceeded */
+#define SIGVTALRM	26	/* Like SIGALRM but in virtual time */
+#define SIGPROF		27	/* Profiling timer */
+#define SIGWINCH	28	/* Window size change on tty */
+#define SIGINFO		29	/* Information request (typically ^T) */
+#define SIGUSR1		20	/* Application-defined */
+#define SIGUSR2		31	/* Application-defined */
+#define SIGPWR		32	/* Power failure */
+#define _NSIG		32
+
+
+/* Type for a set of signals; used by e.g. sigprocmask(). */
+typedef __u32 sigset_t;
+
+/* flags for sigaction.sa_flags */
+#define SA_ONSTACK	1	/* Use sigaltstack() stack. */
+#define SA_RESTART	2	/* Restart syscall instead of interrupting. */
+#define SA_RESETHAND	4	/* Clear handler after one usage. */
+
+/* codes for sigprocmask() */
+#define SIG_BLOCK	1	/* Block selected signals. */
+#define SIG_UNBLOCK	2	/* Unblock selected signals. */
+#define SIG_SETMASK	3	/* Set mask to the selected signals. */
+
+/* Type for a signal handler function. */
+typedef void (*__sigfunc)(int);
+
+/* Magic values for signal handlers. */
+#define SIG_DFL		((__sigfunc) 0)		/* Default behavior. */
+#define SIG_IGN		((__sigfunc) 1)		/* Ignore the signal. */
+
+/*
+ * Struct for sigaction().
+ */
+struct sigaction {
+	__sigfunc sa_handler;
+	sigset_t sa_mask;
+	unsigned sa_flags;
+};
+
+/*
+ * Struct for sigaltstack().
+ * (not very important)
+ */
+struct sigaltstack {
+	void *ss_sp;
+	size_t ss_size;
+	unsigned ss_flags;
+};
+
+
+#endif /* _KERN_SIGNAL_H_ */
diff --git a/build/install/include/kern/socket.h b/build/install/include/kern/socket.h
new file mode 100644
index 0000000..4796f9a
--- /dev/null
+++ b/build/install/include/kern/socket.h
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2004, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SOCKET_H_
+#define _KERN_SOCKET_H_
+
+/*
+ * Socket-related definitions, for <sys/socket.h>.
+ */
+
+
+/*
+ * Important
+ */
+
+/* Socket types that we (might) support. */
+#define SOCK_STREAM	1	/* stream */
+#define SOCK_DGRAM	2	/* packet */
+#define SOCK_RAW	3	/* raw packet */
+
+/* Address families that we (might) support. */
+#define AF_UNSPEC	0
+#define AF_UNIX		1
+#define AF_INET		2
+#define AF_INET6	3
+
+/* Protocol families. Pointless layer of indirection in the standard API. */
+#define PF_UNSPEC	AF_UNSPEC
+#define PF_UNIX		AF_UNIX
+#define PF_INET		AF_INET
+#define PF_INET6	AF_INET6
+
+/*
+ * Socket address structures. Socket addresses are polymorphic, and
+ * the polymorphism is handled by casting pointers. It's fairly gross,
+ * but way too deeply standardized to ever change.
+ *
+ * Each address family defines a sockaddr type (sockaddr_un,
+ * sockaddr_in, etc.) struct sockaddr is the common prefix of all
+ * these, and struct sockaddr_storage is defined to be large enough to
+ * hold any of them.
+ *
+ * The complex padding in sockaddr_storage forces it to be aligned,
+ * which wouldn't happen if it were just a char array.
+ */
+
+struct sockaddr {
+   __u8	sa_len;
+   __u8 sa_family;
+};
+
+#define _SS_SIZE	128
+struct sockaddr_storage {
+   __u8 ss_len;
+   __u8 ss_family;
+   __u8 __ss_pad1;
+   __u8 __ss_pad2;
+   __u32 __ss_pad3;
+   __u64 __ss_pad4;
+   char __ss_pad5[_SS_SIZE - sizeof(__u64) - sizeof(__u32) - 4*sizeof(__u8)];
+};
+
+
+/*
+ * Not very important.
+ */
+
+/*
+ * msghdr structures for sendmsg() and recvmsg().
+ */
+
+struct msghdr {
+	void *msg_name;		/* really sockaddr; address, or null */
+	socklen_t msg_namelen;	/* size of msg_name object, or 0 */
+	struct iovec *msg_iov;	/* I/O buffers */
+	int msg_iovlen;		/* number of iovecs */
+	void *msg_control;	/* auxiliary data area, or null */
+	socklen_t msg_controllen; /* size of msg_control area */
+	int msg_flags;		/* flags */
+};
+
+struct cmsghdr {
+	socklen_t cmsg_len;	/* length of control data, including header */
+	int cmsg_level;		/* protocol layer item originates from */
+	int cmsg_type;		/* protocol-specific message type */
+	/* char cmsg_data[];*/	/* data follows the header */
+};
+
+
+#endif /* _KERN_SOCKET_H_ */
diff --git a/build/install/include/kern/stat.h b/build/install/include/kern/stat.h
new file mode 100644
index 0000000..0f6cc54
--- /dev/null
+++ b/build/install/include/kern/stat.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_STAT_H_
+#define _KERN_STAT_H_
+
+/*
+ * The stat structure, for returning file information via stat(),
+ * fstat(), and lstat().
+ *
+ * Fields corresponding to things you aren't implementing should be
+ * set to zero.
+ *
+ * The file types are in kern/stattypes.h.
+ */
+struct stat {
+	/* Essential fields */
+	off_t st_size;		/* file size in bytes */
+	mode_t st_mode;		/* file type and protection mode */
+	nlink_t st_nlink;	/* number of hard links */
+	blkcnt_t st_blocks;	/* number of blocks file is using */
+
+ 	/* Identity */
+	dev_t st_dev;           /* device object lives on */
+	ino_t st_ino;           /* inode number (serial number) of object */
+	dev_t st_rdev;          /* device object is (if a device) */
+
+	/* Timestamps */
+	time_t st_atime;        /* last access time: seconds */
+	time_t st_ctime;        /* inode change time: seconds */
+	time_t st_mtime;        /* modification time: seconds */
+	__u32 st_atimensec;     /* last access time: nanoseconds */
+	__u32 st_ctimensec;     /* inode change time: nanoseconds */
+	__u32 st_mtimensec;     /* modification time: nanoseconds */
+
+	/* Permissions (also st_mode) */
+	uid_t st_uid;           /* owner */
+	gid_t st_gid;           /* group */
+
+	/* Other */
+	__u32 st_gen;           /* file generation number (root only) */
+	blksize_t st_blksize;   /* recommended I/O block size */
+};
+
+#endif /* _KERN_STAT_H_ */
diff --git a/build/install/include/kern/stattypes.h b/build/install/include/kern/stattypes.h
new file mode 100644
index 0000000..1192d71
--- /dev/null
+++ b/build/install/include/kern/stattypes.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_STATTYPES_H_
+#define _KERN_STATTYPES_H_
+
+/*
+ * Further supporting material for stat(), fstat(), and lstat().
+ *
+ * File types for st_mode. (The permissions are the low 12 bits.)
+ *
+ * These are also used, shifted right by those 12 bits, in struct
+ * dirent in libc, which is why they get their own file.
+ *
+ * Non-underscore versions of the names can be gotten from <stat.h>
+ * (kernel) or <sys/stat.h> (userland).
+ */
+
+#define _S_IFMT   070000	/* mask for type of file */
+#define _S_IFREG  010000	/* ordinary regular file */
+#define _S_IFDIR  020000	/* directory */
+#define _S_IFLNK  030000	/* symbolic link */
+#define _S_IFIFO  040000	/* pipe or named pipe */
+#define _S_IFSOCK 050000	/* socket */
+#define _S_IFCHR  060000	/* character device */
+#define _S_IFBLK  070000	/* block device */
+
+
+#endif /* _KERN_STATTYPES_H_ */
diff --git a/build/install/include/kern/syscall.h b/build/install/include/kern/syscall.h
new file mode 100644
index 0000000..c9b8b2b
--- /dev/null
+++ b/build/install/include/kern/syscall.h
@@ -0,0 +1,203 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_SYSCALL_H_
+#define _KERN_SYSCALL_H_
+
+/*
+ * System call numbers.
+ *
+ * To foster compatibility, this file contains a number for every
+ * more-or-less standard Unix system call that someone might
+ * conceivably implement on OS/161. The commented-out ones are ones
+ * we're pretty sure you won't be implementing. The others, you might
+ * or might not. Check your own course materials to find out what's
+ * specifically required of you.
+ *
+ * Caution: this file is parsed by a shell script to generate the assembly
+ * language system call stubs. Don't add weird stuff between the markers.
+ */
+
+/*CALLBEGIN*/
+
+//                              -- Process-related --
+#define SYS_fork         0
+#define SYS_vfork        1
+#define SYS_execv        2
+#define SYS__exit        3
+#define SYS_waitpid      4
+#define SYS_getpid       5
+#define SYS_getppid      6
+//                              (virtual memory)
+#define SYS_sbrk         7
+#define SYS_mmap         8
+#define SYS_munmap       9
+#define SYS_mprotect     10
+//#define SYS_madvise    11
+//#define SYS_mincore    12
+//#define SYS_mlock      13
+//#define SYS_munlock    14
+//#define SYS_munlockall 15
+//#define SYS_minherit   16
+//                              (security/credentials)
+#define SYS_umask        17
+#define SYS_issetugid    18
+#define SYS_getresuid    19
+#define SYS_setresuid    20
+#define SYS_getresgid    21
+#define SYS_setresgid    22
+#define SYS_getgroups    23
+#define SYS_setgroups    24
+#define SYS___getlogin   25
+#define SYS___setlogin   26
+//                              (signals)
+#define SYS_kill         27
+#define SYS_sigaction    28
+#define SYS_sigpending   29
+#define SYS_sigprocmask  30
+#define SYS_sigsuspend   31
+#define SYS_sigreturn    32
+//#define SYS_sigaltstack 33
+//                              (resource tracking and usage)
+//#define SYS_wait4      34
+//#define SYS_getrusage  35
+//                              (resource limits)
+//#define SYS_getrlimit  36
+//#define SYS_setrlimit  37
+//                              (process priority control)
+//#define SYS_getpriority 38
+//#define SYS_setpriority 39
+//                              (process groups, sessions, and job control)
+//#define SYS_getpgid    40
+//#define SYS_setpgid    41
+//#define SYS_getsid     42
+//#define SYS_setsid     43
+//                              (userlevel debugging)
+//#define SYS_ptrace     44
+
+//                              -- File-handle-related --
+#define SYS_open         45
+#define SYS_pipe         46
+#define SYS_dup          47
+#define SYS_dup2         48
+#define SYS_close        49
+#define SYS_read         50
+#define SYS_pread        51
+//#define SYS_readv      52
+//#define SYS_preadv     53
+#define SYS_getdirentry  54
+#define SYS_write        55
+#define SYS_pwrite       56
+//#define SYS_writev     57
+//#define SYS_pwritev    58
+#define SYS_lseek        59
+#define SYS_flock        60
+#define SYS_ftruncate    61
+#define SYS_fsync        62
+#define SYS_fcntl        63
+#define SYS_ioctl        64
+#define SYS_select       65
+#define SYS_poll         66
+
+//                              -- Pathname-related --
+#define SYS_link         67
+#define SYS_remove       68
+#define SYS_mkdir        69
+#define SYS_rmdir        70
+#define SYS_mkfifo       71
+#define SYS_rename       72
+#define SYS_access       73
+//                              (current directory)
+#define SYS_chdir        74
+#define SYS_fchdir       75
+#define SYS___getcwd     76
+//                              (symbolic links)
+#define SYS_symlink      77
+#define SYS_readlink     78
+//                              (mount)
+#define SYS_mount        79
+#define SYS_unmount      80
+
+
+//                              -- Any-file-related --
+#define SYS_stat         81
+#define SYS_fstat        82
+#define SYS_lstat        83
+//                              (timestamps)
+#define SYS_utimes       84
+#define SYS_futimes      85
+#define SYS_lutimes      86
+//                              (security/permissions)
+#define SYS_chmod        87
+#define SYS_chown        88
+#define SYS_fchmod       89
+#define SYS_fchown       90
+#define SYS_lchmod       91
+#define SYS_lchown       92
+//                              (file system info)
+//#define SYS_statfs     93
+//#define SYS_fstatfs    94
+//#define SYS_getfsstat  95
+//                              (POSIX dynamic system limits stuff)
+//#define SYS_pathconf   96
+//#define SYS_fpathconf  97
+
+//                              -- Sockets and networking --
+#define SYS_socket       98
+#define SYS_bind         99
+#define SYS_connect      100
+#define SYS_listen       101
+#define SYS_accept       102
+//#define SYS_socketpair 103
+#define SYS_shutdown     104
+#define SYS_getsockname  105
+#define SYS_getpeername  106
+#define SYS_getsockopt   107
+#define SYS_setsockopt   108
+//#define SYS_recvfrom   109
+//#define SYS_sendto     110
+//#define SYS_recvmsg    111
+//#define SYS_sendmsg    112
+
+//                              -- Time-related --
+#define SYS___time       113
+#define SYS___settime    114
+#define SYS_nanosleep    115
+//#define SYS_getitimer  116
+//#define SYS_setitimer  117
+
+//                              -- Other --
+#define SYS_sync         118
+#define SYS_reboot       119
+//#define SYS___sysctl   120
+
+/*CALLEND*/
+
+
+#endif /* _KERN_SYSCALL_H_ */
diff --git a/build/install/include/kern/time.h b/build/install/include/kern/time.h
new file mode 100644
index 0000000..d52076e
--- /dev/null
+++ b/build/install/include/kern/time.h
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) 2004, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_TIME_H_
+#define _KERN_TIME_H_
+
+/*
+ * Time-related definitions, for <sys/time.h> and others.
+ */
+
+
+/*
+ * Time with fractional seconds. Important. Unfortunately, to be
+ * compatible, we need both timeval and timespec.
+ */
+
+struct timeval {
+        __time_t tv_sec;        /* seconds */
+        __i32 tv_usec;          /* microseconds */
+};
+
+struct timespec {
+        __time_t tv_sec;        /* seconds */
+        __i32 tv_nsec;          /* nanoseconds */
+};
+
+
+/*
+ * Bits for interval timers. Obscure and not really that important.
+ */
+
+/* codes for the various timers */
+#define ITIMER_REAL	0	/* Real (wall-clock) time. */
+#define ITIMER_VIRTUAL	1	/* Virtual (when process is executing) time. */
+#define ITIMER_PROF	2	/* For execution profiling. */
+
+/* structure for setitimer/getitimer */
+struct itimerval {
+        struct timeval it_interval;	/* Time to reload after expiry. */
+	struct timeval it_value;	/* Time to count. */
+};
+
+
+#endif /* _KERN_TIME_H_ */
diff --git a/build/install/include/kern/types.h b/build/install/include/kern/types.h
new file mode 100644
index 0000000..002d3b7
--- /dev/null
+++ b/build/install/include/kern/types.h
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_TYPES_H_
+#define _KERN_TYPES_H_
+
+/* Get machine-dependent types. */
+#include <kern/machine/types.h>
+
+/*
+ * Machine-independent types visible to user level.
+ *
+ * Define everything with leading underscores to avoid polluting the C
+ * namespace for applications.
+ *
+ * The C standard (and additionally the POSIX standard) define rules
+ * for what families of symbol names are allowed to be used by
+ * application programmers, and what families of symbol names can be
+ * defined by various standard header files. The C library needs to
+ * conform to those rules, to the extent reasonably practical, to make
+ * sure that application code compiles and behaves as intended.
+ *
+ * Many of the C library's headers need to use one or more of these
+ * types in places where the "real" name of the type cannot be
+ * exposed, or expose the names of some of these types and not others.
+ * (For example, <string.h> is supposed to define size_t, but is not
+ * supposed to also define e.g. pid_t.)
+ *
+ * For this reason we define everything with two underscores in front
+ * of it; in C such symbol names are reserved for the implementation,
+ * which we are, so this file can be included anywhere in any libc
+ * header without causing namespace problems. The "real" type names
+ * are defined with an additional layer of typedefs; this happens for
+ * the kernel in <types.h> and for userland in (mostly) <sys/types.h>
+ * and also various other places as per relevant standards.
+ */
+
+typedef __u32 __blkcnt_t;  /* Count of blocks */
+typedef __u32 __blksize_t; /* Size of an I/O block */
+typedef __u64 __counter_t; /* Event counter */
+typedef __u32 __daddr_t;   /* Disk block number */
+typedef __u32 __dev_t;     /* Hardware device ID */
+typedef __u32 __fsid_t;    /* Filesystem ID */
+typedef __i32 __gid_t;     /* Group ID */
+typedef __u32 __in_addr_t; /* Internet address */
+typedef __u32 __in_port_t; /* Internet port number */
+typedef __u32 __ino_t;     /* Inode number */
+typedef __u32 __mode_t;    /* File access mode */
+typedef __u16 __nlink_t;   /* Number of links (intentionally only 16 bits) */
+typedef __i64 __off_t;     /* Offset within file */
+typedef __i32 __pid_t;     /* Process ID */
+typedef __u64 __rlim_t;    /* Resource limit quantity */
+typedef __u8 __sa_family_t;/* Socket address family */
+typedef __i64 __time_t;    /* Time in seconds */
+typedef __i32 __uid_t;     /* User ID */
+
+typedef int __nfds_t;    /* Number of file handles */
+typedef int __socklen_t;   /* Socket-related length */
+
+/* See note in <stdarg.h> */
+#ifdef __GNUC__
+typedef __builtin_va_list __va_list;
+#endif
+
+
+#endif /* _KERN_TYPES_H_ */
diff --git a/build/install/include/kern/unistd.h b/build/install/include/kern/unistd.h
new file mode 100644
index 0000000..30f2678
--- /dev/null
+++ b/build/install/include/kern/unistd.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_UNISTD_H_
+#define _KERN_UNISTD_H_
+
+/* Constants for read/write/etc: special file handles */
+#define STDIN_FILENO  0      /* Standard input */
+#define STDOUT_FILENO 1      /* Standard output */
+#define STDERR_FILENO 2      /* Standard error */
+
+
+#endif /* _KERN_UNISTD_H_ */
diff --git a/build/install/include/kern/wait.h b/build/install/include/kern/wait.h
new file mode 100644
index 0000000..06ffab6
--- /dev/null
+++ b/build/install/include/kern/wait.h
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2003, 2008
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _KERN_WAIT_H_
+#define _KERN_WAIT_H_
+
+/*
+ * Definitions for wait().
+ */
+
+
+/* Flags for waitpid() and equivalent. */
+#define WNOHANG      1	/* Nonblocking. */
+#define WUNTRACED    2	/* Report stopping as well as exiting processes. */
+
+/* Special "pids" to wait for. */
+#define WAIT_ANY     (-1)	/* Any child process. */
+#define WAIT_MYPGRP  0		/* Any process in the same process group. */
+
+/*
+ * Result encoding.
+ *
+ * The lowest two bits say what happened; the rest encodes up to 30
+ * bits of exit code. Note that the traditional Unix encoding, which
+ * is different, wastes most of the bits and can only transmit 8 bits
+ * of exit code...
+ */
+#define _WWHAT(x)  ((x)&3)	/* lower two bits say what happened */
+#define _WVAL(x)   ((x)>>2)	/* the rest is the value */
+#define _MKWVAL(x) ((x)<<2)	/* encode a value */
+
+/* Four things can happen... */
+#define __WEXITED    0		/* Process exited by calling _exit(). */
+#define __WSIGNALED  1		/* Process received a fatal signal. */
+#define __WCORED     2		/* Process dumped core on a fatal signal. */
+#define __WSTOPPED   3		/* Process stopped (and didn't exit). */
+
+/* Test macros, used by applications. */
+#define WIFEXITED(x)   (_WWHAT(x)==__WEXITED)
+#define WIFSIGNALED(x) (_WWHAT(x)==__WSIGNALED || _WWHAT(x)==__WCORED)
+#define WIFSTOPPED(x)  (_WWHAT(x)==__WSTOPPED)
+#define WEXITSTATUS(x) (_WVAL(x))
+#define WTERMSIG(x)    (_WVAL(x))
+#define WSTOPSIG(x)    (_WVAL(x))
+#define WCOREDUMP(x)   (_WWHAT(x)==__WCORED)
+
+/* Encoding macros, used by the kernel to generate the wait result. */
+#define _MKWAIT_EXIT(x) (_MKWVAL(x)|__WEXITED)
+#define _MKWAIT_SIG(x)  (_MKWVAL(x)|__WSIGNALED)
+#define _MKWAIT_CORE(x) (_MKWVAL(x)|__WCORED)
+#define _MKWAIT_STOP(x) (_MKWVAL(x)|__WSTOPPED)
+
+#endif /* _KERN_WAIT_H_ */
diff --git a/build/install/include/limits.h b/build/install/include/limits.h
new file mode 100644
index 0000000..f488852
--- /dev/null
+++ b/build/install/include/limits.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _LIMITS_H_
+#define _LIMITS_H_
+
+/*
+ * System limits.
+ */
+
+/* Get the limits the kernel exports. libc doesn't have any limits :-) */
+#include <kern/limits.h>
+
+/* Provide the real names */
+#define NAME_MAX        __NAME_MAX
+#define PATH_MAX        __PATH_MAX
+#define ARG_MAX         __ARG_MAX
+#define PID_MIN         __PID_MIN
+#define PID_MAX         __PID_MAX
+#define PIPE_BUF        __PIPE_BUF
+#define NGROUPS_MAX     __NGROUPS_MAX
+#define LOGIN_NAME_MAX  __LOGIN_NAME_MAX
+#define OPEN_MAX        __OPEN_MAX
+#define IOV_MAX         __IOV_MAX
+
+
+#endif /* _LIMITS_H_ */
diff --git a/build/install/include/machine b/build/install/include/machine
new file mode 120000
index 0000000..1baf047
--- /dev/null
+++ b/build/install/include/machine
@@ -0,0 +1 @@
+kern/machine
\ No newline at end of file
diff --git a/build/install/include/setjmp.h b/build/install/include/setjmp.h
new file mode 100644
index 0000000..ca55b40
--- /dev/null
+++ b/build/install/include/setjmp.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SETJMP_H_
+#define _SETJMP_H_
+
+/* Get the (machine-dependent) definition of jmp_buf. */
+#include <machine/setjmp.h>
+
+/*
+ * Functions.
+ *
+ * setjmp saves the current processor state in the jmp_buf and
+ * returns 0. A subsequent call to longjmp with the same jmp_buf
+ * causes execution to return to where setjmp was called. setjmp
+ * returns a second time, this time returning CODE. (If CODE is
+ * 0, it is forced to 1.)
+ *
+ * If the stack frame that called setjmp returns before longjmp is
+ * called, the results are undefined.
+ */
+
+int setjmp(jmp_buf jb);
+void longjmp(jmp_buf jb, int code);
+
+#endif /* _SETJMP_H_ */
diff --git a/build/install/include/signal.h b/build/install/include/signal.h
new file mode 100644
index 0000000..b7c2523
--- /dev/null
+++ b/build/install/include/signal.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <kern/signal.h>
diff --git a/build/install/include/stdarg.h b/build/install/include/stdarg.h
new file mode 100644
index 0000000..f17f2ab
--- /dev/null
+++ b/build/install/include/stdarg.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDARG_H_
+#define _STDARG_H_
+
+#include <kern/types.h>
+
+/*
+ * As of gcc 3.0, the stdarg declarations can be made machine-
+ * independent because gcc abstracts the implementations away for
+ * us. However, they went and changed __builtin_stdarg_start to
+ * __builtin_va_start sometime between gcc 4.1 and 4.8 (not sure
+ * when) so we need to check that.
+ */
+
+typedef __va_list va_list;
+
+#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 8)
+#define va_start(ap, fmt)  __builtin_stdarg_start(ap, fmt)
+#else
+#define va_start(ap, fmt)  __builtin_va_start(ap, fmt)
+#endif
+#define va_arg(ap,t) __builtin_va_arg(ap,t)
+#define va_copy(ap1,ap2) __builtin_va_copy(ap1,ap2)
+#define va_end(ap) __builtin_va_end(ap)
+
+#endif /* _STDARG_H_ */
diff --git a/build/install/include/stdbool.h b/build/install/include/stdbool.h
new file mode 100644
index 0000000..53a5f63
--- /dev/null
+++ b/build/install/include/stdbool.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2014
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDBOOL_H_
+#define _STDBOOL_H_
+
+typedef _Bool bool;
+#define true 1
+#define false 0
+
+#endif /* _STDBOOL_H_ */
diff --git a/build/install/include/stdint.h b/build/install/include/stdint.h
new file mode 100644
index 0000000..e9acb3d
--- /dev/null
+++ b/build/install/include/stdint.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDINT_H_
+#define _STDINT_H_
+
+/*
+ * <stdint.h> - C99 header file with sized integer types.
+ */
+
+#include <kern/types.h>
+
+typedef __i8 int8_t;
+typedef __i16 int16_t;
+typedef __i32 int32_t;
+typedef __i64 int64_t;
+typedef __u8 uint8_t;
+typedef __u16 uint16_t;
+typedef __u32 uint32_t;
+typedef __u64 uint64_t;
+
+typedef __intptr_t intptr_t;
+typedef __uintptr_t uintptr_t;
+
+#endif /* _STDINT_H_ */
diff --git a/build/install/include/stdio.h b/build/install/include/stdio.h
new file mode 100644
index 0000000..20e96cb
--- /dev/null
+++ b/build/install/include/stdio.h
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDIO_H_
+#define _STDIO_H_
+
+/*
+ * Get the __-protected definition of va_list. We aren't supposed to
+ * include stdarg.h here.
+ */
+#include <kern/types.h>
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/* Constant returned by a bunch of stdio functions on error */
+#define EOF (-1)
+
+/*
+ * The actual guts of printf
+ * (for libc internal use only)
+ */
+int __vprintf(void (*sendfunc)(void *clientdata, const char *, size_t len),
+	      void *clientdata,
+	      const char *fmt,
+	      __va_list ap);
+
+/* Printf calls for user programs */
+int printf(const char *fmt, ...);
+int vprintf(const char *fmt, __va_list ap);
+int snprintf(char *buf, size_t len, const char *fmt, ...);
+int vsnprintf(char *buf, size_t len, const char *fmt, __va_list ap);
+
+/* Print the argument string and then a newline. Returns 0 or -1 on error. */
+int puts(const char *);
+
+/* Like puts, but without the newline. Returns #chars written. */
+/* Nonstandard C, hence the __. */
+int __puts(const char *);
+
+/* Writes one character. Returns it. */
+int putchar(int);
+
+/* Reads one character (0-255) or returns EOF on error. */
+int getchar(void);
+
+#endif /* _STDIO_H_ */
diff --git a/build/install/include/stdlib.h b/build/install/include/stdlib.h
new file mode 100644
index 0000000..eaa3169
--- /dev/null
+++ b/build/install/include/stdlib.h
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STDLIB_H_
+#define _STDLIB_H_
+
+#include <kern/types.h>
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/*
+ * Ascii to integer - turn a string holding a number into a number.
+ */
+int atoi(const char *);
+
+/*
+ * Standard routine to bail out of a program in a severe error condition.
+ */
+void abort(void);
+
+/*
+ * Routine to exit cleanly.
+ * (This does libc cleanup before calling the _exit system call.)
+ */
+void exit(int code);
+
+/*
+ * Get the value of an environment variable. A default environment is
+ * provided if the kernel doesn't pass environment strings.
+ */
+char *getenv(const char *var);
+
+/*
+ * Run a command. Returns its exit status as it comes back from waitpid().
+ */
+int system(const char *command);
+
+/*
+ * Pseudo-random number generator.
+ */
+#define RAND_MAX  0x7fffffff
+long random(void);
+void srandom(unsigned long seed);
+char *initstate(unsigned long, char *, size_t);
+char *setstate(char *);
+
+/*
+ * Memory allocation functions.
+ */
+void *malloc(size_t size);
+void free(void *ptr);
+
+/*
+ * Sort.
+ */
+void qsort(void *data, unsigned num, size_t size,
+	   int (*f)(const void *, const void *));
+
+#endif /* _STDLIB_H_ */
diff --git a/build/install/include/string.h b/build/install/include/string.h
new file mode 100644
index 0000000..2c9de95
--- /dev/null
+++ b/build/install/include/string.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _STRING_H_
+#define _STRING_H_
+
+#include <kern/types.h>
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/*
+ * Standard C string functions.
+ */
+char *strcat(char *, const char *);
+char *strcpy(char *, const char *);
+char *strchr(const char *, int);
+char *strrchr(const char *, int);
+int strcmp(const char *, const char *);
+size_t strlen(const char *);
+char *strtok_r(char *, const char *, char **);
+char *strtok(char *, const char *);
+
+void *memset(void *, int c, size_t);
+void *memcpy(void *, const void *, size_t);
+void *memmove(void *, const void *, size_t);
+int memcmp(const void *, const void *, size_t);
+
+/*
+ * POSIX string functions.
+ */
+const char *strerror(int errcode);
+
+/*
+ * BSD string functions.
+ */
+void bzero(void *, size_t);
+
+
+#endif /* _STRING_H_ */
diff --git a/build/install/include/sys/cdefs.h b/build/install/include/sys/cdefs.h
new file mode 100644
index 0000000..bba447e
--- /dev/null
+++ b/build/install/include/sys/cdefs.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2014
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * This file contains definitions for preprocessor macros needed for
+ * declaring things in the system include files. It must not define
+ * anything in the user namespace so it is safe to include anywhere.
+ */
+
+#ifndef _SYS_CDEFS_H_
+#define _SYS_CDEFS_H_
+
+#ifdef __GNUC__
+#define __DEAD __attribute__((__noreturn__))
+#else
+#define __DEAD
+#endif
+
+#endif /* _SYS_CDEFS_H_ */
diff --git a/build/install/include/sys/endian.h b/build/install/include/sys/endian.h
new file mode 100644
index 0000000..f957631
--- /dev/null
+++ b/build/install/include/sys/endian.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_ENDIAN_H_
+#define _SYS_ENDIAN_H_
+
+#include <kern/endian.h>
+
+#endif /* _SYS_ENDIAN_H_ */
diff --git a/build/install/include/sys/ioctl.h b/build/install/include/sys/ioctl.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/sys/ioctl.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/sys/null.h b/build/install/include/sys/null.h
new file mode 100644
index 0000000..8ed8971
--- /dev/null
+++ b/build/install/include/sys/null.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_NULL_H_
+#define _SYS_NULL_H_
+
+/*
+ * Null pointer.
+ */
+
+#define NULL ((void *)0)
+
+#endif /* _SYS_NULL_H_ */
diff --git a/build/install/include/sys/reboot.h b/build/install/include/sys/reboot.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/sys/reboot.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/sys/stat.h b/build/install/include/sys/stat.h
new file mode 100644
index 0000000..5ee6580
--- /dev/null
+++ b/build/install/include/sys/stat.h
@@ -0,0 +1,83 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_STAT_H_
+#define _SYS_STAT_H_
+
+/*
+ * Get struct stat and all the #defines from the kernel
+ */
+#include <kern/stat.h>
+#include <kern/stattypes.h>
+
+/*
+ * Test macros for object types.
+ */
+#define S_ISDIR(mode) ((mode & _S_IFMT) == _S_IFDIR)
+#define S_ISREG(mode) ((mode & _S_IFMT) == _S_IFREG)
+#define S_ISDIR(mode) ((mode & _S_IFMT) == _S_IFDIR)
+#define S_ISLNK(mode) ((mode & _S_IFMT) == _S_IFLNK)
+#define S_ISIFO(mode) ((mode & _S_IFMT) == _S_IFIFO)
+#define S_ISSOCK(mode) ((mode & _S_IFMT) ==_S_IFSOCK)
+#define S_ISCHR(mode) ((mode & _S_IFMT) == _S_IFCHR)
+#define S_ISBLK(mode) ((mode & _S_IFMT) == _S_IFBLK)
+
+/*
+ * Provide non-underscore names. These are not actually standard; for
+ * some reason only the test macros are.
+ */
+#define S_IFMT   _S_IFMT
+#define S_IFREG  _S_IFREG
+#define S_IFDIR  _S_IFDIR
+#define S_IFLNK  _S_IFLNK
+#define S_IFIFO  _S_IFIFO
+#define S_IFSOCK _S_IFSOCK
+#define S_IFCHR  _S_IFCHR
+#define S_IFBLK  _S_IFBLK
+
+/*
+ * stat is the same as fstat, only on a file that isn't already
+ * open. lstat is the same as stat, only if the name passed names a
+ * symlink, information about the symlink is returned rather than
+ * information about the file it points to. You don't need to
+ * implement lstat unless you're implementing symbolic links.
+ */
+int fstat(int filehandle, struct stat *buf);
+int stat(const char *path, struct stat *buf);
+int lstat(const char *path, struct stat *buf);
+
+/*
+ * The second argument to mkdir is the mode for the new directory.
+ * Unless you're implementing security and permissions, you can
+ * (and should) ignore it. See notes in unistd.h.
+ */
+int mkdir(const char *dirname, int ignore);
+
+
+#endif /* _SYS_STAT_H_ */
diff --git a/build/install/include/sys/types.h b/build/install/include/sys/types.h
new file mode 100644
index 0000000..a3f8f94
--- /dev/null
+++ b/build/install/include/sys/types.h
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _SYS_TYPES_H_
+#define _SYS_TYPES_H_
+
+/*
+ * This header file is supposed to define standard system types,
+ * stuff like size_t and pid_t, as well as define a few other
+ * standard symbols like NULL.
+ *
+ * There are no such types that are user-level only.
+ */
+
+/* Get the exported kernel definitions, protected with __ */
+#include <kern/types.h>
+
+/* Pick up stuff that needs to be defined individually due to standards. */
+#include <types/size_t.h>
+#include <sys/null.h>
+
+/*
+ * Define the rest with user-visible names.
+ *
+ * Note that the standards-compliance stuff is not by any means
+ * complete here yet...
+ */
+
+typedef __ssize_t ssize_t;
+typedef __ptrdiff_t ptrdiff_t;
+
+/* ...and machine-independent from <kern/types.h>. */
+typedef __blkcnt_t blkcnt_t;
+typedef __blksize_t blksize_t;
+typedef __daddr_t daddr_t;
+typedef __dev_t dev_t;
+typedef __fsid_t fsid_t;
+typedef __gid_t gid_t;
+typedef __in_addr_t in_addr_t;
+typedef __in_port_t in_port_t;
+typedef __ino_t ino_t;
+typedef __mode_t mode_t;
+typedef __nlink_t nlink_t;
+typedef __off_t off_t;
+typedef __pid_t pid_t;
+typedef __rlim_t rlim_t;
+typedef __sa_family_t sa_family_t;
+typedef __time_t time_t;
+typedef __uid_t uid_t;
+
+typedef __nfds_t nfds_t;
+typedef __socklen_t socklen_t;
+
+/*
+ * Number of bits per byte.
+ */
+
+#define CHAR_BIT __CHAR_BIT
+
+
+#endif /* _SYS_TYPES_H_ */
diff --git a/build/install/include/sys/wait.h b/build/install/include/sys/wait.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/sys/wait.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/test/quint.h b/build/install/include/test/quint.h
new file mode 100644
index 0000000..b38a76c
--- /dev/null
+++ b/build/install/include/test/quint.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2013
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+void quint(const char *prog);
diff --git a/build/install/include/test/triple.h b/build/install/include/test/triple.h
new file mode 100644
index 0000000..4f743c9
--- /dev/null
+++ b/build/install/include/test/triple.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+void triple(const char *prog);
diff --git a/build/install/include/time.h b/build/install/include/time.h
new file mode 100644
index 0000000..2d39a64
--- /dev/null
+++ b/build/install/include/time.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* This file is for UNIX compat. In OS/161, everything's in <unistd.h> */
+#include <unistd.h>
diff --git a/build/install/include/types/size_t.h b/build/install/include/types/size_t.h
new file mode 100644
index 0000000..d7a9532
--- /dev/null
+++ b/build/install/include/types/size_t.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _TYPES_SIZE_T_H_
+#define _TYPES_SIZE_T_H_
+
+#include <kern/types.h>
+typedef __size_t size_t;
+
+#endif /* _TYPES_SIZE_T_H_ */
diff --git a/build/install/include/unistd.h b/build/install/include/unistd.h
new file mode 100644
index 0000000..44f2c6a
--- /dev/null
+++ b/build/install/include/unistd.h
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef _UNISTD_H_
+#define _UNISTD_H_
+
+#include <sys/cdefs.h>
+#include <sys/types.h>
+
+/*
+ * Get the various constants (flags, codes, etc.) for calls from
+ * kernel includes. This way user-level code doesn't need to know
+ * about the kern/ headers.
+ */
+#include <kern/fcntl.h>
+#include <kern/ioctl.h>
+#include <kern/reboot.h>
+#include <kern/seek.h>
+#include <kern/time.h>
+#include <kern/unistd.h>
+#include <kern/wait.h>
+
+
+/*
+ * Prototypes for OS/161 system calls.
+ *
+ * Note that the following system calls are prototyped in other
+ * header files, as follows:
+ *
+ *     stat:     sys/stat.h
+ *     fstat:    sys/stat.h
+ *     lstat:    sys/stat.h
+ *     mkdir:    sys/stat.h
+ *
+ * If this were standard Unix, more prototypes would go in other
+ * header files as well, as follows:
+ *
+ *     waitpid:  sys/wait.h
+ *     open:     fcntl.h or sys/fcntl.h
+ *     reboot:   sys/reboot.h
+ *     ioctl:    sys/ioctl.h
+ *     remove:   stdio.h
+ *     rename:   stdio.h
+ *     time:     time.h
+ *
+ * Also note that the prototypes for open() and mkdir() contain, for
+ * compatibility with Unix, an extra argument that is not meaningful
+ * in OS/161. This is the "mode" (file permissions) for a newly created
+ * object. (With open, if no file is created, this is ignored, and the
+ * call prototype is gimmicked so it doesn't have to be passed either.)
+ *
+ * You should ignore these arguments in the OS/161 kernel unless you're
+ * implementing security and file permissions.
+ *
+ * If you are implementing security and file permissions and using a
+ * model different from Unix so that you need different arguments to
+ * these calls, you may make appropriate changes, or define new syscalls
+ * with different names and take the old ones out, or whatever.
+ *
+ * As a general rule of thumb, however, while you can make as many new
+ * syscalls of your own as you like, you shouldn't change the
+ * definitions of the ones that are already here. They've been written
+ * to be pretty much compatible with Unix, and the teaching staff has
+ * test code that expects them to behave in particular ways.
+ *
+ * Of course, if you want to redesign the user/kernel API and make a
+ * lot of work for yourself, feel free, just contact the teaching
+ * staff beforehand. :-)
+ *
+ * The categories (required/recommended/optional) are guesses - check
+ * the text of the various assignments for an authoritative list.
+ */
+
+
+/*
+ * NOTE NOTE NOTE NOTE NOTE
+ *
+ * This file is *not* shared with the kernel, even though in a sense
+ * the kernel needs to know about these prototypes. This is because,
+ * due to error handling concerns, the in-kernel versions of these
+ * functions will usually have slightly different signatures.
+ */
+
+
+/* Required. */
+__DEAD void _exit(int code);
+int execv(const char *prog, char *const *args);
+pid_t fork(void);
+pid_t waitpid(pid_t pid, int *returncode, int flags);
+/*
+ * Open actually takes either two or three args: the optional third
+ * arg is the file mode used for creation. Unless you're implementing
+ * security and permissions, you can ignore it.
+ */
+int open(const char *filename, int flags, ...);
+ssize_t read(int filehandle, void *buf, size_t size);
+ssize_t write(int filehandle, const void *buf, size_t size);
+int close(int filehandle);
+int reboot(int code);
+int sync(void);
+/* mkdir - see sys/stat.h */
+int rmdir(const char *dirname);
+
+/* Recommended. */
+pid_t getpid(void);
+int ioctl(int filehandle, int code, void *buf);
+off_t lseek(int filehandle, off_t pos, int code);
+int fsync(int filehandle);
+int ftruncate(int filehandle, off_t size);
+int remove(const char *filename);
+int rename(const char *oldfile, const char *newfile);
+int link(const char *oldfile, const char *newfile);
+/* fstat - see sys/stat.h */
+int chdir(const char *path);
+
+/* Optional. */
+void *sbrk(__intptr_t change);
+ssize_t getdirentry(int filehandle, char *buf, size_t buflen);
+int symlink(const char *target, const char *linkname);
+ssize_t readlink(const char *path, char *buf, size_t buflen);
+int dup2(int filehandle, int newhandle);
+int pipe(int filehandles[2]);
+int __time(time_t *seconds, unsigned long *nanoseconds);
+ssize_t __getcwd(char *buf, size_t buflen);
+/* stat - see sys/stat.h */
+/* lstat - see sys/stat.h */
+
+/*
+ * These are not themselves system calls, but wrapper routines in libc.
+ */
+
+int execvp(const char *prog, char *const *args); /* calls execv */
+char *getcwd(char *buf, size_t buflen);		/* calls __getcwd */
+time_t time(time_t *seconds);			/* calls __time */
+
+#endif /* _UNISTD_H_ */
diff --git a/build/install/lib/crt0.o b/build/install/lib/crt0.o
new file mode 100644
index 0000000..a1a7b39
Binary files /dev/null and b/build/install/lib/crt0.o differ
diff --git a/build/install/lib/libc.a b/build/install/lib/libc.a
new file mode 100644
index 0000000..df7d901
Binary files /dev/null and b/build/install/lib/libc.a differ
diff --git a/build/install/lib/libtest.a b/build/install/lib/libtest.a
new file mode 100644
index 0000000..d029e89
Binary files /dev/null and b/build/install/lib/libtest.a differ
diff --git a/build/install/man/bin/cat.html b/build/install/man/bin/cat.html
new file mode 100644
index 0000000..6d405df
--- /dev/null
+++ b/build/install/man/bin/cat.html
@@ -0,0 +1,81 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>cat</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>cat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+<tt>cat</tt> - concatenate and print files
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/cat</tt> <em>files...</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>cat</tt> prints the files listed on its command line in order to its
+standard output. If the magic filename "-" is encountered, <tt>cat</tt>
+prints its standard input up to the first EOF.
+</p>
+
+<p>
+With no arguments, <tt>cat</tt> prints its standard input.
+</p>
+
+<p>
+<tt>cat</tt> takes no options.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>cat</tt> uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/close.html>close</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>cat</tt> should function properly once the basic system calls
+assignment is completed.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/cp.html b/build/install/man/bin/cp.html
new file mode 100644
index 0000000..44fa23e
--- /dev/null
+++ b/build/install/man/bin/cp.html
@@ -0,0 +1,88 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>cp</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>cp</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+cp - copy files
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/cp</tt> <em>oldfile</em> <em>newfile</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>cp</tt> copies the file <em>oldfile</em> to the file <em>newfile</em>,
+overwriting <em>newfile</em> if it already exists.
+</p>
+
+<p>
+<tt>cp</tt> supports no options.
+</p>
+
+<p>
+Note that <tt>cp</tt> does <em>not</em> support the Unix idiom
+<tt>cp file1 file2 ... destination-dir</tt> to copy a number of files
+at once. In particular, <tt>cp foo bar/</tt> will fail, probably with
+"Is a directory".
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>cp</tt> uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/close.html>close</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>cp</tt> should function properly once the basic system calls
+assignment is completed.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=ln.html>ln</A>, <A HREF=mv.html>mv<A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/false.html b/build/install/man/bin/false.html
new file mode 100644
index 0000000..3269ffd
--- /dev/null
+++ b/build/install/man/bin/false.html
@@ -0,0 +1,69 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>false</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>false</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+false - return false value
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/false</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>false</tt> exits with exit code 1, signifying failure.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>false</tt> uses the <A HREF=../syscall/_exit.html>_exit</A> system call.
+</p>
+
+<p>
+false should function properly once the basic system calls assignment
+is completed.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=true.html>true</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/index.html b/build/install/man/bin/index.html
new file mode 100644
index 0000000..a976558
--- /dev/null
+++ b/build/install/man/bin/index.html
@@ -0,0 +1,67 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 Binaries</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Binaries (/bin)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=cat.html>cat</A> - concatenate and print files
+<li> <A HREF=cp.html>cp</A> - copy files
+<li> <A HREF=false.html>false</A> - return false value
+<li> <A HREF=ln.html>ln</A> - link files
+<li> <A HREF=ls.html>ls</A> - list files or directory contents
+<li> <A HREF=mkdir.html>mkdir</A> - create directory
+<li> <A HREF=mv.html>mv</A> - rename or move files
+<li> <A HREF=pwd.html>pwd</A> - print working directory
+<li> <A HREF=rm.html>rm</A> - remove (unlink) files
+<li> <A HREF=rmdir.html>rmdir</A> - remove directory
+<li> <A HREF=sh.html>sh</A> - user command shell
+<li> <A HREF=sync.html>sync</A> - synchronize buffers to disk
+<li> <A HREF=tac.html>tac</A> - print files backwards
+<li> <A HREF=true.html>true</A> - return true value
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/bin/ln.html b/build/install/man/bin/ln.html
new file mode 100644
index 0000000..e6d1495
--- /dev/null
+++ b/build/install/man/bin/ln.html
@@ -0,0 +1,99 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>ln</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>ln</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+ln - link files
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/ln</tt> <em>oldfile</em> <em>newfile</em>
+<br>
+<tt>/bin/ln -s</tt> <em>oldfile</em> <em>newfile</em>
+</p>
+
+<h3>Description</h3>
+<p>
+ln creates links to files. The first usage creates a hard link, that
+is, an additional name for the <em>same</em> file. The second
+usage, with the -s option, creates a symbolic link, a special
+filesystem entry that redirects accesses back to the first original
+file.
+</p>
+
+<p>
+The symlink created is of the form <em>newfile</em> -> <em>oldfile</em>.
+</p>
+
+<p>
+Note that <tt>ln</tt> does <em>not</em> support the Unix idiom
+<tt>ln file1 file2 ... destination-dir</tt> to link a number of files
+at once. In particular, <tt>ln foo bar/</tt> will fail, probably with
+"Is a directory".
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>ln</tt> uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/link.html>link</A>
+<li><A HREF=../syscall/symlink.html>symlink</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>ln</tt> without the -s option should work once (or if) you
+implement hard links. <tt>ln</tt> with the -s option should work once
+(or if) you implement symbolic links. Check your assignments for when
+(or if) you need to implement these features.
+</p>
+
+<p>
+<tt>ln</tt> is able to create symlinks even if hard links are not
+implemented, and vice versa.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=cp.html>cp</A>, <A HREF=mv.html>mv<A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/ls.html b/build/install/man/bin/ls.html
new file mode 100644
index 0000000..3161b01
--- /dev/null
+++ b/build/install/man/bin/ls.html
@@ -0,0 +1,110 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>ls</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>ls</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+ls - list files or directory contents
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/ls</tt> [<tt>-adlRs</tt>] [<em>path</em>...]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>ls</tt> lists the filesystem objects specified on the command
+line. If they are directories, the contents of the directories are
+listed (unless the <tt>-d</tt> option is used).
+</p>
+
+<p>
+If the <tt>-a</tt> option is given, filenames beginning with dot (.)
+will be listed. Ordinarily, they are skipped.
+</p>
+
+<p>
+If the <tt>-d</tt> option is given, directory contents will not be
+listed; the directories themselves will be.
+</p>
+
+<p>
+If the <tt>-l</tt> option is given, a long format listing showing the
+file size, type, and link count will be displayed instead of just the
+filenames.
+</p>
+
+<p>
+If the <tt>-R</tt> option is given, subdirectories encountered will be
+listed recursively.
+</p>
+
+<p>
+If the <tt>-s</tt> option is given, the number of filesystem blocks
+used by each object will be displayed in addition to other
+information.
+</p>
+
+<p>
+If no <em>paths</em> are specified, the current directory is assumed.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>ls</tt> uses the following syscalls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/fstat.html>fstat</A>
+<li> <A HREF=../syscall/getdirentry.html>getdirentry</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+As fstat and getdirentry are generally not part of the basic system
+calls assignment, <tt>ls</tt> will usually still not function after
+the basic system calls assignment is complete.
+These calls are typically part of a later assignment, usually the file
+system assignment. You may also need to implement the getdirentry
+functionality at the file system level.
+Consult your course materials for specific information.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/mkdir.html b/build/install/man/bin/mkdir.html
new file mode 100644
index 0000000..babe5d0
--- /dev/null
+++ b/build/install/man/bin/mkdir.html
@@ -0,0 +1,81 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>mkdir</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>mkdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+mkdir - create directory
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/mkdir</tt> <em>directory</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>mkdir</tt> creates the named directory. All intermediate
+components must already exist. If the named directory already exists,
+an error occurs.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>mkdir</tt> uses the following syscalls:
+<ul>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+As the mkdir system call is generally not part of the basic system
+calls assignment, <tt>mkdir</tt> will usually still not function after
+the basic system calls assignment is complete.
+This call is typically part of a later assignment, usually the file
+system assignment. You may also need to implement subdirectories in
+the file system.
+Consult your course materials for specific information.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=rmdir.html>rmdir</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/mv.html b/build/install/man/bin/mv.html
new file mode 100644
index 0000000..f608c60
--- /dev/null
+++ b/build/install/man/bin/mv.html
@@ -0,0 +1,98 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>mv</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>mv</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+mv - rename or move files
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/mv</tt> <em>oldname</em> <em>newname</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>mv</tt> renames the filesystem object specified by
+<em>oldname</em> so that it is subsequently named <em>newname</em>.
+Both files and directories can be renamed or moved into other parts of
+the filesystem tree. However, devices may not be renamed and
+filesystem objects may not be moved across filesystems.
+</p>
+
+<p>
+<tt>mv</tt> accepts no options.
+</p>
+
+<p>
+Note that <tt>mv</tt> does <em>not</em> support the Unix idiom
+<tt>mv file1 file2 ... destination-dir</tt> to move a number of files
+at once. In particular, <tt>mv foo bar/</tt> will fail, probably with
+"Is a directory".
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>mv</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/rename.html>rename</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+As the rename system call is generally not part of the basic system
+calls assignment, <tt>mv</tt> will usually still not function after
+the basic system calls assignment is complete.
+This call is typically part of a later assignment, usually the file
+system assignment.
+Once you implement the system call you should be able to rename
+objects within the same directory.
+To move things between directories you will need to implement
+cross-directory support for rename at the file system layer.
+This may or may not be part of your file system assignment;
+consult your course materials for specific information.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=cp.html>cp</A>, <A HREF=ln.html>ln<A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/pwd.html b/build/install/man/bin/pwd.html
new file mode 100644
index 0000000..c9b69ff
--- /dev/null
+++ b/build/install/man/bin/pwd.html
@@ -0,0 +1,77 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>pwd</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>pwd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+pwd - print working directory
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/pwd</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>pwd</tt> prints the current working directory.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>pwd</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/__getcwd.html>__getcwd</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+pwd should function properly once the basic system calls assignment is
+completed, except on filesystems or in directories that do not support
+getcwd.
+Note that by default <A HREF=../dev/emu.html>emufs</A> does not
+support getcwd except in its root directory.
+</p>
+
+<p>
+<tt>pwd</tt> should function properly in all directories of your
+filesystem once the file system assignment is completed.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/rm.html b/build/install/man/bin/rm.html
new file mode 100644
index 0000000..026e5c3
--- /dev/null
+++ b/build/install/man/bin/rm.html
@@ -0,0 +1,91 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rm</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rm</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rm - remove (unlink) files
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/rm</tt> <em>file...</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>rm</tt> deletes the files specified on its command line. (If one
+of the filenames specified is one of several hard links to the same
+file, the file is only removed erased when all links to it are
+deleted.)
+</p>
+
+<p>
+Using <tt>rm</tt> on directories produces an error. Use
+<A HREF=rmdir.html>rmdir</A> to remove directories.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>rm</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+<p>
+As the remove system call is generally not part of the basic system
+calls assignment, <tt>rm</tt> will usually still not function after
+the basic system calls assignment is complete.
+This call is typically part of a later assignment, usually the file
+system assignment.
+Consult your course materials for specific information.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+<A HREF=../dev/emu.html>emufs</A> does not support <tt>rm</tt>. (This is
+intentional.)
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=rmdir.html>rmdir</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/rmdir.html b/build/install/man/bin/rmdir.html
new file mode 100644
index 0000000..4c5ae17
--- /dev/null
+++ b/build/install/man/bin/rmdir.html
@@ -0,0 +1,90 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rmdir</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rmdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rmdir - remove directory
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/rmdir</tt> <em>directory</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>rmdir</tt> removes the specified directory. The directory must be empty.
+</p>
+
+<p>
+It is an error to attempt to remove the . or .. names in a directory,
+or to apply rmdir to a filesystem object that is not a directory.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>rmdir</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+As the rmdir system call is generally not part of the basic system
+calls assignment, <tt>rmdir</tt> will usually still not function after
+the basic system calls assignment is complete.
+This call is typically part of a later assignment, usually the file
+system assignment. You may also need to implement subdirectories in
+the file system.
+Consult your course materials for specific information.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+<A HREF=../dev/emu.html>emufs</A> does not support <tt>rmdir</tt>.
+(This is intentional.)
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=mkdir.html>mkdir</A>, <A HREF=rm.html>rm</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/sh.html b/build/install/man/bin/sh.html
new file mode 100644
index 0000000..06d48a6
--- /dev/null
+++ b/build/install/man/bin/sh.html
@@ -0,0 +1,77 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sh</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sh</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sh - user command shell
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/sh</tt> [<tt>-c</tt> <i>command</i>]
+</p>
+
+<h3>Description</h3>
+<p>
+This is a simple command interpreter. The shell provided with OS/161
+(or, perhaps, provided as a solution set, if you had to write a shell)
+is a simple shell accepting some basic Unix-like syntax.
+</p>
+
+<h3>Requirements</h3>
+<p>
+sh uses these system calls:
+<ul>
+<li> <A HREF=../syscall/chdir.html>chdir</A>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+<li> <A HREF=../syscall/__time.html>__time</A>
+</ul>
+</p>
+
+<p>
+This shell's basic functionality should work properly once the basic
+system calls assignment is complete. Some features may require
+additional support which may be part of subsequent assignments.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/sync.html b/build/install/man/bin/sync.html
new file mode 100644
index 0000000..7f62d8f
--- /dev/null
+++ b/build/install/man/bin/sync.html
@@ -0,0 +1,66 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sync</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sync</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sync - synchronize buffers to disk
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/sync</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>sync</tt> causes filesystem I/O buffers that have been modified
+but not yet written to be written to disk.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>sync</tt> uses the <A HREF=../syscall/sync.html>sync</A> system
+call, and of course <A HREF=../syscall/_exit.html>_exit</A>.
+</p>
+
+<p>
+<tt>sync</tt> should function once the sync system call is wired up.
+This is likely part of the file system assignment
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/tac.html b/build/install/man/bin/tac.html
new file mode 100644
index 0000000..ba878ff
--- /dev/null
+++ b/build/install/man/bin/tac.html
@@ -0,0 +1,87 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013, 2014
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>tac</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>tac</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+<tt>tac</tt> - print in reverse order
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/tac</tt> <em>files...</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>tac</tt> prints the files listed on its command line in reverse
+order to its standard output. If the magic filename "-" is
+encountered, <tt>tac</tt> prints its standard input up to the first
+EOF. Each file is printed backwards in line-by-line fashion.
+</p>
+
+<p>
+With no arguments, <tt>tac</tt> prints its standard input.
+</p>
+
+<p>
+<tt>tac</tt> takes no options.
+</p>
+
+<h3>Requirements</h3>
+
+<p>
+<tt>tac</tt> uses the following syscalls:
+<ul>
+<li><A HREF=../syscall/getpid.html>getpid</A>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/write.html>write</A>
+<li><A HREF=../syscall/close.html>close</A>
+<li><A HREF=../syscall/remove.html>remove</A>
+<li><A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>tac</tt> should function properly once the basic system calls
+assignment is completed. However, until the file system assignment is
+done and the <A HREF=../syscall/remove.html>remove</A> system call
+implemented, it will leave two scratch files behind per invocation.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/bin/true.html b/build/install/man/bin/true.html
new file mode 100644
index 0000000..8bc4e16
--- /dev/null
+++ b/build/install/man/bin/true.html
@@ -0,0 +1,69 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>true</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>true</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+true - return true value
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/bin/true</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>true</tt> exits with exit code 0, signifying success.
+<p>
+
+<h3>Requirements</h3>
+<p>
+<tt>true</tt> uses the <A HREF=../syscall/_exit.html>_exit</A> system call.
+</p>
+
+<p>
+<tt>true</tt> should function properly once the basic system calls
+assignment is completed.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=false.html>false</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/beep.html b/build/install/man/dev/beep.html
new file mode 100644
index 0000000..3722843
--- /dev/null
+++ b/build/install/man/dev/beep.html
@@ -0,0 +1,62 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>beep</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>beep</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+beep - console beep device
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device beep0 at ltimer*
+</p>
+
+<h3>Description</h3>
+<p>
+The beep device is an abstract entry point for in-kernel beeping. The
+beep() function is provided, and redirected to the first attached
+device. If no beep device is available, beeping will cause a warning
+to be printed to the system console.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=ltimer.html>ltimer</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/con.html b/build/install/man/dev/con.html
new file mode 100644
index 0000000..5de24fe
--- /dev/null
+++ b/build/install/man/dev/con.html
@@ -0,0 +1,73 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>console</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>con</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+con - system login console
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device con0 at lser*<br>
+device con0 at lscreen*<br>
+</p>
+
+<h3>Description</h3>
+<p>
+The generic console device can be attached to either a serial port or
+a memory-mapped screen. It provides a small input buffer but no input
+editing. You may add such features if you desire.
+</p>
+
+<p>
+The in-kernel kprintf() routine and its relatives send their
+output to the console device.
+</p>
+
+<h3>Files</h3>
+<p>
+<tt>con:</tt>
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lser.html>lser</A>,
+<A HREF=lscreen.html>lscreen</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/emu.html b/build/install/man/dev/emu.html
new file mode 100644
index 0000000..81e202f
--- /dev/null
+++ b/build/install/man/dev/emu.html
@@ -0,0 +1,83 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>emu</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>emu</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+emu - emulator pass-through filesystem
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device emu* at lamebus*
+</p>
+
+<h3>Description</h3>
+<p>
+emu, also known as emufs, is a driver for a special-purpose System/161
+device that provides access to the filesystem System/161 is running
+atop. It provides the appearance of a mounted filesystem.
+</p>
+
+<p>
+It is not recommended to access the same underlying files through
+different instances of emufs.
+</p>
+
+<h3>Files</h3>
+<p>
+<tt>emu0:</tt>, <tt>emu1:</tt>, etc.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+emufs does not restrict access to the host directory tree under and
+including its root directory. This is so symbolic links out of this
+tree work without requiring special handling.
+</p>
+
+<p>
+A number of file system operations, most notably remove and rmdir, are
+not supported.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/index.html b/build/install/man/dev/index.html
new file mode 100644
index 0000000..26de94f
--- /dev/null
+++ b/build/install/man/dev/index.html
@@ -0,0 +1,67 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 Devices</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Devices</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=beep.html>beep</A> - console beep device
+<li> <A HREF=con.html>con</A> - system login console
+<li> <A HREF=emu.html>emu</A> - emulator pass-through filesystem
+<li> <A HREF=lamebus.html>lamebus</A> - driver for LAMEbus system bus
+<li> <A HREF=lhd.html>lhd</A> - LAMEbus hard drive
+<li> <A HREF=lnet.html>lnet</A> - LAMEbus network card
+<li> <A HREF=lrandom.html>lrandom</A> - LAMEbus random source
+<li> <A HREF=lscreen.html>lscreen</A> - LAMEbus memory-mapped screen
+<li> <A HREF=lser.html>lser</A> - LAMEbus serial port
+<li> <A HREF=ltimer.html>ltimer</A> - LAMEbus timer device
+<li> <A HREF=ltrace.html>ltrace</A> - LAMEbus trace/debug device
+<li> <A HREF=null.html>null</A> - null device
+<li> <A HREF=random.html>random</A> - kernel randomness source
+<li> <A HREF=rtclock.html>rtclock</A> - realtime clock
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lamebus.html b/build/install/man/dev/lamebus.html
new file mode 100644
index 0000000..d3ab53e
--- /dev/null
+++ b/build/install/man/dev/lamebus.html
@@ -0,0 +1,68 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lamebus</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lamebus</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lamebus - driver for LAMEbus system bus
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device lamebus0
+</p>
+
+<h3>Description</h3>
+<p>
+LAMEbus (Linear Always-Mapped Extents bus) is the system bus for
+System/161. This driver takes care of managing the bus controller,
+distributing interrupts, and similar issues. It serves mostly as an
+attachment point for other drivers.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=emu.html>emu</A>,
+<A HREF=lhd.html>lhd</A>,
+<A HREF=lnet.html>lnet</A>,
+<A HREF=lrandom.html>lrandom</A>,
+<A HREF=lscreen.html>lscreen</A>,
+<A HREF=lser.html>lser</A>,
+<A HREF=ltimer.html>ltimer</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lhd.html b/build/install/man/dev/lhd.html
new file mode 100644
index 0000000..ae7bc34
--- /dev/null
+++ b/build/install/man/dev/lhd.html
@@ -0,0 +1,65 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lhd</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lhd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lhd - LAMEbus hard drive
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device lhd* at lamebus*
+</p>
+
+<h3>Description</h3>
+<p>
+lhd is the driver for the LAMEbus fixed disk interface. It
+provides mountable block-device and raw-device access to the disk.
+</p>
+
+<h3>Files</h3>
+<p>
+<tt>lhd0:</tt>, <tt>lhd0raw:</tt>, <tt>lhd1:</tt>, <tt>lhd1raw:</tt>, etc.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lnet.html b/build/install/man/dev/lnet.html
new file mode 100644
index 0000000..935a3d4
--- /dev/null
+++ b/build/install/man/dev/lnet.html
@@ -0,0 +1,62 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lnet</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lnet</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lnet - LAMEbus network card
+</p>
+
+<h3>Synopsis</h3>
+<p>
+options net<br>
+device lnet* at lamebus*<br>
+</p>
+
+<h3>Description</h3>
+<p>
+lnet is the driver for the LAMEbus network interface card. As
+of this writing the driver is not completed and is thus not available
+for actual use yet.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lrandom.html b/build/install/man/dev/lrandom.html
new file mode 100644
index 0000000..6b65611
--- /dev/null
+++ b/build/install/man/dev/lrandom.html
@@ -0,0 +1,64 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lrandom</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lrandom</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lrandom - LAMEbus random source
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device lrandom* at lamebus*
+</p>
+
+<h3>Description</h3>
+<p>
+lrandom is the driver for the LAMEbus random source card.
+</p>
+
+<p>
+The generic <A HREF=random.html>random</A> device can be attached to
+an lrandom instance.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lscreen.html b/build/install/man/dev/lscreen.html
new file mode 100644
index 0000000..db60a7f
--- /dev/null
+++ b/build/install/man/dev/lscreen.html
@@ -0,0 +1,72 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lscreen</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lscreen</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lscreen - LAMEbus memory-mapped screen
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device lscreen* at lamebus*
+</p>
+
+<h3>Description</h3>
+<p>
+lscreen is the driver for the LAMEbus memory-mapped screen
+card. It does not provide any internal input buffering; that is
+expected to happen at a higher level.
+</p>
+
+<p>
+Since the memory-mapped screen card is not actually available yet as
+of this writing, the driver has not been tested and probably does not
+work.
+</p>
+
+<p>
+The <A HREF=con.html>system console</A> device can be attached to an
+lscreen instance.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/lser.html b/build/install/man/dev/lser.html
new file mode 100644
index 0000000..98b87fc
--- /dev/null
+++ b/build/install/man/dev/lser.html
@@ -0,0 +1,67 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lser</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lser</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lser - LAMEbus serial port
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device lser* at lamebus*
+</p>
+
+<h3>Description</h3>
+<p>
+lser is the driver for the LAMEbus serial port card. It does not
+provide any internal buffering; that is expected to happen at a higher
+level. It can, however, operate in either polled or interrupt-driven
+output mode.
+</p>
+
+<p>
+The <A HREF=con.html>system console</A> device can be attached to an
+lser instance.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/ltimer.html b/build/install/man/dev/ltimer.html
new file mode 100644
index 0000000..f484dd6
--- /dev/null
+++ b/build/install/man/dev/ltimer.html
@@ -0,0 +1,65 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>ltimer</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>ltimer</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+ltimer - LAMEbus timer device
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device ltimer* at lamebus*
+</p>
+
+<h3>Description</h3>
+<p>
+ltimer is a driver for the LAMEbus clock/timer card. The
+card can also provide beep services to the kernel.
+</p>
+
+<p>
+The <A HREF=beep.html>beep</A> and <A HREF=rtclock.html>rtclock</A>
+generic devices can be attached to an ltimer instance.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lamebus.html>lamebus</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/null.html b/build/install/man/dev/null.html
new file mode 100644
index 0000000..fb4a51a
--- /dev/null
+++ b/build/install/man/dev/null.html
@@ -0,0 +1,55 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>null</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>null</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+null - null device
+</p>
+
+<h3>Description</h3>
+<p>
+The null device does nothing. Reads generate immediate EOF. Any data
+written is thrown away.
+</p>
+
+<h3>Files</h3>
+<p>
+<tt>null:</tt>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/random.html b/build/install/man/dev/random.html
new file mode 100644
index 0000000..6cb95ee
--- /dev/null
+++ b/build/install/man/dev/random.html
@@ -0,0 +1,73 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>random</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>random</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+random - kernel randomness source
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device random0 at lrandom*<br>
+device random0 at pseudorand0<br>
+</p>
+
+<h3>Description</h3>
+<p>
+The random device is the generalized interface to randomness sources.
+Only one random device is used; if more are attached they are ignored.
+If no random device is found, the kernel may not run.
+</p>
+
+<p>
+The random device provides both the in-kernel random() function and a
+VFS-level character device, called <tt>random:</tt>. Bytes read from the
+latter have random values; writes are discarded.
+</p>
+
+<h3>Files</h3>
+<p>
+<tt>random:</tt>
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lrandom.html>lrandom</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/dev/rtclock.html b/build/install/man/dev/rtclock.html
new file mode 100644
index 0000000..d08cd2f
--- /dev/null
+++ b/build/install/man/dev/rtclock.html
@@ -0,0 +1,65 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rtclock</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rtclock</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rtclock - realtime clock
+</p>
+
+<h3>Synopsis</h3>
+<p>
+device rtclock0 at ltimer*
+</p>
+
+<h3>Description</h3>
+<p>
+The rtclock device is the generalized interface to the time of day. It
+provides the in-kernel function gettime().
+</p>
+
+<p>
+Only the first clock attached is used. If no clock at all is found,
+the system will panic if gettime() is called.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=ltimer.html>ltimer</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/index.html b/build/install/man/index.html
new file mode 100644
index 0000000..545dd80
--- /dev/null
+++ b/build/install/man/index.html
@@ -0,0 +1,50 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 Manual</title>
+<link rel="stylesheet" type="text/css" media="all" href="manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h1 align=center>OS/161 2.0 Reference Manual</h1>
+<h1 align=center>&nbsp;</h1>
+
+<ul>
+<li> <A HREF=bin>Binaries (/bin)</A>
+<li> <A HREF=sbin>Sysadmin binaries (/sbin)</A>
+<li> <A HREF=testbin>Test binaries (/testbin)</A>
+<li> <A HREF=syscall>System calls</A>
+<li> <A HREF=libc>C standard library (libc)</A>
+<li> <A HREF=dev>Device drivers</A>
+<li> <A HREF=misc>Miscellaneous</A>
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/libc/__vprintf.html b/build/install/man/libc/__vprintf.html
new file mode 100644
index 0000000..054c8b4
--- /dev/null
+++ b/build/install/man/libc/__vprintf.html
@@ -0,0 +1,97 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>__vprintf</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>__vprintf</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+__vprintf - printf backend
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>__vprintf(void (*</tt><em>func</em><tt>)(void
+				*</tt><em>clientdata</em><tt>,
+				const char *</tt><em>str</em><tt>,
+				size_t </tt><em>len</em><tt>),
+          void *</tt><em>clientdata</em><tt>,
+          const char *</tt><em>format</em><tt>,
+          va_list)</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+In OS/161, __vprintf is the back-end engine for
+<A HREF=printf.html>printf</A> and printf-like functions.
+Note that it is not portable - application code should use
+<A HREF=snprintf.html>snprintf or vsnprintf</A> when implementing
+their own printf-like functions. This documentation is provided for
+use when extending OS/161 itself.
+</p>
+
+<p>
+The <em>format</em> and subsequent arguments are treated as described
+under <A HREF=printf.html>printf</A>.
+</p>
+
+<p>
+The <em>func</em> argument is called to print text generated by the
+formatting process. The <em>clientdata</em> argument is passed
+straight through __vprintf to <em>func</em>. The <em>str</em> argument
+to func points to some text that is to be printed; the <em>len</em>
+argument is the length of that string, which should not be assumed to
+be null-terminated.
+</p>
+
+<p>
+The strings passed to <em>func</em> may be small; if printing is
+expensive buffering is probably wanted.
+</p>
+
+<h3>Return Values</h3>
+<p>
+__vprintf returns the number of characters printed.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/abort.html b/build/install/man/libc/abort.html
new file mode 100644
index 0000000..d7534e3
--- /dev/null
+++ b/build/install/man/libc/abort.html
@@ -0,0 +1,68 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>abort</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>abort</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+abort - abnormal program termination
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;abort.h&gt;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>abort(void);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The <tt>abort</tt> function causes immediate abnormal program termination.
+Cleanup is not performed.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>abort</tt> does not return.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/assert.html b/build/install/man/libc/assert.html
new file mode 100644
index 0000000..f5809aa
--- /dev/null
+++ b/build/install/man/libc/assert.html
@@ -0,0 +1,74 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>assert</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>assert</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+assert - check assumptions at run time
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;assert.h&gt;</tt><br>
+<br>
+<tt>assert(expression);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>assert</tt> checks that its argument evaluates to true. If this is not the
+case, an error message is printed and <A HREF=abort.html>abort</A> is
+called.
+</p>
+
+<p>
+<tt>assert</tt> is a macro. If the macro <tt>NDEBUG</tt> is defined at
+compile time, assertion tests are removed.
+</p>
+
+<h3>Caution</h3>
+<p>
+Avoid writing assert expressions with side effects, as compiling with
+<tt>NDEBUG</tt> normally causes the side effects to disappear.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/atoi.html b/build/install/man/libc/atoi.html
new file mode 100644
index 0000000..ed5536d
--- /dev/null
+++ b/build/install/man/libc/atoi.html
@@ -0,0 +1,73 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>atoi</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>atoi</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+atoi - convert ascii to integer
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>atoi(const char *</tt><em>string</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<em>string</em>, which should be a textual representation of an
+integer, is converted to the machine representation of that integer.
+Leading whitespace, if any, is skipped. Conversion stops when a
+non-numeric character is found.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>atoi</tt> returns the number converted. If no digits at all were
+found, it returns 0.
+If too many digits are found (resulting in overflow) the behavior is
+formally undefined.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/bzero.html b/build/install/man/libc/bzero.html
new file mode 100644
index 0000000..6acc735
--- /dev/null
+++ b/build/install/man/libc/bzero.html
@@ -0,0 +1,71 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>bzero</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>bzero</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+bzero - zero out memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>bzero(void *</tt><em>buf</em><tt>, size_t </tt><em>len</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The region of memory pointed to by <em>buf</em>, of length
+<em>len</em>, is zeroed out.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+Zeroing the bytes of a floating point number does not necessarily
+produce a floating point zero value.
+Similarly, zeroing the bytes of a pointer does not necessarily produce
+<tt>NULL</tt>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/calloc.html b/build/install/man/libc/calloc.html
new file mode 100644
index 0000000..34e4e2f
--- /dev/null
+++ b/build/install/man/libc/calloc.html
@@ -0,0 +1,84 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>calloc</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>calloc</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+calloc - allocate and clear memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>calloc(size_t </tt><em>number</em><tt>, size_t </tt><em>size</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>calloc</tt> allocates <em>number</em>*<em>size</em> bytes of
+memory, zeros it, and returns a pointer to it. It is equivalent to
+calling
+<A HREF=malloc.html><tt>malloc</tt></A><tt>(</tt><em>number</em>*<em>size</em></tt>)</tt>
+followed by <A HREF=bzero.html>bzero</A>.
+</p>
+
+<p>
+If the product <em>number</em>*<em>size</em> overflows the range of
+<tt>size_t</tt>, calloc fails.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>calloc</tt> returns a pointer to the memory allocated. If memory
+cannot be obtained, NULL is returned.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=malloc.html>malloc</A>,
+<A HREF=realloc.html>realloc</A>,
+<A HREF=free.html>free</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/err.html b/build/install/man/libc/err.html
new file mode 100644
index 0000000..dbe0893
--- /dev/null
+++ b/build/install/man/libc/err.html
@@ -0,0 +1,104 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>err</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>err</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+err, errx, verr, verrx - print error messages
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;err.h&gt;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>err(int </tt><em>exitcode</em><tt>,
+const char *</tt><em>format</em><tt>, ...);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>errx(int </tt><em>exitcode</em><tt>,
+const char *</tt><em>format</em><tt>, ...);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>verr(int </tt><em>exitcode</em><tt>,
+const char *</tt><em>format</em><tt>, va_list);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>verrx(int </tt><em>exitcode</em><tt>,
+const char *</tt><em>format</em><tt>, va_list);</tt><br>
+</p>
+
+<h3>Description</h3>
+<p>
+The <tt>err</tt>, <tt>errx</tt>, <tt>verr</tt>, and <tt>verrx</tt>
+functions print error messages to the standard error stream.
+</p>
+
+<p>
+<tt>errx</tt> prints the name of the program, a colon, the text
+generated by passing <em>format</em> and subsequent args through
+<A HREF=printf.html>printf</A>, and a newline. Then,
+<A HREF=exit.html>exit</A> is called and passed the supplied
+<em>exitcode</em>.
+</p>
+
+<p>
+<tt>err</tt> does the same thing, except that a colon and the error
+string for the current error (obtained by calling
+<A HREF=strerror.html>strerror</A> on
+<A HREF=../syscall/errno.html>errno</A>) are printed prior to the
+newline.
+</p>
+
+<p>
+<tt>verrx</tt> and <tt>verr</tt> are the same as errx and err
+respectively, except that the additional arguments for printf are
+taken to have been already packaged up in a <tt>va_list</tt> by use of
+the <A HREF=stdarg.html>stdarg</A> facility.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=warn.html>warn</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/exit.html b/build/install/man/libc/exit.html
new file mode 100644
index 0000000..61fc5da
--- /dev/null
+++ b/build/install/man/libc/exit.html
@@ -0,0 +1,69 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>exit</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>exit</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+exit - terminate program
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>exit(int </tt><em>code</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>exit</tt> causes the program to exit. It calls internal cleanup
+routines, and then performs the actual exit by calling
+<A HREF=../syscall/_exit.html>_exit</A>.
+</p>
+
+<h3>Return Values</h3>
+<p>
+exit does not return.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/free.html b/build/install/man/libc/free.html
new file mode 100644
index 0000000..b3547f8
--- /dev/null
+++ b/build/install/man/libc/free.html
@@ -0,0 +1,104 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>free</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>free</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+free - release/deallocate memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>free(void *</tt><em>ptr</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>free</tt> releases a block of memory previously allocated with
+<A HREF=malloc.html>malloc</A>, <A HREF=calloc.html>calloc</A>,
+or <A HREF=realloc.html>realloc</A>.
+</p>
+
+<p>
+Once free has been called, <em>ptr</em> is no longer valid and
+attempts to dereference it result in undefined behavior.
+(Pedantically, in fact, even using the <i>value</i> of
+<em>ptr</em> may produce undefined behavior.) Passing <em>ptr</em> to
+free a second or subsequent time (unless of course the same pointer
+value is again returned from malloc) is also undefined and
+particularly likely to provoke adverse behavior in most
+implementations.
+</p>
+
+<p>
+<tt>free(NULL)</tt> has no effect.
+</p>
+
+<p>
+In practice it is desirable for implementations of <tt>free</tt> to
+detect, to the extent practically possible, pointers that were not
+previously allocated by one of the above functions or that are passed
+to <tt>free</tt> multiple times. However, this can be difficult and
+there is no useful standard mechanism for error reporting.
+</p>
+
+<p>
+<tt>free</tt> does not necessarily unmap free memory or return it to
+the operating system, but may do so if it chooses.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>free</tt> returns no value.
+<p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=calloc.html>calloc</A>,
+<A HREF=malloc.html>malloc</A>,
+<A HREF=realloc.html>realloc</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/getchar.html b/build/install/man/libc/getchar.html
new file mode 100644
index 0000000..34566b6
--- /dev/null
+++ b/build/install/man/libc/getchar.html
@@ -0,0 +1,76 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>getchar</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>getchar</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+getchar - read character from standard input
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdio.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>getchar(void);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>getchar</tt> reads a single character from standard input. The
+character is converted to unsigned char before being returned.
+EOF, which is negative, is thus not a possible successful return value.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, getchar returns the character read. On error, or end of
+file, EOF is returned.
+</p>
+
+<h3>Errors</h3>
+<p>
+Any of the errors associated with <A HREF=../syscall/read>read</A>
+may occur.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/getcwd.html b/build/install/man/libc/getcwd.html
new file mode 100644
index 0000000..59dce44
--- /dev/null
+++ b/build/install/man/libc/getcwd.html
@@ -0,0 +1,100 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>getcwd</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>getcwd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+getcwd - get name of current working directory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>getcwd(char *</tt><em>buf</em><tt>, size_t </tt><em>buflen</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The name of the current directory is computed and stored in
+<em>buf</em>, an area of size <em>buflen</em>. The resulting string is
+0-terminated.
+</p>
+
+<p>
+This call is a wrapper (for Unix compatibility) around the system call
+<A HREF=../syscall/__getcwd.html>__getcwd</A>.
+</p>
+
+<p>
+Note, however, that the BSD extension whereby space is allocated with
+<A HREF=malloc.html>malloc</A> if <em>buf</em> is <tt>NULL</tt> is not
+supported.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>getcwd</tt> returns <em>buf</em>.
+On error, <tt>NULL</tt> is returned, and <A HREF=errno.html>errno</A>
+is set according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+</p>
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td>ENOENT</td>
+	<td width=5% rowspan=3>&nbsp;</td>
+	<td>A component of the pathname no longer exists.</td></tr>
+<tr><td>EIO</td>
+	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>
+	<td><em>buf</em> points to an invalid address.</td></tr>
+</table>
+
+</body>
+</html>
diff --git a/build/install/man/libc/index.html b/build/install/man/libc/index.html
new file mode 100644
index 0000000..2d4bb93
--- /dev/null
+++ b/build/install/man/libc/index.html
@@ -0,0 +1,96 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 C Standard Library</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 C Standard Library (libc)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=__vprintf.html>__vprintf</A> - printf backend
+<li> <A HREF=abort.html>abort</A> - abnormal program termination
+<li> <A HREF=assert.html>assert</A> - check assumptions at run time
+<li> <A HREF=atoi.html>atoi</A> - convert ascii to integer
+<li> <A HREF=bzero.html>bzero</A> - zero out memory
+<li> <A HREF=calloc.html>calloc</A> - allocate and clear memory
+<li> <A HREF=err.html>err, errx</A> - print error messages
+<li> <A HREF=execvp.html>execvp</A> - exec on the search path
+<li> <A HREF=exit.html>exit</A> - terminate program
+<li> <A HREF=free.html>free</A> - release/deallocate memory
+<li> <A HREF=getchar.html>getchar</A> - read character from standard input
+<li> <A HREF=getcwd.html>getcwd</A> - get name of current working directory
+<li> <A HREF=getenv.html>getenv</A> - get environment variable
+<li> <A HREF=setjmp.html>longjmp</A> - non-local jump operations
+<li> <A HREF=malloc.html>malloc</A> - allocate memory
+<li> <A HREF=memcmp.html>memcmp</A> - compare regions of memory
+<li> <A HREF=memcpy.html>memcpy</A> - copy region of memory
+<li> <A HREF=memmove.html>memmove</A> - copy region of memory
+<li> <A HREF=memset.html>memset</A> - initialize region of memory
+<li> <A HREF=printf.html>printf</A> - print formatted output
+<li> <A HREF=putchar.html>putchar</A> - print character to standard output
+<li> <A HREF=puts.html>puts</A> - print string to standard output
+<li> <A HREF=random.html>random</A> - pseudorandom number generation
+<li> <A HREF=realloc.html>realloc</A> - resize allocated memory
+<li> <A HREF=setjmp.html>setjmp</A> - non-local jump operations
+<li> <A HREF=snprintf.html>snprintf</A> - print formatted text to string
+<li> <A HREF=stdarg.html>stdarg</A> - handle functions with variable arguments
+<li> <A HREF=strcat.html>strcat</A> - concatenate strings
+<li> <A HREF=strchr.html>strchr</A> - search string for character
+<li> <A HREF=strcmp.html>strcmp</A> - compare strings
+<li> <A HREF=strcpy.html>strcpy</A> - copy string
+<li> <A HREF=strerror.html>strerror</A> - get error message for error code
+<li> <A HREF=strlen.html>strlen</A> - determine length of string
+<li> <A HREF=strrchr.html>strrchr</A> - search string for character
+<li> <A HREF=strtok.html>strtok</A> - tokenize string
+<li> <A HREF=strtok_r.html>strtok_r</A> - tokenize string reentrantly
+<li> <A HREF=system.html>system</A> - run command as subprocess
+<li> <A HREF=time.html>time</A> - get time of day
+<li> <A HREF=err.html>verr, verrx</A> - print error messages
+<li> <A HREF=printf.html>vprintf</A> - print formatted output
+<li> <A HREF=snprintf.html>vsnprintf</A> - print formatted text to string
+<li> <A HREF=warn.html>vwarn, vwarnx</A> - print warning messages
+<li> <A HREF=warn.html>warn, warnx</A> - print warning messages
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/libc/malloc.html b/build/install/man/libc/malloc.html
new file mode 100644
index 0000000..e131d6f
--- /dev/null
+++ b/build/install/man/libc/malloc.html
@@ -0,0 +1,108 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>malloc</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>malloc</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+malloc - allocate memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>malloc(size_t </tt><em>size</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>malloc</tt> allocates <em>size</em> bytes of memory and returns a
+pointer to it. The memory is not necessarily zero-filled. (To get
+zero-filled memory, call <A HREF=bzero.html>bzero</A> or
+<A HREF=memset.html>memset</A>, or use
+<A HREF=calloc.html>calloc</A>.)
+</p>
+
+<p>
+The pointer returned must be suitably aligned for use with any data
+type.
+</p>
+
+<p>
+When asked to allocate zero bytes, <tt>malloc</tt> may either always
+return <tt>NULL</tt>, or may return distinct non-null pointers that do
+not point to any storage.
+</p>
+
+<p>
+While <tt>malloc</tt> may at its option allocate more than
+<em>size</em> bytes to fill a request, code that calls <tt>malloc</tt>
+may not depend on such behavior and must not perform any accesses
+outside of the bounds defined by <em>size</em>.
+</p>
+
+<p>
+It is legitimate for memory returned by malloc to not actually be
+physically mapped until it is used.
+If at the time it is used, no physical memory is available and there
+is no space to swap something out to make room, the process may
+potentially receive a fatal signal or be killed.
+This behavior is often somewhat contentious; a full discussion of the
+possible alternatives and their pros and cons is well beyond the scope
+of this man page.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>malloc</tt> returns a pointer to the memory allocated. If memory
+cannot be obtained, NULL is returned.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=calloc.html>calloc</A>,
+<A HREF=realloc.html>realloc</A>,
+<A HREF=free.html>free</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/memcpy.html b/build/install/man/libc/memcpy.html
new file mode 100644
index 0000000..5519a2b
--- /dev/null
+++ b/build/install/man/libc/memcpy.html
@@ -0,0 +1,76 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>memcpy</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>memcpy</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+memcpy - copy region of memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>memcpy(void *</tt><em>dest</em><tt>,
+const void *</tt><em>src</em><tt>, size_t </tt><em>len</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The block of memory beginning at <em>src</em>, of length <em>len</em>,
+is copied to <em>dest</em>. <em>dest</em> must point to a region large
+enough to hold it.
+</p>
+
+<p>
+<tt>memcpy</tt> is not guaranteed to operate correctly if <em>src</em>
+and <em>dest</em> overlap. Use <A HREF=memmove.html>memmove</A> on
+overlapping regions.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>memcpy</tt> returns <em>dest</em>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/memmove.html b/build/install/man/libc/memmove.html
new file mode 100644
index 0000000..281ac9b
--- /dev/null
+++ b/build/install/man/libc/memmove.html
@@ -0,0 +1,75 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>memmove</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>memmove</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+memmove - copy region of memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>memmove(void *</tt><em>dest</em><tt>,
+const void *</tt><em>src</em><tt>, size_t </tt><em>len</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The block of memory beginning at <em>src</em>, of length <em>len</em>,
+is copied to <em>dest</em>. <em>dest</em> must point to a region large
+enough to hold it.
+</p>
+
+<p>
+Unlike <A HREF=memcpy.html>memcpy</A>, <tt>memmove</tt> is guaranteed
+to operate correctly if <em>src</em> and <em>dest</em> overlap.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>memmove</tt> returns <em>dest</em>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/memset.html b/build/install/man/libc/memset.html
new file mode 100644
index 0000000..c2c73b1
--- /dev/null
+++ b/build/install/man/libc/memset.html
@@ -0,0 +1,82 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>memset</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>memset</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+memset - initialize region of memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>memset(void *</tt><em>buf</em><tt>,
+int </tt><em>chr</em><tt>, size_t </tt><em>len</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The memory region pointed to by <em>buf</em>, of length <em>len</em>,
+is initialized by setting each location of it to <em>chr</em>
+(converted to unsigned char).
+</p>
+
+<p>
+Beware of writing
+<pre>
+   memset(buf, len, 0);
+</pre>
+(which does nothing at all) when you meant
+<pre>
+   memset(buf, 0, len);
+</pre>
+instead.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>memset</tt> returns <em>buf</em>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/printf.html b/build/install/man/libc/printf.html
new file mode 100644
index 0000000..e53c152
--- /dev/null
+++ b/build/install/man/libc/printf.html
@@ -0,0 +1,143 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>printf</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>printf</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+printf - print formatted output
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdio.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>printf(const char *</tt><em>format</em><tt>, ...);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>printf</tt> prints formatted text to standard output. The text is
+generated from the <em>format</em> argument and subsequent arguments
+according to the following rules.
+</p>
+
+<p>
+Characters in <em>format</em> that are not the percent sign
+(<tt>%</tt>) are printed verbatim. When a percent sign is encountered,
+the next argument of the arguments following <em>format</em> is
+retrieved and printed. The type of the argument expected, as well as
+some simple formatting instructions, are derived from the characters
+following the percent sign.
+</p>
+
+<p>
+The following characters designate types to print. One of these
+characters concludes the format sequence begun with a percent sign,
+and also determines the type expected as an argument.
+</p>
+
+<table width=90%>
+<tr><td width=5% rowspan=9>
+    <td width=5%>%</td>	<td>A percent sign is printed; no argument
+				is consumed.</td></tr>
+<tr><td>c</td>	<td>Character (char, passed as an integer value)</td></tr>
+<tr><td>d</td>	<td>Signed integer value printed in decimal</td></tr>
+<tr><td>o</td>	<td>Unsigned integer value printed in octal</td></tr>
+<tr><td>p</td>	<td>Pointer (void *)</td></tr>
+<tr><td>s</td>	<td>String (const char *)</td></tr>
+<tr><td>u</td>	<td>Unsigned integer value printed in decimal</td></tr>
+<tr><td>x</td>	<td>Unsigned integer value printed in hexadecimal</td></tr>
+<tr><td>X</td>	<td>Unsigned integer value printed in uppercase hex</td></tr>
+</table>
+
+<p>
+The following characters are modifiers; they can be found between the
+percent sign and the type designator.
+</p>
+
+<table width=90%>
+<tr><td width=5% rowspan=6>
+    <td width=5% valign=top>#</td> <td>Select an "alternate
+				format". On integer formats this
+				causes the C base prefix to be printed
+				along with the integer. On other
+				formats, this has no effect.</td></tr>
+<tr><td valign=top>l</td> <td>Assume an integer argument is
+				<tt>long</tt> or <tt>unsigned
+				long</tt> instead of <tt>int</tt> or
+				<tt>unsigned int</tt>. If repeated,
+				the argument is taken to be <tt>long
+				long</tt> or <tt>unsigned long
+				long</tt>. </td></tr>
+<tr><td valign=top>z</td> <td>Assume an integer argument is
+				<tt>ssize_t</tt> or <tt>size_t</tt>
+				instead of <tt>int</tt> or
+				<tt>unsigned int</tt>. </td></tr>
+<tr><td valign=top>0-9</td> <td>Digits are treated as a decimal number,
+				which is considered to be the field
+				width. The argument is printed
+				right-aligned in a field that many
+				characters wide.</td></tr>
+<tr><td valign=top>0</td> <td>If the field width has a leading 0, the
+				padding character for alignment is
+				made 0 (zero) instead of
+				space.</td></tr>
+<tr><td valign=top>-</td> <td>If a field width is given, use it for
+				left alignment instead of right
+				alignment.</td></tr>
+</table>
+
+<h3>Restrictions</h3>
+<p>
+Note that this is a limited printf implementation - it has no support
+for precisions (".number" as a modifier), floating-point formats,
+field widths passed as arguments, or the rarely-used plus and space
+modifiers.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>printf</tt> returns the number of characters printed.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/putchar.html b/build/install/man/libc/putchar.html
new file mode 100644
index 0000000..2a166c9
--- /dev/null
+++ b/build/install/man/libc/putchar.html
@@ -0,0 +1,75 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>putchar</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>putchar</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+putchar - print character to standard output
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdio.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>putchar(int </tt><em>chr</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>putchar</tt> writes its argument character to standard output.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>putchar</tt> returns <em>chr</em>. On error, EOF is returned, and
+<A HREF=../syscall/errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+Any of the errors from <A HREF=../syscall/write.html>write</A> may
+occur.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/puts.html b/build/install/man/libc/puts.html
new file mode 100644
index 0000000..3824dc7
--- /dev/null
+++ b/build/install/man/libc/puts.html
@@ -0,0 +1,76 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>puts</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>puts</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+puts - print string to standard output
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdio.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>puts(const char *</tt><em>string</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The string <em>string</em>, and a following newline character, are
+printed on the standard output.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>puts</tt> returns a nonnegative integer. On error, -1 is
+returned, and <A HREF=../syscall/errno.html>errno</A> is set
+according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+Any of the errors from <A HREF=../syscall/write.html>write</A> may
+occur.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/random.html b/build/install/man/libc/random.html
new file mode 100644
index 0000000..484087a
--- /dev/null
+++ b/build/install/man/libc/random.html
@@ -0,0 +1,89 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>random</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>random</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+random - pseudorandom number generation
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>long</tt><br>
+<tt>random(void);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>srandom(unsigned long </tt><em>seed</em><tt>);</tt><br>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>random</tt> returns a number between 0 and 0x7fffffff. This
+number is selected using a rather complex generator which is believed
+to generate randomness of an acceptable (though not cryptographic)
+quality. Unlike with some generators, all bits of the values returned
+are random.
+</p>
+
+<p>
+<tt>srandom</tt> initializes the generator state based on the
+passed-in <em>seed</em>. If <tt>srandom</tt> is not called, the
+sequence of numbers returned by <tt>random</tt> is the same as if
+<tt>srandom</tt> had been called with a <em>seed</em> of 1.
+</p>
+
+<p>
+The symbolic constant <tt>RAND_MAX</tt> is provided to hold the
+maximum value 0x7fffffff.
+This is technically incorrect as the name <tt>RAND_MAX</tt> is
+properly part of a different random number interface.
+</p>
+
+<p>
+The implementation of <tt>random</tt> and <tt>srandom</tt> used in
+OS/161 is software developed by the University of California, Berkeley
+and its contributors.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/realloc.html b/build/install/man/libc/realloc.html
new file mode 100644
index 0000000..db51303
--- /dev/null
+++ b/build/install/man/libc/realloc.html
@@ -0,0 +1,104 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>realloc</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>realloc</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+realloc - resize allocated memory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>realloc(void *</tt><em>ptr</em><tt>,
+size_t </tt><em>newsize</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>realloc</tt> attempts to change the size of the memory block
+pointed to by <em>ptr</em> to <em>newsize</em>, causing the block to
+shrink or grow as necessary. If the size cannot be changed, a new
+block is allocated and the contents (up to the lesser of the previous
+size and <em>newsize</em>) are copied, then the old block is freed.
+</p>
+
+<p>
+The size of <tt>NULL</tt> is treated as 0. If the size is increased,
+any newly allocated space has undefined contents. If the size is
+decreased, the space discarded may no longer be accessed. Otherwise
+the contents of the memory block are preserved.
+</p>
+
+<p>
+<em>ptr</em> must be NULL or have been previously returned by
+<A HREF=malloc.html>malloc</A>, <A HREF=calloc.html>calloc</A>, or
+realloc.
+</p>
+
+The alignment and other restrictions described for
+<A HREF=malloc.html>malloc</A> apply equally to realloc.
+<p>
+
+<h3>Return Values</h3>
+<p>
+<tt>realloc</tt> returns a pointer to the resized memory block. This
+may not be the same pointer as <em>ptr</em>. If so, the old block is
+invalidated and <em>ptr</em> becomes invalid.
+</p>
+
+<p>
+If the operation cannot be performed at all, NULL is returned and
+the original block pointed to by <em>ptr</em> is untouched
+and remains valid.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=calloc.html>calloc</A>,
+<A HREF=malloc.html>malloc</A>,
+<A HREF=free.html>free</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/setjmp.html b/build/install/man/libc/setjmp.html
new file mode 100644
index 0000000..143bad2
--- /dev/null
+++ b/build/install/man/libc/setjmp.html
@@ -0,0 +1,85 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>setjmp</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>setjmp</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+setjmp, longjmp - non-local jump operations
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;setjmp.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>setjmp(jmp_buf </tt><em>jb</em>)<tt>;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>longjmp(jmp_buf </tt><em>jb</em><tt>,
+int </tt><em>returncode</em>)<tt>;</tt><br>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>setjmp</tt> saves the current stack frame and processor state in
+<em>jb</em>. A subsequent call to <tt>longjmp</tt> with the same
+<em>jb</em> causes execution to jump to where <tt>setjmp</tt> was
+called from.
+</p>
+
+<p>
+If the stack frame that called <tt>setjmp</tt> returns before
+<tt>longjmp</tt> is called, the results are undefined.
+</p>
+
+<h3>Return Values</h3>
+<p>
+When called, <tt>setjmp</tt> returns 0. When <tt>longjmp</tt> is
+called, it does not itself return, but instead causes <tt>setjmp</tt>
+to appear to return again, this time returning <em>returncode</em>.
+</p>
+
+<p>
+If zero is passed as <em>returncode</em>, the value 1 is used instead.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/snprintf.html b/build/install/man/libc/snprintf.html
new file mode 100644
index 0000000..e6268f7
--- /dev/null
+++ b/build/install/man/libc/snprintf.html
@@ -0,0 +1,84 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>snprintf</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>snprintf</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+snprintf - print formatted text to string
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>snprintf(char *</tt><em>buf</em><tt>, size_t </tt><em>buflen</em><tt>,
+const char *</tt><em>format</em><tt>, ...);</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>vsnprintf(char *</tt><em>buf</em><tt>, size_t </tt><em>buflen</em><tt>,
+const char *</tt><em>format</em><tt>, va_list);</tt><br>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>snprintf</tt> performs <A HREF=printf.html>printf</A>-style
+formatting on the string <em>format</em> and subsequent arguments. The
+resulting string is placed in <em>buf</em>, which is a memory area at
+least <em>buflen</em> bytes long. A null terminator is always added to
+<em>buf</em>; the space for this is presumed to be counted in
+<em>buflen</em>.
+</p>
+
+<p>
+<tt>vsnprintf</tt> is the same as <tt>snprintf</tt>, except that the
+subsequent arguments are presumed to have already been collected using
+the <A HREF=stdarg.html>stdarg</A> facility.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>snprintf</tt> and <tt>vsnprintf</tt> return the number of
+characters printed.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/stdarg.html b/build/install/man/libc/stdarg.html
new file mode 100644
index 0000000..b8d52b0
--- /dev/null
+++ b/build/install/man/libc/stdarg.html
@@ -0,0 +1,126 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>stdarg</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>stdarg</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+stdarg - handle functions with variable arguments
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdarg.h&gt;</tt><br>
+<br>
+<tt>va_start(va_list </tt><em>ap</em><tt>,
+</tt><em>start-argument</em><tt>);</tt><br>
+<br>
+<tt>va_end(va_list </tt><em>ap</em><tt>);</tt><br>
+<br>
+<em>type</em><br>
+<tt>va_arg(va_list </tt><em>ap</em><tt>, </tt><em>type</em><tt>);</tt><br>
+<br>
+<tt>va_copy(va_list </tt><em>dest</em><tt>,
+va_list </tt><em>src</em><tt>);</tt><br>
+</p>
+
+<h3>Description</h3>
+<p>
+Functions where the number of arguments is not fixed at compile time
+can be written using the stdarg facility. This provides a type,
+<tt>va_list</tt>, and the macros listed above. These allow iterating
+through the arguments.
+</p>
+
+<p>
+<tt>va_start</tt> initializes a <tt>va_list</tt> <em>ap</em> to point
+to the current function's arguments. The <em>start-argument</em>
+argument should be the name of the last fixed parameter in the calling
+sequence.
+(There must be at least one fixed parameter.)
+</p>
+
+<p>
+<tt>va_end</tt> cleans up a <tt>va_list</tt> once it is no longer
+needed. While failure to use <tt>va_end</tt> may have no effect on
+some architectures (in fact, in some cases <tt>va_end</tt> does
+nothing at all) on other architectures it may be fatal.
+</p>
+
+<p>
+<tt>va_arg</tt> retrieves the next argument, which is presumed to be
+of type <em>type</em>. The function must have some way to determine
+what types to expect, and how many arguments, as this information
+cannot be extracted from the argument list itself. To rewind, use
+<tt>va_end</tt> and then <tt>va_start</tt> again.
+</p>
+
+<p>
+Remember that default C argument promotions occur when passing the
+variable arguments. There is no run-time checking of any kind, and
+little to no compile-time checking: if you use <tt>va_arg</tt> to
+retrieve a type different from that which was passed, you will
+silently get garbage for that and (usually) all subsequent arguments.
+</p>
+
+<p>
+<tt>va_copy</tt> assigns a copy of <em>src</em> to
+<em>dest</em>. Subsequent operations on either will not affect the
+other. Both copies need to be cleaned up with <tt>va_end</tt>.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+Because the <tt>va_list</tt> is not necessarily a simple type, but may
+involve pointers to state maintained elsewhere, it is not necessarily
+a simple value. Thus, assigning <tt>va_list</tt> objects to each other
+with `=', memcpy, or the like, or passing them to functions, may not
+give multiple independent objects. When in doubt, use
+<tt>va_copy</tt>, or invoke <tt>va_start</tt> multiple times.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>va_start</tt>, <tt>va_end</tt>, and <tt>va_copy</tt> do not return
+anything. <tt>va_arg</tt> returns the value of the requested argument.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strcat.html b/build/install/man/libc/strcat.html
new file mode 100644
index 0000000..17b0a03
--- /dev/null
+++ b/build/install/man/libc/strcat.html
@@ -0,0 +1,80 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strcat</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strcat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strcat - concatenate strings
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>strcat(char *</tt><em>dest</em><tt>,
+const char *</tt><em>src</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>strcat</tt> appends the contents of the string <em>src</em> to the
+string <em>dest</em>.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+If <em>dest</em> does not point to enough space to hold both strings,
+the resulting behavior is undefined.
+</p>
+
+<p>
+If the memory areas pointed to by <em>dest</em> and <em>src</em>
+overlap, the behavior is undefined.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>strcat</tt> returns <em>dest</em>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strchr.html b/build/install/man/libc/strchr.html
new file mode 100644
index 0000000..ad5233f
--- /dev/null
+++ b/build/install/man/libc/strchr.html
@@ -0,0 +1,72 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strchr</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strchr</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strchr - search string for character
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>strchr(const char *</tt><em>string</em><tt>,
+int </tt><em>chr</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>strchr</tt> searches <em>string</em> from the left for the first
+instance of the character <em>chr</em>.
+The characters found and <em>chr</em> are cast to and compared as the
+type <tt>unsigned char</tt>.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>strchr</tt> returns a pointer to the character found. If the
+character is not found, NULL is returned.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strcmp.html b/build/install/man/libc/strcmp.html
new file mode 100644
index 0000000..3a4f424
--- /dev/null
+++ b/build/install/man/libc/strcmp.html
@@ -0,0 +1,80 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strcmp</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strcmp</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strcmp - compare strings
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>strcmp(const char *</tt><em>str1</em><tt>,
+const char *</tt><em>str2</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The two strings <em>str1</em> and <em>str2</em> are compared
+lexicographically.
+</p>
+
+<h3>Return Values</h3>
+<p>
+If <em>str1</em> sorts before <em>str2</em>, -1 is returned.
+</p>
+<p>
+If <em>str1</em> sorts after <em>str2</em>, 1 is returned.
+</p>
+<p>
+If <em>str1</em> is the same as <em>str2</em>, 0 is returned.
+</p>
+
+<p>
+The sort order used is derived from the natural ordering of
+the numerical values of (unsigned) characters.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strcpy.html b/build/install/man/libc/strcpy.html
new file mode 100644
index 0000000..b67a4c2
--- /dev/null
+++ b/build/install/man/libc/strcpy.html
@@ -0,0 +1,80 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strcpy</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strcpy</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strcpy - copy string
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>strcpy(char *</tt><em>dest</em><tt>,
+const char *</tt><em>src</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The contents of the string <em>src</em> are copied into
+<em>dest</em>.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+If <em>dest</em> does not point to enough space to hold the string,
+the resulting behavior is undefined.
+</p>
+
+<p>
+If the memory areas pointed to by <em>dest</em> and <em>src</em>
+overlap, the behavior is undefined.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>strcpy</tt> returns <em>dest</em>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strerror.html b/build/install/man/libc/strerror.html
new file mode 100644
index 0000000..db95df7
--- /dev/null
+++ b/build/install/man/libc/strerror.html
@@ -0,0 +1,75 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strerror</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strerror</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strerror - get error message for error code
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>const char *</tt><br>
+<tt>strerror(int </tt><em>code</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The error string for the error specified by <em>code</em> (see
+<A HREF=../syscall/errno.html>errno</A> for more information) is
+retrieved.
+</p>
+
+<p>
+It is not itself an error to request error strings for out-of-range
+values of <em>code</em>, but the string returned under such
+circumstances may not be very enlightening when printed.
+</p>
+
+<h3>Return Values</h3>
+<p>
+The error string is returned.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strlen.html b/build/install/man/libc/strlen.html
new file mode 100644
index 0000000..b85929f
--- /dev/null
+++ b/build/install/man/libc/strlen.html
@@ -0,0 +1,63 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strlen</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strlen</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strlen - determine length of string
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>size_t</tt><br>
+<tt>strlen(const char *</tt><em>string</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>strlen</tt> returns the length of the string <em>string</em>. The
+length does not include the null terminator.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strrchr.html b/build/install/man/libc/strrchr.html
new file mode 100644
index 0000000..4378e35
--- /dev/null
+++ b/build/install/man/libc/strrchr.html
@@ -0,0 +1,72 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strrchr</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strrchr</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strrchr - search string for character
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>strrchr(const char *</tt><em>string</em><tt>,
+int </tt><em>chr</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>strrchr</tt> searches <em>string</em> from the right for the first
+instance of the character <em>chr</em>.
+The characters found and <em>chr</em> are cast to and compared as the
+type <tt>unsigned char</tt>.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>strrchr</tt> returns a pointer to the character found. If the
+character is not found, NULL is returned.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strtok.html b/build/install/man/libc/strtok.html
new file mode 100644
index 0000000..1442712
--- /dev/null
+++ b/build/install/man/libc/strtok.html
@@ -0,0 +1,101 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strtok</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strtok</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strtok - tokenize string
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>strtok(char *</tt><em>string</em><tt>,
+const char *</tt><em>separators</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>strtok</tt> splits up the string <em>string</em> into fields using
+the characters found in <em>separators</em> as delimiters. The
+delimiters found are discarded. Multiple delimiter characters in a row
+are treated as a single delimiter.
+</p>
+
+<p>
+When first called, <tt>strtok</tt> returns the first field of
+<em>string</em>.  To retrieve successive fields of <em>string</em>,
+call <tt>strtok</tt> again repeatedly, passing <tt>NULL</tt> as the
+first argument. When no more fields are left, <tt>NULL</tt> is
+returned. If the string is empty or contains only delimiters,
+<tt>NULL</tt> will be returned on the first call.
+</p>
+
+<h3>Cautions</h3>
+<p>
+Note that the state used to remember <em>string</em> across calls is
+global. Thus, <tt>strtok</tt> cannot be used from more than one thread
+at a time in a multithreaded program, nor can it be used in a
+subroutine called from within a loop that itself uses
+<tt>strtok</tt>. If these restrictions are problematic, use <A
+HREF=strtok_r.html>strtok_r</A>.
+</p>
+
+<p>
+The behavior if strtok is called again without passing a new
+<em>string</em> after it has returned <tt>NULL</tt> is undefined.
+</p>
+
+<p>
+The behavior if strtok is called with the first argument <tt>NULL</tt>
+without having first passed a valid <em>string</em> is also undefined.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>strtok</tt> returns successive components of the passed-in string,
+and <tt>NULL</tt> when no more remain.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/strtok_r.html b/build/install/man/libc/strtok_r.html
new file mode 100644
index 0000000..41a513e
--- /dev/null
+++ b/build/install/man/libc/strtok_r.html
@@ -0,0 +1,81 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>strtok_r</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>strtok_r</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+strtok_r - tokenize string reentrantly
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;string.h&gt;</tt><br>
+<br>
+<tt>char *</tt><br>
+<tt>strtok_r(char *</tt><em>string</em><tt>,
+const char *</tt><em>separators</em><tt>,
+char **</tt><em>context</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>strtok_r</tt> is a reentrant version of <A
+HREF=strtok.html>strtok</A>. It behaves the same way, except that the
+internal state is kept using the <em>context</em> parameter rather
+than being global.
+</p>
+
+<p>
+The value passed to the <em>context</em> parameter should be the
+address of a <tt>char *</tt> whose value is preserved between
+successive related calls to strtok_r. The <tt>char *</tt> need not be
+initialized before the first call, and its value should not be
+inspected.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>strtok_r</tt> returns successive components of the passed-in
+string, and <tt>NULL</tt> when no more remain.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/system.html b/build/install/man/libc/system.html
new file mode 100644
index 0000000..24c67aa
--- /dev/null
+++ b/build/install/man/libc/system.html
@@ -0,0 +1,91 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>system</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>system</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+system - run command as subprocess
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;stdlib.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>system(const char *</tt><em>command</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The <tt>system</tt> routine executes <em>command</em> as if it were
+typed into the shell.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, system returns the exit status returned from
+<A HREF=../syscall/waitpid.html>waitpid</A>.
+On error, -1 is returned, and <A HREF=../syscall/errno.html>errno</A>
+is set according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+Any of the errors from <A HREF=../syscall/fork.html>fork</A> or
+<A HREF=../syscall/waitpid.html>waitpid</A>. Errors generated during
+<A HREF=../syscall/execv.html>execv</A> cannot readily be reported
+back in detail.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+In OS/161 there may be no shell and when there is the shell's behavior
+and syntax is not specified. For this reason we make no assumptions
+about the shell's operation, and assume <tt>system</tt> cannot
+reliably use the shell to parse and execute <em>command</em>.
+Instead, <tt>system</tt> does this itself, in a way which may not
+necessarily be compatible with the shell as it finally appears. You
+may want to change <tt>system</tt> to invoke the shell in a suitable
+fashion when/if a shell is available.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/libc/time.html b/build/install/man/libc/time.html
new file mode 100644
index 0000000..c09e0dc
--- /dev/null
+++ b/build/install/man/libc/time.html
@@ -0,0 +1,88 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>time</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>time</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+time - get time of day
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;time.h&gt;</tt><br>
+<br>
+<tt>time_t</tt><br>
+<tt>time(time_t *</tt><em>ptr</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The current time (in seconds since midnight GMT on January 1, 1970) is
+retrieved. If <em>ptr</em> is non-null, the time is stored through
+<em>ptr</em>. The time is also returned.
+</p>
+
+<p>
+time is a wrapper around the system call
+<A HREF=../syscall/__time.html>__time</A>, which returns nanoseconds
+as well as seconds.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>time</tt> returns the time. On error, -1 is returned, and errno is
+set to indicate the error.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error is the only way <tt>time</tt> should be capable of
+failing.
+</p>
+
+<table width=90%>
+<tr><td width=5%>&nbsp;</td>
+    <td>EFAULT</td>	<td><em>ptr</em> was an invalid non-NULL
+			address.</td></tr>
+</table>
+
+</body>
+</html>
diff --git a/build/install/man/libc/warn.html b/build/install/man/libc/warn.html
new file mode 100644
index 0000000..e2579d6
--- /dev/null
+++ b/build/install/man/libc/warn.html
@@ -0,0 +1,99 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>warn</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>warn</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+warn, warnx, vwarn, vwarnx - print warning messages
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;err.h&gt;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>warn(const char *</tt><em>format</em><tt>, ...);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>warnx(const char *</tt><em>format</em><tt>, ...);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>vwarn(const char *</tt><em>format</em><tt>, va_list);</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>vwarnx(const char *</tt><em>format</em><tt>, va_list);</tt><br>
+</p>
+
+<h3>Description</h3>
+
+<p>
+The <tt>warn</tt>, <tt>warnx</tt>, <tt>vwarn</tt>, and <tt>vwarnx</tt>
+functions print warning messages to the standard error stream.
+</p>
+
+<p>
+<tt>warnx</tt> prints the name of the program, a colon, the text
+generated by passing <em>format</em> and subsequent args through
+<A HREF=printf.html>printf</A>, and a newline.
+</p>
+
+<p>
+<tt>warn</tt> prints the same thing, except that a colon and the error
+string for the current error (obtained by calling
+<A HREF=strerror.html>strerror</A> on
+<A HREF=../syscall/errno.html>errno</A>) are printed prior to the
+newline.
+</p>
+
+<p>
+<tt>vwarnx</tt> and <tt>vwarn</tt> are the same as <tt>warnx</tt> and
+<tt>warn</tt> respectively, except that the additional arguments for
+printf are taken to have been already packaged up in a
+<tt>va_list</tt> by use of the <A HREF=stdarg.html>stdarg</A> facility.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=err.html>err</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/man.css b/build/install/man/man.css
new file mode 100644
index 0000000..ca11f9a
--- /dev/null
+++ b/build/install/man/man.css
@@ -0,0 +1,93 @@
+/*
+ * Rather than use @import, it's better to put fonts in your html:
+ * <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700,400italic'
+ *       rel='stylesheet' type='text/css'/>
+ * <link href='http://fonts.googleapis.com/css?family=Droid+Sans+Mono'
+ *       rel='stylesheet' type='text/css'/>
+ */
+@import url(http://fonts.googleapis.com/css?family=Open+Sans:400,700,400italic);
+@import url(http://fonts.googleapis.com/css?family=Droid+Sans+Mono);
+
+html {
+	background-color: #222;
+}
+
+body {
+	font-family: 'Open Sans', sans-serif;
+	font-size: 11pt;
+	line-height: 100%;
+	color: #444;
+	background-color: #fff;
+	max-width: 45em;
+	margin: 0 auto;
+	padding: 2em 2em 4em 2em;
+}
+
+p {
+	text-align: left;
+	line-height: 150%;
+}
+
+tt, code, pre {
+	color: #444;
+	font-family: 'Droid Sans Mono', monospace;
+	font-size: 10pt;
+	line-height: 100%;
+}
+
+em {
+	font-weight: regular;
+	font-style: italic;
+}
+
+h4, h3 {
+	color: #36648b;
+}
+
+a, a:link, a:visited, a:active {
+	color: #36648b;
+	text-decoration: underline;
+	font-weight: bold;
+}
+
+a:hover {
+	color: #000;
+}
+
+h2, h4 {
+	line-height: 1em;
+	margin: 0 0 2em 0;
+}
+
+/* title */
+h2 {
+	font-size: 1.5em;
+	text-align: right;
+	float: right;
+}
+
+/* manual */
+h4 {
+	font-size: inherit;
+	text-align: left;
+	float: left;
+}
+
+/* section */
+h3 {
+	clear: both;
+	margin: 2em 0 0 0;
+	font-weight: bold;
+	font-size: 1.2em;
+}
+
+table {
+	margin: 1em 0 1em 0;
+	border: none;
+}
+
+td, th {
+	padding: 0.5ex 1ex;
+	border: none;
+}
+
diff --git a/build/install/man/manindex.css b/build/install/man/manindex.css
new file mode 100644
index 0000000..e58a3ec
--- /dev/null
+++ b/build/install/man/manindex.css
@@ -0,0 +1,78 @@
+/*
+ * XXX: rather than use @import, better to put fonts in your html, instead:
+ * <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700,400italic'
+ *       rel='stylesheet' type='text/css'/>
+ * <link href='http://fonts.googleapis.com/css?family=Droid+Sans+Mono'
+ *       rel='stylesheet' type='text/css'/>
+ */
+@import url(http://fonts.googleapis.com/css?family=Open+Sans:400,700,400italic);
+@import url(http://fonts.googleapis.com/css?family=Droid+Sans+Mono);
+
+html {
+	background-color: #222;
+}
+
+body {
+	font-family: 'Open Sans', sans-serif;
+	font-size: 11pt;
+	line-height: 100%;
+	color: #444;
+	background-color: #fff;
+	max-width: 45em;
+	margin: 0 auto;
+	padding: 2em 2em 4em 2em;
+}
+
+p {
+	line-height: 150%;
+}
+
+em {
+	font-weight: regular;
+	font-style: italic;
+}
+
+h4, h3 {
+	color: #36648b;
+}
+
+a, a:link, a:visited, a:active {
+	color: #36648b;
+	text-decoration: underline;
+	font-weight: bold;
+}
+
+a:hover {
+	color: #000;
+}
+
+h2, h4 {
+	line-height: 1em;
+	margin: 0 0 2em 0;
+}
+
+/* title */
+h2 {
+	font-size: 1.5em;
+	text-align: center;
+}
+
+/* index */
+p[align=center] {
+	width: 80%;
+	margin: 0 auto;
+}
+
+ul {
+	list-style-type: none;
+}
+
+li {
+	line-height: 150%;
+}
+
+li a:first-child {
+	display: inline-block;
+	min-width: 8em;
+}
+
diff --git a/build/install/man/misc/index.html b/build/install/man/misc/index.html
new file mode 100644
index 0000000..6257b83
--- /dev/null
+++ b/build/install/man/misc/index.html
@@ -0,0 +1,54 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 Miscellaneous Docs</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Miscellaneous Docs</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=semfs.html>semfs</A> - userland semaphore file system
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/dumpsfs.html b/build/install/man/sbin/dumpsfs.html
new file mode 100644
index 0000000..fce9fb6
--- /dev/null
+++ b/build/install/man/sbin/dumpsfs.html
@@ -0,0 +1,102 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>dumpsfs</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>dumpsfs</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+dumpsfs - dump information about an SFS filesystem
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/sbin/dumpsfs</tt> <em>raw-device</em><br>
+<tt>host-dumpsfs</tt> <em>disk-image-file</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>dumpsfs</tt> dumps out selected information regarding the contents
+and structure of the SFS filesystem on the device it is passed.
+<p>
+
+<p>
+Like <A HREF=mksfs.html>mksfs</A>, it is also compiled for the
+System/161 host OS, and in that form can access System/161's disk
+image files.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>dumpsfs</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/fstat.html>fstat</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+Since the fstat system call is not normally part of the basic system
+calls assignment, <tt>dumpsfs</tt> will usually still not function
+after that assignment is completed.
+The fstat call is typically part of a later assignment, usually the
+file system assignment.
+Consult your course materials for specific information.
+</p>
+
+<p>
+The host version of <tt>dumpsfs</tt>, since it runs outside of OS/161,
+should always work regardless of what you have and have not
+implemented.
+</p>
+
+<p>
+Note that you may wish to extend dumpsfs in the course of doing the
+file system assignment.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=mksfs.html>mksfs</A>,
+<A HREF=sfsck.html>sfsck</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/halt.html b/build/install/man/sbin/halt.html
new file mode 100644
index 0000000..1ed481a
--- /dev/null
+++ b/build/install/man/sbin/halt.html
@@ -0,0 +1,82 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>halt</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>halt</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+halt - halt system
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/sbin/halt</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>halt</tt> shuts the system down. A clean shutdown is performed,
+flushing buffers to disk, unmounting filesystems, and so forth.
+</p>
+
+<p>
+Once shutdown is complete, <tt>halt</tt> stops execution of the
+operating system. What this entails depends on the platform. On
+platforms with a hardware boot monitor, it normally returns to the
+boot monitor. On software-based platforms, such as System/161, it
+normally terminates the software simulation. On other platforms the
+system will generally wait for a keystroke on the console and then
+reboot.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>halt</tt> uses the <A HREF=../syscall/reboot.html>reboot</A>
+system call.
+</p>
+
+<p>
+<tt>halt</tt> will function properly even before you do any work on
+OS/161.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=../bin/sync.html>/bin/sync</A><br>
+<A HREF=reboot.html>reboot</A>, <A HREF=poweroff.html>poweroff</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/index.html b/build/install/man/sbin/index.html
new file mode 100644
index 0000000..d19d445
--- /dev/null
+++ b/build/install/man/sbin/index.html
@@ -0,0 +1,60 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 Sysadmin binaries</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Sysadmin binaries (/sbin)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=dumpsfs.html>dumpsfs</A> - dump information about an
+   SFS filesystem
+<li> <A HREF=halt.html>halt</A> - halt system
+<li> <A HREF=mksfs.html>mksfs</A> - create an SFS filesystem
+<li> <A HREF=poweroff.html>poweroff</A> - halt system and power it off
+<li> <A HREF=reboot.html>reboot</A> - reboot system
+<li> <A HREF=sfsck.html>sfsck</A> - check/repair an SFS filesystem
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/mksfs.html b/build/install/man/sbin/mksfs.html
new file mode 100644
index 0000000..8e4bc65
--- /dev/null
+++ b/build/install/man/sbin/mksfs.html
@@ -0,0 +1,113 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>mksfs</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>mksfs</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+mksfs - create an SFS filesystem
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/sbin/mksfs</tt> <em>raw-device</em> <em>volname</em> <br>
+<tt>host-mksfs</tt> <em>disk-image-file</em> <em>volname</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>mksfs</tt> creates a new SFS filesystem on the specified device or
+disk image. The volume name is set to <em>volname</em>.
+</p>
+
+<p>
+If <tt>mksfs</tt> is used under OS/161, the first form should be used,
+where <em>raw-device</em> is a raw device name (such as "lhd1raw:").
+Don't use a device that's already mounted. Don't use a device that's
+being used for swap, either.
+</p>
+
+<p>
+<tt>mksfs</tt> can also be used on the System/161 host OS, in which
+case the second form should be used. The host-compiled version of
+<tt>mksfs</tt> knows how to deal with the header on System/161 disk
+images and does the right thing.
+</p>
+
+<p>
+Note that as of this writing <tt>host-mksfs</tt> cannot create
+System/161 disk image files. This is a bug and will hopefully be
+addressed eventually.
+</p>
+
+<h3>Requirements</h3>
+
+<p>
+<tt>mksfs</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/fstat.html>fstat</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>mksfs</tt> should function properly under OS/161 once the file
+system assignment is complete.
+</p>
+
+<p>
+The host version of <tt>mksfs</tt>, since it runs outside of OS/161,
+should always work regardless of what you have and have not
+implemented.
+</p>
+
+<p>
+You will likely need to make some changes to <tt>mksfs</tt> in the
+course of doing the file system assignment.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=dumpsfs.html>dumpsfs</A>,
+<A HREF=sfsck.html>sfsck</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/poweroff.html b/build/install/man/sbin/poweroff.html
new file mode 100644
index 0000000..72eefa0
--- /dev/null
+++ b/build/install/man/sbin/poweroff.html
@@ -0,0 +1,73 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>poweroff</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>poweroff</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+poweroff - halt system and power it off
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/sbin/poweroff</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>poweroff</tt> shuts down the system and then turns the system
+power off. On platforms where soft power-off is not supported,
+poweroff functions the same way as <A HREF=halt.html>halt</A>.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>poweroff</tt> uses the <A HREF=../syscall/reboot.html>reboot</A>
+system call.
+</p>
+
+<p>
+<tt>poweroff</tt> will function properly even before you do any work
+on OS/161.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=../bin/sync.html>/bin/sync</A><br>
+<A HREF=halt.html>halt</A>, <A HREF=reboot.html>reboot</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/sbin/reboot.html b/build/install/man/sbin/reboot.html
new file mode 100644
index 0000000..17a53fb
--- /dev/null
+++ b/build/install/man/sbin/reboot.html
@@ -0,0 +1,73 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>reboot</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>reboot</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+reboot - reboot system
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/sbin/reboot</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>reboot</tt> shuts the system down and then attempts to restart
+it. On platforms where reboot is not possible, it behaves the same way
+as <A HREF=halt.html>halt</A>.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>reboot</tt> uses the <A HREF=../syscall/reboot.html>reboot</A>
+system call.
+</p>
+
+<p>
+<tt>reboot</tt> will function properly even before you do any work on
+OS/161.
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=../bin/sync.html>/bin/sync</A><br>
+<A HREF=halt.html>halt</A>, <A HREF=poweroff.html>poweroff</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/__getcwd.html b/build/install/man/syscall/__getcwd.html
new file mode 100644
index 0000000..1932980
--- /dev/null
+++ b/build/install/man/syscall/__getcwd.html
@@ -0,0 +1,109 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>__getcwd</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>__getcwd</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+__getcwd - get name of current working directory (backend)
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>__getcwd(char *</tt><em>buf</em><tt>,
+size_t </tt><em>buflen</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The name of the current directory is computed and stored in
+<em>buf</em>, an area of size <em>buflen</em>. The length of data
+actually stored, which must be non-negative, is returned.
+</p>
+
+<p>
+Note: this call behaves like <A HREF=read.html>read</A> - the name
+stored in <em>buf</em> is not 0-terminated.
+</p>
+
+<p>
+This function is not meant to be called except by the C library;
+application programmers should use <A HREF=../libc/getcwd.html>getcwd</A>
+instead.
+</p>
+
+<p>
+<tt>__getcwd</tt> (like all system calls) should be atomic. In
+practice, because of complications associated with locking both up and
+down trees, it often isn't quite.
+Note that the kernel is not obliged to (and generally cannot) make the
+<tt>__getcwd</tt> call atomic with respect to other threads in the same
+process accessing the transfer buffer during the operation.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>__getcwd</tt> returns the length of the data returned.
+On error, -1 is returned, and <A HREF=errno.html>errno</A> is set
+according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>ENOENT</td>
+				<td>A component of the pathname no
+				longer exists.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>buf</em> points to an invalid
+				address.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/__time.html b/build/install/man/syscall/__time.html
new file mode 100644
index 0000000..ae86798
--- /dev/null
+++ b/build/install/man/syscall/__time.html
@@ -0,0 +1,89 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>__time</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>__time</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+__time - get time of day
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;time.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>__time(time_t *</tt><em>seconds</em><tt>,
+uint32_t *</tt><em>nanoseconds</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The current time (in seconds and nanoseconds since midnight GMT on
+January 1, 1970) is retrieved. If <em>seconds</em> and/or
+<em>nanoseconds</em> are non-null, the corresponding components of the
+time are stored through those pointers.
+</p>
+
+<h3>Return Values</h3>
+<p>
+__time returns 0 on success. On error, -1 is returned, and
+errno is set to indicate the error.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error is the only way __time should be capable of failing.
+
+<table width=90%>
+<tr><td width=5% rowspan=1>&nbsp;</td>
+    <td width=10% valign=top>EFAULT</td>
+			<td><em>seconds</em> or <em>nanoseconds</em>
+			was an invalid non-NULL address.</td></tr>
+</table>
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=../libc/time.html>time</A><br>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/_exit.html b/build/install/man/syscall/_exit.html
new file mode 100644
index 0000000..870341b
--- /dev/null
+++ b/build/install/man/syscall/_exit.html
@@ -0,0 +1,78 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>_exit</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>_exit</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+_exit - terminate process
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>void,</tt><br>
+<tt>_exit(int </tt><em>exitcode</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+Cause the current process to exit. The exit code <em>exitcode</em> is
+reported back to other process(es) via the
+<A HREF=waitpid.html>waitpid()</A> call. The process id of the exiting
+process should not be reused until all processes expected to collect
+the exit code with waitpid have done so.
+</p>
+
+<p>
+Traditionally exit codes are only seven bits wide (values 0-127);
+values outside this range were truncated. Portable code should not
+rely on being able to use exit codes outside this range. The
+definitions in OS/161 support a much wider range.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>_exit</tt> does not return.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/chdir.html b/build/install/man/syscall/chdir.html
new file mode 100644
index 0000000..91bcac6
--- /dev/null
+++ b/build/install/man/syscall/chdir.html
@@ -0,0 +1,97 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>chdir</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>chdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+chdir - change current directory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>chdir(const char *</tt><em>pathname</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The current directory of the current process is set to the directory
+named by <em>pathname</em>.
+</p>
+
+<p>
+<tt>chdir</tt> (like all system calls) should be atomic.
+Note that the kernel is not obliged to (and generally cannot) make the
+chdir call atomic with respect to other threads in the same
+process accessing the pathname string during the operation.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, chdir returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+<table width=90%>
+<tr><td width=5% rowspan=6>&nbsp;</td>
+    <td width=10%>ENODEV</td>
+			<td>The device prefix of <em>pathname</em> did
+				not exist.</td></tr>
+<tr><td>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td>ENOTDIR</td>	<td><em>pathname</em> did not refer to a
+				directory.</td>
+<tr><td>ENOENT</td>	<td><em>pathname</em> did not exist.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td>EFAULT</td>	<td><em>pathname</em> was an invalid pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/close.html b/build/install/man/syscall/close.html
new file mode 100644
index 0000000..9f16429
--- /dev/null
+++ b/build/install/man/syscall/close.html
@@ -0,0 +1,96 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>close</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>close</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+close - close file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>close(int </tt><em>fd</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The file handle <em>fd</em> is closed. The same file handle may then
+be returned again from <A HREF=open.html>open</A>,
+<A HREF=dup2.html>dup2</A>, <A HREF=pipe.html>pipe</A>, or similar
+calls.
+</p>
+
+<p>
+Other file handles are not affected in any way, even if they are
+attached to the same file.
+</p>
+
+<p>
+According to POSIX, even if the underlying operation fails, the file
+is closed anyway and the file handle becomes invalid.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, close returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=10>&nbsp;</td>
+    <td width=10%>EBADF</td>
+			<td><em>fd</em> is not a valid file handle.</td></tr>
+<tr><td>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/dup2.html b/build/install/man/syscall/dup2.html
new file mode 100644
index 0000000..8392a86
--- /dev/null
+++ b/build/install/man/syscall/dup2.html
@@ -0,0 +1,134 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>dup2</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>dup2</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+dup2 - clone file handles
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>dup2(int </tt><em>oldfd</em><tt>, int </tt><em>newfd</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>dup2</tt> clones the file handle <em>oldfd</em> onto the file
+handle <em>newfd</em>. If <em>newfd</em> names an already-open file,
+that file is closed.
+</p>
+
+<p>
+The two handles refer to the same "open" of the file -- that is,
+they are references to the same object and share the same seek
+pointer. Note that this is different from opening the same file
+twice.
+</p>
+
+<p>
+dup2 is most commonly used to relocate opened files onto
+<tt>STDIN_FILENO</tt>, <tt>STDOUT_FILENO</tt>, and/or
+<tt>STDERR_FILENO</tt>.
+</p>
+
+<p>
+Both filehandles must be non-negative, and, if applicable, smaller
+than the maximum allowed file handle number.
+</p>
+
+<p>
+The call (like all system calls) should be atomic; for single-threaded
+processes this is trivial.
+Multithreaded processes should never e.g. see an intermediate state
+where <em>newfd</em> has been closed but <em>oldfd</em> has not yet
+been cloned onto it.
+Similarly, if two threads attempt e.g. <tt>dup2(3, 4)</tt> and
+<tt>dup2(4, 3)</tt> simultaneously, the results must be equivalent to
+one of the calls completing before the other starts.
+</p>
+
+<p>
+Using dup2 to clone a file handle onto itself has no effect.
+</p>
+
+<p>
+(The "2" in "dup2" arises from the existence of an older and less
+powerful Unix system call "dup".)
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>dup2</tt> returns <em>newfd</em>. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not mentioned
+here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>oldfd</em> is not a valid file
+				handle, or <em>newfd</em> is a value
+				that cannot be a valid file
+				handle.</td></tr>
+<tr><td valign=top>EMFILE</td>	<td>The process's file table was full, or a
+				process-specific limit on open files
+				was reached.</td></tr>
+
+<tr><td valign=top>ENFILE</td>	<td>The system's file table was full,
+				if such a thing is possible, or a
+				global limit on open files was
+				reached.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/errno.html b/build/install/man/syscall/errno.html
new file mode 100644
index 0000000..feccf91
--- /dev/null
+++ b/build/install/man/syscall/errno.html
@@ -0,0 +1,435 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>errno</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>errno</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+errno - error code reporting
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;errno.h&gt;</tt><br>
+<br>
+<tt>extern int errno;</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+When system calls, and sometimes other functions, fail, a code
+representing or describing the error condition is placed in the global
+variable <tt>errno</tt>.
+</p>
+
+<p>
+When an operation succeeds, <tt>errno</tt> is not explicitly changed;
+however, operations that succeed are also not required to preserve the
+pre-existing value of <tt>errno</tt>.
+In general one must first check whether the operation failed, and only
+then interrogate <tt>errno</tt>.
+</p>
+
+<p>
+A handful of functions in Standard C and POSIX are explicitly defined
+to preserve <tt>errno</tt> on success. These are typically functions
+with not-entirely-satisfactory interfaces where the only reliable way
+to detect failure is to clear <tt>errno</tt> to zero beforehand and
+check it afterwards. The most common/notable example (not currently
+available in OS/161's library) is <tt>strtol</tt>.
+</p>
+
+<p>
+<tt>errno</tt> may be a macro. In a multithreaded process it is almost
+invariably a macro. However, it is always an lvalue, that is, it may
+be assigned to.
+</p>
+
+<p>
+Each numeric code has a symbolic name and a textual expansion. The
+symbolic names are used in source code; the textual expansions are
+printed out when errors are reported to users.
+</p>
+
+<p>
+The textual expansions can be retrieved with
+<A HREF=../libc/strerror.html>strerror</A> or printed with
+<A HREF=../libc/err.html>err</A> or <A HREF=../libc/warn.html>warn</A>.
+</p>
+
+<h3>Symbolic names</h3>
+<p>
+The following symbolic errors are defined in the OS/161 base system.
+You may add more at your pleasure; but be sure to read the notes in
+the file <tt>kern/errno.h</tt> that defines them.
+
+<table width=90%>
+<tr><td width=5% rowspan=63>&nbsp;</td>
+    <td width=10% valign=top>ENOSYS</td>
+<td><b>Function not implemented</b>: the action requested required
+	functionality not yet implemented. This is also the error
+	produced by attempting to make nonexistent system
+	calls.</td></tr>
+
+<tr><td valign=top>ENOMEM</td>
+<td><b>Out of memory</b>: a memory allocation failed. This normally
+	means that a process has used up all the memory available to
+	it. (This may be due to limits or because it has used up all
+	the memory available to the system.) It may also mean that
+	memory allocation within the kernel has failed.</td></tr>
+
+<tr><td valign=top>EAGAIN</td>
+<td><b>Operation would block</b>: some resource is temporarily
+	unavailable, or a non-blocking I/O operation (if such things
+	exist) could not be completed without waiting. Historically,
+	the message was "Try again later"; in 4.4BSD EAGAIN and the
+	old EWOULDBLOCK error code were folded together.</td></tr>
+
+<tr><td valign=top>EINTR</td>
+<td><b>Interrupted system call</b>: handling of a system call was
+	interrupted by the delivery of a signal. (If you have
+	signals.)</td></tr>
+
+<tr><td valign=top>EFAULT</td>
+<td><b>Bad memory reference</b>: a pointer passed as an argument was
+	not valid. Within the kernel, the <tt>copyin</tt> family of
+	functions produces this error when given an invalid
+	pointer.</td></tr>
+
+<tr><td valign=top>ENAMETOOLONG</td>
+<td><b>String too long</b>: a string passed as an argument was too
+	long to process.</td></tr>
+
+<tr><td valign=top>EINVAL</td>
+<td><b>Invalid argument</b>: an argument passed to a command or system
+	call was badly formed, invalid, or nonsensical, in a way for
+	which no more specific error code is defined.</td></tr>
+
+<tr><td valign=top>EPERM</td>
+<td><b>Operation not permitted</b>: the requested operation is
+	restricted to privileged users, or, in some cases, prohibited
+	entirely. Note that "permission denied" is not EPERM.</td></tr>
+
+<tr><td valign=top>EACCES</td>
+<td><b>Permission denied</b>: the current process's credentials do not
+	allow the desired form of access to the target object
+	according to its permission settings. Note that "permission
+	denied" is not EPERM.</td></tr>
+
+<tr><td valign=top>EMPROC</td>
+<td><b>Too many processes</b>: the current user ID has reached its
+	limit of simultaneous running processes. In Unix, this is
+	spelled EPROCLIM.</td></tr>
+
+<tr><td valign=top>ENPROC</td>
+<td><b>Too many processes on system</b>: the system process table is
+	full. (Void where impossible or prohibited by law.)</td></tr>
+
+<tr><td valign=top>ENOEXEC</td>
+<td><b>File is not executable</b>: an
+	<A HREF=../syscall/execv.html>execv</A> operation was
+	attempted but the kernel was unable to run the requested
+	program.</td></tr>
+
+<tr><td valign=top>E2BIG</td>
+<td><b>Argument list too long</b>: the space taken up by the
+	<tt>argv[]</tt> strings (and environment strings, where
+	applicable) passed to a newly started program is larger than
+	the system allows. The limit on this space is given by the
+	symbol <tt>ARG_MAX</tt>.</td></tr>
+
+<tr><td valign=top>ESRCH</td>
+<td><b>No such process</b>: the supplied process ID does not name any
+	of the currently running processes.</td></tr>
+
+<tr><td valign=top>ECHILD</td>
+<td><b>No child processes</b>: the current process has no exited child
+	processes whose exit status has not yet been collected with <A
+	HREF=../syscall/waitpid.html>waitpid</A>.</td></tr>
+
+<tr><td valign=top>ENOTDIR</td>
+<td><b>Not a directory</b>: a directory was expected and a
+	non-directory filesystem object was found.</td></tr>
+
+<tr><td valign=top>EISDIR</td>
+<td><b>Is a directory</b>: a non-directory was expected and a
+	directory was found.</td></tr>
+
+<tr><td valign=top>ENOENT</td>
+<td><b>No such file or directory</b>: the requested filesystem object
+	does/did not exist.</td></tr>
+
+<tr><td valign=top>ELOOP</td>
+<td><b>Too many levels of symbolic links</b>: pathname lookup crossed
+	more than the maximum allowed number of symbolic links.
+	Usually means a link points to itself, or a family of links
+	has been arranged into a loop. (If you have symbolic
+	links.)</td></tr>
+
+<tr><td valign=top>ENOTEMPTY</td>
+<td><b>Directory not empty</b>: a directory must be empty of
+	everything (except <tt>.</tt> and <tt>..</tt>) before it may
+	be removed.</td></tr>
+
+<tr><td valign=top>EEXIST</td>
+<td><b>File exists</b>: a filesystem object that was expected not to
+	exist did in fact already exist.</td></tr>
+
+<tr><td valign=top>EMLINK</td>
+<td><b>Too many hard links</b>: the maximum number of hard links to
+	the target file already exist.</td></tr>
+
+<tr><td valign=top>EXDEV</td>
+<td><b>Cross-device link</b>: an attempt was made to instruct one
+	filesystem to handle files on another filesystem.</td></tr>
+
+<tr><td valign=top>ENODEV</td>
+<td><b>No such device</b>: the requested device or device driver does
+	not exist.</td></tr>
+
+<tr><td valign=top>ENXIO</td>
+<td><b>Device not available</b>: the requested device exists but is
+	not available (is not mounted, is powered off, etc.)</td></tr>
+
+<tr><td valign=top>EBUSY</td>
+<td><b>Device busy</b>: the requested object cannot be used (or,
+	perhaps, released) because something else is using
+	it.</td></tr>
+
+<tr><td valign=top>EMFILE</td>
+<td><b>Too many open files</b>: the process file table is full, so the
+	process cannot open more files.</td></tr>
+
+<tr><td valign=top>ENFILE</td>
+<td><b>Too many open files in system</b>: a system-wide limit of some
+	sort, if any exists, on the number of open files has been
+	reached. Void where not possible.</td></tr>
+
+<tr><td valign=top>EBADF</td>
+<td><b>Bad file number</b>: a file operation was requested on an
+	illegal file handle, or a file handle that was not open. Or, a
+	write operation was attempted on a file handle that was open
+	only for read or vice-versa.</td></tr>
+
+<tr><td valign=top>EIOCTL</td>
+<td><b>Invalid or inappropriate ioctl</b>: an operation requested via
+	the <A HREF=../syscall/ioctl.html>ioctl</A> system call was
+	not defined or could not be performed on the indicated
+	object. In Unix, for historical reasons, this is spelled
+	ENOTTY, with the historic message "Not a
+	typewriter".</td></tr>
+
+<tr><td valign=top>EIO</td>
+<td><b>Input/output error</b>: a hardware-level error occured on a
+	device. Media errors on disks fall into this
+	category.</td></tr>
+
+<tr><td valign=top>ESPIPE</td>
+<td><b>Illegal seek</b>: a seek operation was attempted on a
+	sequential object where seeking makes no sense, like a
+	pipe or terminal.</td></tr>
+
+<tr><td valign=top>EPIPE</td>
+<td><b>Broken pipe</b>: a write was made to a pipe or socket object
+	with nobody to read it.</td></tr>
+
+<tr><td valign=top>EROFS</td>
+<td><b>Read-only file system</b>: an attempt was made to modify a
+	filesystem that was mounted read-only. (If you have read-only
+	mounts.)</td></tr>
+
+<tr><td valign=top>ENOSPC</td>
+<td><b>No space left on device</b>: the target filesystem is
+	full.</td></tr>
+
+<tr><td valign=top>EDQUOT</td>
+<td><b>Disc</b><font size=-2><i>(sic)</i></font><b> quota
+	exceeded</b>: the current user ID's quota (of space or
+	number of files) on the target filesystem has been used up.
+	(If you have disk quotas.)</td></tr>
+
+<tr><td valign=top>EFBIG</td>
+<td><b>File too large</b>: an attempt was made to exceed the target
+	filesystem's maximum file size, or a per-user limit on maximum
+	file size was reached, if such a thing exists.</td></tr>
+
+<tr><td valign=top>EFTYPE</td>
+<td><b>Invalid file type or format</b>: the file provided was the
+	wrong kind of file or contained invalid syntax.</td></tr>
+
+<tr><td valign=top>EDOM</td>
+<td><b>Argument out of range</b>: the (numeric) argument provided was
+	outside the values upon which the operation is defined. For
+	example, attempting to evaluate the logarithm of
+	zero produces this error. It is sometimes also used for
+	non-numeric arguments where the idea of being "out of range"
+	still makes sense.</td></tr>
+
+<tr><td valign=top>ERANGE</td>
+<td><b>Result out of range</b>: the result of an operation did not fit
+	in the space provided or could not be represented. Usually
+	used with numeric values. String values that don't fit usually
+	result in ENAMETOOLONG, or in its specific case,
+	E2BIG.</td></tr>
+
+<tr><td valign=top>EILSEQ</td>
+<td><b>Invalid multibyte character sequence</b>: the input string
+	contained a byte sequence whose value is undefined or whose
+	use is restricted. Only applicable when a multibyte character
+	set is in use, and if someone has added locale
+	support.</td></tr>
+
+<tr><td valign=top>ENOTSOCK</td>
+<td><b>Not a socket</b>: the file handle in question does not refer to
+	a socket, but a socket was expected.</td></tr>
+
+<tr><td valign=top>EISSOCK</td>
+<td><b>Is a socket</b>: the file handle in question refers to a
+	socket, but a socket was not expected. In Unix this is spelled
+	EOPNOTSUPP, and prints as "Operation not supported on
+	socket".</td></tr>
+
+<tr><td valign=top>EISCONN</td>
+<td><b>Socket is already connected</b>: given the protocol in use, the
+	operation requires a socket that has not yet been connected,
+	but the socket provided is in fact connected.</td></tr>
+
+<tr><td valign=top>ENOTCONN</td>
+<td><b>Socket is not connected</b>: given the protocol in use, the
+	operation requires a connected socket, but no connection has
+	yet been made.</td></tr>
+
+<tr><td valign=top>ESHUTDOWN</td>
+<td><b>Socket has been shut down</b>: the operation requires a running
+	socket, but the socket provided has been closed
+	down.</td></tr>
+
+<tr><td valign=top>EPFNOSUPPORT</td>
+<td><b>Protocol family not supported</b>: the requested protocol
+	family (PF_INET, PF_LOCAL, etc.) is not supported by the
+	system.</td></tr>
+
+<tr><td valign=top>ESOCKTNOSUPPORT</td>
+<td><b>Socket type not supported</b>: the requested socket type
+	(SOCK_STREAM, SOCK_DGRAM, etc.) is not supported by the
+	system.</td></tr>
+
+<tr><td valign=top>EPROTONOSUPPORT</td>
+<td><b>Protocol not supported</b>: the protocol requested for a socket
+	was not one supported by the system.</td></tr>
+
+<tr><td valign=top>EPROTOTYPE</td>
+<td><b>Protocol wrong type for socket</b>: the protocol requested for
+	a socket was not one supported by the requested socket type
+	and protocol family.</td></tr>
+
+<tr><td valign=top>EAFNOSUPPORT</td>
+<td><b>Address family not supported by protocol family</b>: the
+	address family named in a struct sockaddr (AF_INET, AF_LOCAL,
+	etc.) is not supported by the protocol family used to create
+	the socket (PF_INET, PF_LOCAL, etc.). In practice each
+	protocol family has exactly one address family and the values
+	of AF_* and PF_* are often, if incorrectly, used
+	interchangeably. If you run into this error in real life, it
+	usually means you didn't initialize your sockaddr structures
+	correctly.</td></tr>
+
+<tr><td valign=top>ENOPROTOOPT</td>
+<td><b>Protocol option not available</b>: the protocol option that was
+	requested is not supported or cannot be activated.</td></tr>
+
+<tr><td valign=top>EADDRINUSE</td>
+<td><b>Address already in use</b>: the requested socket address is
+	already in use by another socket somewhere on the
+	system.</td></tr>
+
+<tr><td valign=top>EADDRNOTAVAIL</td>
+<td><b>Cannot assign requested address</b>: the requested socket
+	address is unavailable. Usually caused by attempting to bind a
+	socket to the IP address of another machine. </td></tr>
+
+<tr><td valign=top>ENETDOWN</td>
+<td><b>Network is down</b>: the network or subnet needed is
+	offline.</td></tr>
+
+<tr><td valign=top>ENETUNREACH</td>
+<td><b>Network is unreachable</b>: the network or subnet needed cannot
+	be reached from here, possibly due to routing problems on the
+	network, possibly due to local configuration
+	trouble.</td></tr>
+
+<tr><td valign=top>EHOSTDOWN</td>
+<td><b>Host is down</b>: the specific machine requested is
+	offline.</td></tr>
+
+<tr><td valign=top>EHOSTUNREACH</td>
+<td><b>Host is unreachable</b>: the specific machine requested cannot
+	be reached from here.</td></tr>
+
+<tr><td valign=top>ECONNREFUSED</td>
+<td><b>Connection refused</b>: the remote machine is not listening for
+	connections on the requested port.</td></tr>
+
+<tr><td valign=top>ETIMEDOUT</td>
+<td><b>Connection timed out</b>: there was no response from the remote
+	machine. It may be down, it may not be listening, or it may
+	not be receiving our packets at all.</td></tr>
+
+<tr><td valign=top>ECONNRESET</td>
+<td><b>Connection reset by peer</b>: the connection was abandoned by
+	the remote host. Usually seen on already-open connections
+	after the remote machine reboots and thereby loses its network
+	state. Sometimes also caused by defective network devices
+	between the local and remote hosts.</td></tr>
+
+<tr><td valign=top>EMSGSIZE</td>
+<td><b>Message too large</b>: an internal protocol length limit was
+	exceeded.</td></tr>
+
+<tr><td valign=top>ENOTSUP</td>
+<td><b>Threads operation not supported</b>: a special error code
+	defined by the POSIX threads standard, which is a "special"
+	interface.</td></tr>
+
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/execv.html b/build/install/man/syscall/execv.html
new file mode 100644
index 0000000..741db9a
--- /dev/null
+++ b/build/install/man/syscall/execv.html
@@ -0,0 +1,171 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>execv</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>execv</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+execv - execute a program
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>execv(const char *</tt><em>program</em><tt>,
+char **</tt><em>args</em><tt>);</tt>
+<br>
+<tt>int</tt><br>
+<tt>execve(const char *</tt><em>program</em><tt>,
+char **</tt><em>args</em>,
+char **</tt><em>environ</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>execv</tt> replaces the currently executing program with a newly
+loaded program image. This occurs within one process; the process id
+is unchanged.
+</p>
+
+<p>
+The pathname of the program to run is passed as <em>program</em>. The
+<em>args</em> argument is an array of 0-terminated strings. The array
+itself should be terminated by a <tt>NULL</tt> pointer.
+</p>
+
+<p>
+The argument strings should be copied into the new process as the new
+process's <tt>argv[]</tt> array. In the new process,
+<tt>argv[argc]</tt> must be <tt>NULL</tt>.
+</p>
+
+<p>
+By convention, <tt>argv[0]</tt> in new processes contains the name
+that was used to invoke the program. This is not necessarily the same
+as <em>program</em>, and furthermore is only a convention and should
+not be enforced by the kernel.
+</p>
+
+<p>
+The process file table and current working directory are not modified
+by <tt>execv</tt>.
+</p>
+
+<p>
+The <tt>execve</tt> call is the same as <tt>execv</tt> except that a
+<tt>NULL</tt>-terminated list of environment strings (of the form
+<tt>var=value</tt>) is also passed through. In Unix, <tt>execv</tt> is
+a small wrapper for <tt>execve</tt> that supplies the current process
+environment. <b>In OS/161, <tt>execv</tt> is the primary exec call and
+<tt>execve</tt> is not supported or needed</b> unless you put in extra
+work to implement it.
+</p>
+
+<p>
+The maximum total size of the argv (and environment, if any) data is
+given by the system constant <tt>ARG_MAX</tt>. This comes set to 64K
+by default. You may change this limit, but don't reduce it without
+asking your course staff. The fact that argv blocks can be large is
+part of the design problem; while it's possible to set the limit to 4K
+and still have most things work, you are probably supposed to put at
+least some thought into engineering a real solution. (One problem to
+consider is that after the system has been up a while and system
+memory starts to become fragmented, you still need to be able to
+allocate enough memory to handle exec. Another is to make sure the
+system doesn't choke if too many processes are trying to exec at
+once. There are lots of ways to tackle this; be creative.)
+</p>
+
+<p>
+Whether the size of the pointers appearing in the <tt>argv</tt> array
+count towards the <tt>ARG_MAX</tt> limit is implementation-defined.
+Either way it should be possible to pass a lot of small arguments
+without bumping into some other limit on the number of pointers.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>execv</tt> does not return; instead, the new program
+begins executing. On failure, <tt>execv</tt> returns -1, and sets
+<A HREF=errno.html>errno</A> to a suitable error code for the error
+condition encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=9>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+			<td>The device prefix of <em>program</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>
+			<td>A non-final component of <em>program</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>
+			<td><em>program</em> did not exist.</td></tr>
+<tr><td valign=top>EISDIR</td>
+			<td><em>program</em> is a directory.</td></tr>
+<tr><td valign=top>ENOEXEC</td>
+			<td><em>program</em> is not in a recognizable
+				executable file format, was for the
+				wrong platform, or contained invalid
+				fields.</td></tr>
+<tr><td valign=top>ENOMEM</td>
+			<td>Insufficient virtual memory is available.</td></tr>
+<tr><td valign=top>E2BIG</td>
+			<td>The total size of the argument strings
+				exceeeds <tt>ARG_MAX</tt>.</td></tr>
+<tr><td valign=top>EIO</td>
+			<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>
+
+			<td>One of the arguments is an invalid
+			pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/fork.html b/build/install/man/syscall/fork.html
new file mode 100644
index 0000000..7cbe83a
--- /dev/null
+++ b/build/install/man/syscall/fork.html
@@ -0,0 +1,112 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>fork</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>fork</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+fork - copy the current process
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>pid_t</tt><br>
+<tt>fork(void);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>fork</tt> duplicates the currently running process. The two copies
+are identical, except that one (the "new" one, or "child"), has a new,
+unique process id, and in the other (the "parent") the process id is
+unchanged.
+</p>
+
+<p>
+The process id must be greater than 0.
+</p>
+
+<p>
+The two processes do not share memory or open file tables; this state
+is copied into the new process, and subsequent modification in one
+process does not affect the other.
+</p>
+
+<p>
+However, the file handle objects the file tables point to are shared,
+so, for instance, calls to lseek in one process can affect the other.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>fork</tt> returns twice, once in the parent process
+and once in the child process. In the child process, 0 is returned. In
+the parent process, the process id of the new child process is
+returned.
+</p>
+
+<p>
+On error, no new process is created. <tt>fork,</tt> only returns once,
+returning -1, and <A HREF=errno.html>errno</A> is set according to the
+error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EMPROC</td>
+				<td>The current user already has too
+				many processes.</td></tr>
+<tr><td valign=top>ENPROC</td>	<td>There are already too many
+				processes on the system.</td></tr>
+<tr><td valign=top>ENOMEM</td>	<td>Sufficient virtual memory for the new
+				process was not available.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/fstat.html b/build/install/man/syscall/fstat.html
new file mode 100644
index 0000000..f20e3a1
--- /dev/null
+++ b/build/install/man/syscall/fstat.html
@@ -0,0 +1,99 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>fstat</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>fstat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+fstat - get file state information
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;sys/stat.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>fstat(int </tt><em>fd</em><tt>,
+struct stat *</tt><em>statbuf</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>fstat</tt> retrieves status information about the file referred to
+by the file handle <em>fd</em> and stores it in the stat structure
+pointed to by <em>statbuf</em>.
+</p>
+
+<p>
+The call (like all system calls) should be atomic; that is, the
+information retrieved should come from a single point in time.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>fstat</tt> returns 0. On error, -1 is returned, and <A
+HREF=errno.html>errno</A> is set according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>fd</em> is not a valid file
+				handle.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>statbuf</em> points to an
+				invalid address.</td></tr>
+</table>
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=lstat.html>lstat</A>,
+<A HREF=stat.html>stat</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/fsync.html b/build/install/man/syscall/fsync.html
new file mode 100644
index 0000000..454897f
--- /dev/null
+++ b/build/install/man/syscall/fsync.html
@@ -0,0 +1,90 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>fsync</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>fsync</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+fsync - flush filesystem data for a specific file to disk
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>fsync(int </tt><em>fd</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The <tt>fsync</tt> function forces a write of dirty filesystem buffers
+and other dirty filesystem state associated with the object referred
+to by <em>fd</em> to be written to disk.
+</p>
+
+<p>
+<tt>fsync</tt> should not return until the writes are complete.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>fsync</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=2>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>fd</em> is not a valid file
+				handle.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/ftruncate.html b/build/install/man/syscall/ftruncate.html
new file mode 100644
index 0000000..f2af14a
--- /dev/null
+++ b/build/install/man/syscall/ftruncate.html
@@ -0,0 +1,99 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>ftruncate</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>ftruncate</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+ftruncate - set size of a file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>ftruncate(int </tt><em>fd</em><tt>, off_t </tt><em>filesize</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>ftruncate</tt> forcibly sets the size of the file referred to by
+<em>fd</em> to <em>filesize</em>. If this expands the file, the new
+data appears as if it is zero-filled. (On file systems that support
+sparse files, the new space does not need to be physically allocated.)
+If the action shrinks the file, the excess data is discarded.
+</p>
+
+<p>
+The file must be open for write.
+</p>
+
+<p>
+<tt>ftruncate</tt> must be atomic. For recoverable file systems, this
+includes after crashing and running recovery.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>ftruncate</tt> returns 0. On error, -1 is returned,
+and <A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>fd</em> is not a valid file handle, or
+				it is not open for writing.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>buf</em> points to an invalid
+				address.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/getdirentry.html b/build/install/man/syscall/getdirentry.html
new file mode 100644
index 0000000..f123dce
--- /dev/null
+++ b/build/install/man/syscall/getdirentry.html
@@ -0,0 +1,125 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>getdirentry</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>getdirentry</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+getdirentry - read filename from directory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>getdirentry(int </tt><em>fd</em><tt>, char *</tt><em>buf</em><tt>,
+size_t </tt><em>buflen</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>getdirentry</tt> retrieves the next filename from a directory
+referred to by the file handle <em>filehandle</em>. The name is stored
+in <em>buf</em>, an area of size <em>buflen</em>. The length of of the
+name actually found is returned.
+</p>
+
+<p>
+Note: this call behaves like read() - the name stored in <em>buf</em>
+is not null-terminated.
+</p>
+
+<p>
+Which filename is the "next" is chosen based on the seek pointer
+associated with the file handle. The meaning of the seek pointer on a
+directory is defined by the filesystem in use and should not be
+interpreted - the only ways in which <A HREF=lseek.html>lseek</A>
+should be used are with SEEK_SET and an offset previously returned by
+lseek, or with any of SEEK_SET, SEEK_CUR, or SEEK_EOF with an offset
+of 0.
+</p>
+
+<p>
+<tt>getdirentry</tt> (like all system calls) should be atomic. In this
+case this means that each <tt>getdirentry</tt> call should return a
+name that was in the directory at the point in time when the call
+happened relative to other calls. <tt>getdirentry</tt> should never
+return names that have only been partially written or that have been
+partially erased.
+Note that the kernel is not obliged to (and generally cannot) make the
+getdirentry call atomic with respect to other threads in the same
+process accessing the transfer buffer during the operation.
+</p>
+
+<p>
+In general it is desirable for directory iteration to be stable; that
+is, opening a directory and reading it should yield a consistent
+snapshot of the directory state. Implementing this is a nuisance in
+general, and is worse in OS/161 since the system call we have can only
+return one name at a time. Therefore, it isn't required by default.
+(However, always check your course materials for the official word,
+just in case.)
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>getdirentry</tt> returns the length of the name
+transferred.  On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+
+<table width=90%>
+<tr><td width=5% rowspan=4>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>fd</em> is not a valid file
+				handle.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td><em>fd</em> does not refer to a
+				directory.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>buf</em> points to an invalid
+				address.</td></tr>
+</table>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/getpid.html b/build/install/man/syscall/getpid.html
new file mode 100644
index 0000000..77f7aa0
--- /dev/null
+++ b/build/install/man/syscall/getpid.html
@@ -0,0 +1,67 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>getpid</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>getpid</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+getpid - get process id
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>pid_t</tt><br>
+<tt>getpid(void);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>getpid</tt> returns the process id of the current process.
+</p>
+
+<h3>Errors</h3>
+<p>
+<tt>getpid</tt> does not fail.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/index.html b/build/install/man/syscall/index.html
new file mode 100644
index 0000000..9a6325e
--- /dev/null
+++ b/build/install/man/syscall/index.html
@@ -0,0 +1,91 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 System calls</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 System calls</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../testbin>Test binaries</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=errno.html>errno</A> - error code reporting
+</ul>
+
+<ul>
+<li> <A HREF=_exit.html>_exit</A> - terminate process
+<li> <A HREF=chdir.html>chdir</A> - change current directory
+<li> <A HREF=close.html>close</A> - close file
+<li> <A HREF=dup2.html>dup2</A> - clone file handles
+<li> <A HREF=execv.html>execv</A> - execute a program
+<li> <A HREF=fork.html>fork</A> - copy the current process
+<li> <A HREF=fstat.html>fstat</A> - get file state information
+<li> <A HREF=fsync.html>fsync</A> - flush filesystem data for a
+   specific file to disk
+<li> <A HREF=ftruncate.html>ftruncate</A> - set size of a file
+<li> <A HREF=__getcwd.html>__getcwd</A> - get name of current working
+   directory (backend)
+<li> <A HREF=getdirentry.html>getdirentry</A> - read filename from directory
+<li> <A HREF=getpid.html>getpid</A> - get process id
+<li> <A HREF=ioctl.html>ioctl</A> - miscellaneous device I/O operations
+<li> <A HREF=link.html>link</A> - create hard link to a file
+<li> <A HREF=lseek.html>lseek</A> - change current position in file
+<li> <A HREF=lstat.html>lstat</A> - get file state information
+<li> <A HREF=mkdir.html>mkdir</A> - create directory
+<li> <A HREF=open.html>open</A> - open a file
+<li> <A HREF=pipe.html>pipe</A> - create pipe object
+<li> <A HREF=read.html>read</A> - read data from file
+<li> <A HREF=readlink.html>readlink</A> - fetch symbolic link contents
+<li> <A HREF=reboot.html>reboot</A> - reboot or halt system
+<li> <A HREF=remove.html>remove</A> - delete (unlink) a file
+<li> <A HREF=rename.html>rename</A> - rename or move a file
+<li> <A HREF=rmdir.html>rmdir</A> - remove directory
+<li> <A HREF=sbrk.html>sbrk</A> - set process break (allocate memory)
+<li> <A HREF=stat.html>stat</A> - get file state information
+<li> <A HREF=symlink.html>symlink</A> - create symbolic link
+<li> <A HREF=sync.html>sync</A> - flush filesystem data to disk
+<li> <A HREF=__time.html>__time</A> - get time of day
+<li> <A HREF=waitpid.html>waitpid</A> - wait for a process to exit
+<li> <A HREF=write.html>write</A> - write data to file
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/ioctl.html b/build/install/man/syscall/ioctl.html
new file mode 100644
index 0000000..a23b8b4
--- /dev/null
+++ b/build/install/man/syscall/ioctl.html
@@ -0,0 +1,106 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>ioctl</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>ioctl</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+ioctl - miscellaneous device I/O operations
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;sys/ioctl.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>ioctl(int </tt><em>fd</em><tt>, int </tt><em>code</em><tt>,
+void *</tt><em>data</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>ioctl</tt> performs an object-specific operation <em>code</em> on
+the object referred to by the file handle <em>fd</em>. The
+<em>data</em> argument may point to supplemental data required or
+returned by the operation. The size of buffer required, if any, and
+other such matters are operation-specific.
+</p>
+
+<p>
+Traditionally, ioctl is a catchall function for performing operations
+that don't fit neatly into any other model.
+</p>
+
+<p>
+The ioctl codes are defined in &lt;kern/ioctl.h&gt;, which should be
+included via &lt;sys/ioctl.h&gt; by user-level code. As of this
+writing, the base OS/161 system defines no ioctls. However, it may
+prove useful to implement some, particularly in connection with some
+less conventional possible projects.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>ioctl</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>fd</em> was not a valid file
+				handle.</td></tr>
+<tr><td valign=top>EIOCTL</td>	<td><em>code</em> was an invalid ioctl for the
+				object referenced.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>data</em> was required by the
+				operation requested, but was an
+				invalid pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/link.html b/build/install/man/syscall/link.html
new file mode 100644
index 0000000..dc87376
--- /dev/null
+++ b/build/install/man/syscall/link.html
@@ -0,0 +1,106 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>link</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>link</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+link - create hard link to a file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>link(const char *</tt><em>oldname</em><tt>,
+const char *</tt><em>newname</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>link</tt> creates a new name, <em>newname</em>, for the file
+referred to by <em>oldname</em>. Henceforth, both names are equally
+valid ways to refer to the same file. The file is only deleted when
+all names are removed. This is a "hard link".
+</p>
+
+<p>
+The creation of the new name is atomic. The two names must be on the
+same filesystem. Directories may not be hard-linked.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>link</tt> returns 0. On error, -1 is returned, and <A
+HREF=errno.html>errno</A> is set according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=11>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of one of the names did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of one of the names
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>A non-final component of <em>newname</em>
+				did not exist.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td><em>oldname</em> does not exist.</td></tr>
+<tr><td valign=top>EEXIST</td>	<td><em>newname</em> already exists.</td></tr>
+<tr><td valign=top>EISDIR</td>	<td><em>oldname</em> is a directory.</td></tr>
+<tr><td valign=top>EXDEV</td>	<td>The two names are on different
+				filesystems.</td></tr>
+<tr><td valign=top>EMLINK</td>	<td>There are already too many links to
+				<em>oldname</em>.</td></tr>
+<tr><td valign=top>ENOSPC</td>	<td>The filesystem involved is full.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td>One of the arguments was an
+				invalid pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/lseek.html b/build/install/man/syscall/lseek.html
new file mode 100644
index 0000000..0c3c407
--- /dev/null
+++ b/build/install/man/syscall/lseek.html
@@ -0,0 +1,135 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lseek</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lseek</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lseek - change current position in file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>off_t</tt><br>
+<tt>lseek(int </tt><em>fd</em><tt>, off_t </tt><em>pos</em><tt>,
+int </tt><em>whence</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>lseek</tt> alters the current seek position of the file handle
+<em>filehandle</em>, seeking to a new position based on <em>pos</em>
+and <em>whence</em>.
+</p>
+
+<p>
+If <em>whence</em> is
+<ul>
+<li> SEEK_SET, the new position is <em>pos</em>.
+<li> SEEK_CUR, the new position is the current position plus <em>pos</em>.
+<li> SEEK_END, the new position is the position of end-of-file
+	plus <em>pos</em>.
+<li> anything else, lseek fails.
+</ul>
+Note that <em>pos</em> is a signed quantity.
+</p>
+
+<p>
+It is not meaningful to seek on certain objects, such as the console
+device. All seeks on these objects fail.
+</p>
+
+<p>
+Seek positions less than zero are invalid. Seek positions beyond EOF
+are legal, at least on regular files.
+</p>
+
+<p>
+As discussed under <A HREF=getdirentry.html>getdirentry</A>, seek
+positions on directories are defined by the file system and should not
+be interpreted.
+</p>
+
+<p>
+Note that each distinct open of a file should have an independent seek
+pointer.
+</p>
+
+<p>
+<tt>lseek</tt> (like all system calls) should be atomic. In this case
+this means that multiple threads or processes sharing the same seek
+pointer should be able to update it without seeing or generating
+invalid intermediate states. There is no provision for making pairs of
+<tt>lseek</tt> and <tt>read</tt> or <tt>write</tt> calls atomic.  The
+<tt>pread</tt> and <tt>pwrite</tt> calls in Unix were invented to
+address this issue. (These are not in OS/161 by default but are easy
+to implement.)
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>lseek</tt> returns the new position. On error, -1 is
+returned, and <A HREF=errno.html>errno</A> is set according to the
+error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=4>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+				<td><em>fd</em> is not a valid file
+				handle.</td></tr>
+<tr><td valign=top>ESPIPE</td>	<td><em>fd</em> refers to an object
+				which does not support seeking.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td><em>whence</em> is invalid.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td>The resulting seek position would
+				be negative.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/lstat.html b/build/install/man/syscall/lstat.html
new file mode 100644
index 0000000..6cb7377
--- /dev/null
+++ b/build/install/man/syscall/lstat.html
@@ -0,0 +1,112 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>lstat</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>lstat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+lstat - get file state information
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;sys/stat.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>lstat(const char *</tt><em>pathname</em><tt>,
+struct stat *</tt><em>statbuf</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+lstat retrieves status information about the file referred to by
+<em>pathname</em> and stores it in the stat structure pointed to
+by <em>statbuf</em>.
+</p>
+
+<p>
+If <em>pathname</em> refers to a symbolic link, information about the
+link is retrieved rather than about the object the link points to.
+</p>
+
+<p>
+The call (like all system calls) should be atomic; that is, the
+information retrieved should come from a single point in time.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, lstat returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=5>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+			<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>
+			<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>
+			<td>The named file does not exist.</td></tr>
+<tr><td valign=top>EIO</td>
+			<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>
+			<td><em>statbuf</em> points to an invalid
+			address.</td></tr>
+</table>
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=fstat.html>fstat</A>,
+<A HREF=stat.html>stat</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/mkdir.html b/build/install/man/syscall/mkdir.html
new file mode 100644
index 0000000..262ce4c
--- /dev/null
+++ b/build/install/man/syscall/mkdir.html
@@ -0,0 +1,106 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>mkdir</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>mkdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+mkdir - create directory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;sys/stat.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>mkdir(const char *</tt><em>pathname</em><tt>,
+mode_t </tt><em>mode</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>mkdir</tt> creates a directory named <em>name</em>, where
+<em>name</em> is the last filename component in <em>pathname</em>. All
+the directories named in the prefix portion of <em>pathname</em> must
+exist and must in fact be directories, not ordinary files. The name
+<em>name</em> must not already exist. The new directory must be
+created atomically.
+</p>
+
+<p>
+The <em>mode</em> argument gives the file permissions to use and can
+be ignored in OS/161.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>mkdir</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=8>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>pathname</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>A non-final component of <em>pathname</em>
+				did not exist.</td></tr>
+<tr><td valign=top>EEXIST</td>	<td>An object by the name <em>pathname</em>
+				already exists.</td></tr>
+<tr><td valign=top>ENOSPC</td>	<td>The filesystem the directory was to be
+				created on is full.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>pathname</em> was an invalid
+				pointer.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td><em>mode</em> was invalid.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/open.html b/build/install/man/syscall/open.html
new file mode 100644
index 0000000..7abc154
--- /dev/null
+++ b/build/install/man/syscall/open.html
@@ -0,0 +1,176 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>open</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>open</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+open - open a file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<tt>#include &lt;fcntl.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>open(const char *</tt><em>filename</em><tt>,
+int </tt><em>flags</em><tt>);</tt><br>
+<tt>int</tt><br>
+<tt>open(const char *</tt><em>filename</em><tt>, int </tt><em>flags</em><tt>,
+mode_t </tt><em>mode</em><tt>);</tt><br>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>open</tt> opens the file, device, or other kernel object named by
+the pathname <em>filename</em>. The <em>flags</em> argument specifies
+how to open the file. The optional <em>mode</em> argument provides the
+file permissions to use and is only meaningful in Unix, or if you
+choose to implement Unix-style security later on. it can be ignored in
+OS/161.
+</p>
+
+<p>
+The flags argument should consist of one of
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=30%>O_RDONLY</td>	<td>Open for reading only.</td></tr>
+<tr><td>O_WRONLY</td>		<td>Open for writing only.</td></tr>
+<tr><td>O_RDWR</td>		<td>Open for reading and writing.</td></tr>
+</table>
+</p>
+
+<p>
+It may also have any of the following flags OR'd in:
+<table width=90%>
+<tr><td width=5% rowspan=4>&nbsp;</td>
+    <td width=20%>O_CREAT</td>
+			<td>Create the file if it doesn't exist.</td></tr>
+<tr><td>O_EXCL</td>	<td>Fail if the file already exists.</td></tr>
+<tr><td>O_TRUNC</td>	<td>Truncate the file to length 0 upon open.</td></tr>
+<tr><td>O_APPEND</td>	<td>Open the file in append mode.</td></tr>
+</table>
+O_EXCL is only meaningful if O_CREAT is also used.
+</p>
+
+<p>
+O_APPEND causes all writes to the file to occur at the end of file, no
+matter what gets written to the file by whoever else, including
+concurrently. (This functionality may be optional; consult your
+course's assignments.)
+</p>
+
+<p>
+<tt>open</tt> returns a file handle suitable for passing to
+<A HREF=read.html>read</A>,
+<A HREF=write.html>write</A>,
+<A HREF=close.html>close</A>,
+etc. This file handle must be greater than or equal to zero.  Note
+that file handles 0 (STDIN_FILENO), 1 (STDOUT_FILENO), and 2
+(STDERR_FILENO) are used in special ways and are typically assumed by
+user-level code to always be open.
+</p>
+
+<p>
+If you are implementing symbolic links, there are some additional
+points to take note of. If <em>filename</em> refers to a symbolic
+link, that link does not point to an existing object, and O_CREAT is
+specified, a new file is created <i>at the name the link points
+to</i>. However, if in this case both O_CREAT and O_EXCL are
+specified, <tt>open</tt> fails with EEXIST. These semantics are a
+nuisance to implement but important for correct functioning.
+</p>
+
+<p>
+<tt>open</tt> (like all system calls) should be atomic. It is
+important for the handling of O_EXCL in the destination directory to
+be atomic. Note, however, that in practice looking up directories that
+contain <tt>..</tt> is usually not quite atomic.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>open</tt> returns a nonnegative file handle. On error,
+-1 is returned, and <A HREF=errno.html>errno</A> is set according to
+the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=15>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>filename</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>A non-final component of <em>filename</em>
+				did not exist.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>The named file does not exist, and O_CREAT
+				was not specified.</td></tr>
+<tr><td valign=top>EEXIST</td>	<td>The named file exists, and O_EXCL was
+				specified.</td></tr>
+<tr><td valign=top>EISDIR</td>	<td>The named object is a directory, and it
+				was to be opened for writing.</td></tr>
+<tr><td valign=top>EMFILE</td>	<td>The process's file table was full, or a
+				process-specific limit on open files
+				was reached.</td></tr>
+<tr><td valign=top>ENFILE</td>	<td>The system file table is full, if such a
+				thing exists, or a system-wide limit
+				on open files was reached.</td></tr>
+<tr><td valign=top>ENXIO</td>	<td>The named object is a block device with no
+				filesystem mounted on it.</td></tr>
+<tr><td valign=top>ENOSPC</td>	<td>The file was to be created, and the
+				filesystem involved is full.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td><em>flags</em> contained invalid
+				values.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>filename</em> was an invalid
+				pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/pipe.html b/build/install/man/syscall/pipe.html
new file mode 100644
index 0000000..ace022b
--- /dev/null
+++ b/build/install/man/syscall/pipe.html
@@ -0,0 +1,120 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>pipe</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>pipe</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+pipe - create pipe object
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>pipe(int *</tt><em>fds</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The <tt>pipe</tt> call creates an anonymous pipe object in the system,
+and binds it to two file handles in the current process, one for the
+read end and one for the write end. (Pipes are unidirectional.)
+</p>
+
+<p>
+Data written on the write end may be read from the read end. Once all
+references to the write end are closed, and all remaining data is
+read, further reads return EOF. If all references to the read end are
+closed before the write end is closed, further writes generate EPIPE.
+The pipe object itself is destroyed when all references to both ends
+are closed.
+</p>
+
+<p>
+<em>fds</em> is a pointer to space for two integers. A file handle for
+the read end of the pipe is stored in <em>fds</em>[0], and a file
+handle for the write end is stored in <em>fds</em>[1].
+</p>
+
+<p>
+<tt>pipe</tt> is most often used in conjunction with <A
+HREF=dup2.html>dup2</A> and <A HREF=fork.html>fork</A> to send the
+standard output of one process to the standard input of another.
+</p>
+
+<p>
+In POSIX, pipe I/O of data blocks smaller than a standard constant
+PIPE_BUF is guaranteed to be atomic. If you implement pipes, you need
+not necessarily implement POSIX semantics, but you should decide what
+sort of atomicity guarantees you wish to make and specify them
+carefully.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, pipe returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EMFILE</td>
+				<td>The process's file table was full, or a
+				process-specific limit on open files
+				was reached.</td></tr>
+<tr><td valign=top>ENFILE</td>	<td>The system file table is full, if such a
+				thing exists, or a system-wide limit
+				on open files was reached.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>fds</em> was an invalid
+				pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/read.html b/build/install/man/syscall/read.html
new file mode 100644
index 0000000..e605841
--- /dev/null
+++ b/build/install/man/syscall/read.html
@@ -0,0 +1,115 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>read</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>read</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+read - read data from file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>ssize_t</tt><br>
+<tt>read(int </tt><em>fd</em><tt>, void *</tt><em>buf</em><tt>,
+size_t </tt><em>buflen</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>read</tt> reads up to <em>buflen</em> bytes from the file
+specified by <em>fd</em>, at the location in the file specified by the
+current seek position of the file, and stores them in the space
+pointed to by <em>buf</em>. The file must be open for reading.
+</p>
+
+<p>
+The current seek position of the file is advanced by the number of
+bytes read.
+</p>
+
+<p>
+Each read (or <A HREF=write.html>write</A>) operation is atomic
+relative to other I/O to the same file.
+Note that the kernel is not obliged to (and generally cannot) make the
+read atomic with respect to other threads in the same process
+accessing the I/O buffer during the read.
+</p>
+
+<h3>Return Values</h3>
+<p>
+The count of bytes read is returned. This count should be
+positive. A return value of 0 should be construed as signifying
+end-of-file. On error, <tt>read</tt> returns -1 and sets
+<A HREF=errno.html>errno</A> to a suitable error code for the error
+condition encountered.
+</p>
+
+<p>
+Note that in some cases, particularly on devices, fewer than
+<em>buflen</em> (but greater than zero) bytes may be returned. This
+depends on circumstances and does not necessarily signify
+end-of-file.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+			<td><em>fd</em> is not a valid file descriptor, or was
+			not opened for reading.</td></tr>
+<tr><td valign=top>EFAULT</td>
+			<td>Part or all of the address space pointed to by
+			<em>buf</em> is invalid.</td></tr>
+<tr><td valign=top>EIO</td>
+			<td>A hardware I/O error occurred reading the
+			data.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/readlink.html b/build/install/man/syscall/readlink.html
new file mode 100644
index 0000000..bb3cd31
--- /dev/null
+++ b/build/install/man/syscall/readlink.html
@@ -0,0 +1,104 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>readlink</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>readlink</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+readlink - fetch symbolic link contents
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>readlink(const char *</tt><em>path</em><tt>, char *</tt><em>buf</em><tt>,
+size_t </tt><em>len</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>readlink</tt> retrieves the contents of the symbolic link named by
+<em>path</em> and places them in the buffer <em>buf</em>. At most
+<em>len</em> bytes are written.
+</p>
+
+<p>
+<tt>readlink</tt> does not include a null terminator in <em>buf</em>.
+</p>
+
+<p>
+The call (like all system calls) should be atomic.
+Note that the kernel is not obliged to (and generally cannot) make the
+read atomic with respect to other threads in the same process
+accessing the buffer during the operation.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>readlink</tt> returns the number of characters transferred. If an
+error occurs, -1 is returned, and <A HREF=errno.html>errno</A> is set
+according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=6>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>path</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>The named file does not exist.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td>The named file is not a symlink.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>buf</em> or <em>path</em> points to an
+				invalid address.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/reboot.html b/build/install/man/syscall/reboot.html
new file mode 100644
index 0000000..611640d
--- /dev/null
+++ b/build/install/man/syscall/reboot.html
@@ -0,0 +1,93 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>reboot</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>reboot</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+reboot - reboot or halt system
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>reboot(int </tt><em>code</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>reboot</tt> reboots or shuts down the system. The specific action
+depends on the <em>code</em> passed:
+<table width=90%>
+<tr><td width=5% rowspan=3>&nbsp;</td>
+    <td width=15%>RB_REBOOT</td>   <td>The system is rebooted.</td></tr>
+<tr><td width=15%>RB_HALT</td>	   <td>The system is halted.</td></tr>
+<tr><td width=15%>RB_POWEROFF</td> <td>The system is powered off.</td></tr>
+</table>
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, reboot does not return. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=2>&nbsp;</td>
+    <td width=10% valign=top>EINVAL</td>
+				<td><em>code</em> was not a valid
+				value.</td></tr>
+<tr><td valign=top>EPERM</td>	<td>The current process does not have
+				sufficient privilege to halt the
+				system.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/remove.html b/build/install/man/syscall/remove.html
new file mode 100644
index 0000000..3e7cc37
--- /dev/null
+++ b/build/install/man/syscall/remove.html
@@ -0,0 +1,107 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>remove</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>remove</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+remove - delete (unlink) a file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>remove(const char *</tt><em>pathname</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The name of the file referred to by <em>pathname</em> is removed from
+the filesystem. The actual file itself is not removed until no further
+references to it exist, whether those references are on disk or in
+memory.
+</p>
+
+<p>
+It is an error for <em>pathname</em> to not specify an existing file
+or to refer to a directory.
+</p>
+
+<p>
+The call (like all system calls) should be atomic. Other processes
+should not be able to see a half-removed file. If implementing a
+recoverable filesystem, recovery must yield a volume where the
+<tt>remove</tt> either has been fully completed or has not been done
+at all.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>remove</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=6>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>EISDIR</td>	<td><em>pathname</em> referred to a
+				directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>The target file did not exist.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>pathname</em> was an invalid
+				pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/rename.html b/build/install/man/syscall/rename.html
new file mode 100644
index 0000000..6c4277f
--- /dev/null
+++ b/build/install/man/syscall/rename.html
@@ -0,0 +1,155 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rename</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rename</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rename - rename or move a file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>rename(const char *</tt><em>oldname</em><tt>,
+const char *</tt><em>newname</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The file (or other object) referenced by <em>oldname</em> is given the
+name <em>newname</em>, and the name <em>oldname</em> is removed. If
+<em>newname</em> already exists, it is removed as well. (The semantics
+for removing files and directories described under
+<A HREF=remove.html>remove</A> and <A HREF=rmdir.html>rmdir</A>
+must be honored.)
+</p>
+
+<p>
+If <em>newname</em> exists, it must be a directory if and only if
+<em>oldname</em> also is.
+</p>
+
+<p>
+If components of the path prefix of <em>newname</em> do not exist or
+are not directories, rename fails. Additionally, <em>oldname</em> and
+<em>newname</em> must refer to names on the same filesystem.
+</p>
+
+<p>
+If <em>oldname</em> and <em>newname</em> are the same file, rename
+succeeds and the state of the filesystem is not altered. This is true
+even if they are not in the same directory. (POSIX says so. This is
+widely considered a bug in POSIX.)
+</p>
+
+<p>
+Rename must be atomic; no other process on the system should be able
+to see the filesystem in a state where both (or neither)
+<em>oldname</em> and <em>newname</em> name the file. Additionally, if
+the system crashes, at least one name for the file must remain.
+(If you are implementing a file system with crash recovery, a crash
+during rename must, after recovery, produce a volume where the rename
+has either occurred or not occurred; no intermediate states may be
+exposed.)
+</p>
+
+<p>
+If <em>oldname</em> is a directory, <em>newname</em> must not refer to
+a subdirectory of <em>oldname</em>, as this would create a (detached)
+cycle in the directory tree.
+</p>
+
+<p>
+Renaming (or overwriting) the <tt>.</tt> or <tt>..</tt> entries in
+directories is prohibited.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>rename</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=13>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of one of the names did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of one of the names
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>A non-final component of <em>newname</em>
+				did not exist.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td><em>oldname</em> does not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td><em>oldname</em> is a directory, and
+				<em>newname</em> is not.</td></tr>
+<tr><td valign=top>EISDIR</td>	<td><em>oldname</em> is not a directory, and
+				<em>newname</em> is.</td></tr>
+<tr><td valign=top>ENOTEMPTY</td><td><em>newname</em> is a directory, and it is
+				not empty.</td>
+<tr><td valign=top>EXDEV</td>	<td>The two names are on different
+				filesystems.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td><em>newname</em> is a subdirectory of
+				<em>oldname</em>.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td>An attempt was made to rename a
+				<tt>.</tt> or <tt>..</tt> entry.</td></tr>
+<tr><td valign=top>ENOSPC</td>	<td>The filesystem involved is full.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td>One of the arguments was an
+				invalid pointer.</td></tr>
+</table>
+</p>
+
+<p>
+As with rmdir, attempts to rename with <em>newname</em> equal to
+<tt>..</tt> may generate either EINVAL or ENOTEMPTY.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/rmdir.html b/build/install/man/syscall/rmdir.html
new file mode 100644
index 0000000..3ef5e58
--- /dev/null
+++ b/build/install/man/syscall/rmdir.html
@@ -0,0 +1,133 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rmdir</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rmdir</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rmdir - remove directory
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>rmdir(const char *</tt><em>pathname</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>rmdir</tt> removes the directory named by <em>pathname</em>. The directory
+(and all the components in its path prefix) must exist. The directory
+must be empty, except for the <tt>.</tt> and <tt>..</tt> entries, and
+may not be the root directory of the filesystem.
+</p>
+
+<p>
+It is invalid to attempt to remove the <tt>.</tt> or <tt>..</tt>
+entries in a directory. What rmdir actually removes is a name in some
+(other, containing) directory; removing the <tt>.</tt> or <tt>..</tt>
+<i>names</i> would make a mess. It is not invalid for a process to
+remove its own current directory, but it does not work to do so by
+calling <tt>rmdir(".")</tt>.
+</p>
+
+<p>
+It is impossible in any event to remove a directory named with
+<tt>..</tt>, because it is impossible to name a directory with
+<tt>..</tt> unless it is not empty.
+</p>
+
+<p>
+If a directory is in use (e.g. being read by <tt>ls</tt>, or is some
+process's current directory, etc.) when it is removed, all further
+accesses to it should be rejected (with ENOENT). Like a file deleted
+while in use, it should only be fully removed when all remaining
+references to it are dropped.
+</p>
+
+<p>
+The removal must be atomic, both with respect to other running
+processes, and (if implementing a recoverable file system) with
+respect to crash recovery.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>rmdir</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other errors not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=8>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td><em>pathname</em> referred to an
+				object that was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>The target directory did not
+				exist.</td></tr>
+<tr><td valign=top>EINVAL</td>	<td>An attempt was made to remove a
+				<tt>.</tt> or <tt>..</tt> entry.</td></tr>
+<tr><td valign=top>ENOTEMPTY</td><td>The target directory was not
+				empty.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>pathname</em> was an invalid
+				pointer.</td></tr>
+</table>
+</p>
+
+<p>
+Attempts to remove <tt>..</tt> may generate either EINVAL or
+ENOTEMPTY.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/sbrk.html b/build/install/man/syscall/sbrk.html
new file mode 100644
index 0000000..57c3a53
--- /dev/null
+++ b/build/install/man/syscall/sbrk.html
@@ -0,0 +1,144 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sbrk</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sbrk</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sbrk - set process break (allocate memory)
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>void *</tt><br>
+<tt>sbrk(intptr_t </tt><em>amount</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The "break" is the end address of a process's heap region. The
+<tt>sbrk</tt> call adjusts the "break" by the amount <em>amount</em>.
+It returns the old "break". Thus, to determine the current "break",
+call <tt>sbrk(0)</tt>.
+</p>
+
+<p>
+The heap region is initially empty, so at process startup, the
+beginning of the heap region is the same as the end and may thus be
+retrieved using sbrk(0).
+</p>
+
+<p>
+In OS/161, the initial "break" must be page-aligned, and <tt>sbrk</tt>
+only need support values of <em>amount</em> that result in
+page-aligned "break" addresses. Other values of <em>amount</em> may be
+rejected. This may simplify the implementation. You may place the
+heap wherever you like in a process's address space (though obviously
+not on top of something else) and it need not appear at the same
+location in every process.
+</p>
+
+<p>
+Traditionally, the initial "break" is specifically defined to be the
+end of the BSS (uninitialized data) region, and traditionally any
+<em>amount</em>, page-aligned or not, may legally be used with
+<tt>sbrk</tt>.
+</p>
+
+<p>
+Ordinarily, user-level code should call
+<A HREF=../libc/malloc.html>malloc</A> for memory allocation. The
+<tt>sbrk</tt> interface is intended only to be the back-end interface
+for <tt>malloc</tt>. Mixing calls to <tt>malloc</tt> and <tt>sbrk</tt>
+will likely confuse <tt>malloc</tt> and produces undefined behavior.
+</p>
+
+<p>
+While one can lower the "break" by passing negative values of
+<em>amount</em>, one may not set the end of the heap to an address
+lower than the beginning of the heap. Attempts to do so must be
+rejected.
+</p>
+
+<p>
+The call (like all system calls) should be atomic. In this case, that
+means that if you have a multithreaded process, simultaneous calls to
+<tt>sbrk</tt> from different threads should not interfere with each
+other and should update the "break" state atomically.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>sbrk</tt> returns the previous value of the "break".
+On error, ((void *)-1) is returned, and <A HREF=errno.html>errno</A>
+is set according to the error encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=2>&nbsp;</td>
+    <td with=10% valign=top>ENOMEM</td>
+			<td>Sufficient virtual memory to satisfy the
+				request was not available, or the
+				process has reached the limit of the
+				memory it is allowed to allocate.</td></tr>
+<tr><td valign=top>EINVAL</td>
+			<td>The request would move the "break" below
+				its initial value.</td></tr>
+</table>
+</p>
+
+<h3>Restrictions</h3>
+<p>
+While you can return pages that happen to be at the end of the heap to
+the system, there is no way to use the <tt>sbrk</tt> interface to
+return unused pages in the middle of the heap. If you wish to do this,
+you will need to design a new or supplemental interface.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/stat.html b/build/install/man/syscall/stat.html
new file mode 100644
index 0000000..3800455
--- /dev/null
+++ b/build/install/man/syscall/stat.html
@@ -0,0 +1,103 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>stat</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>stat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+stat - get file state information
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;sys/stat.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>stat(const char *</tt><em>pathname</em><tt>,
+struct stat *</tt><em>statbuf</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>stat</tt> retrieves status information about the file referred to
+by <em>pathname</em> and stores it in the stat structure pointed to by
+<em>statbuf</em>.
+</p>
+
+<p>
+The call (like all system calls) should be atomic; that is, the
+information retrieved should come from a single point in time.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>stat</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=5>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>pathname</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>The named file does not exist.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>statbuf</em> points to an invalid
+				address.</td></tr>
+</table>
+</p>
+
+<h3>See Also</h3>
+<p>
+<A HREF=fstat.html>fstat</A>,
+<A HREF=lstat.html>lstat</A>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/symlink.html b/build/install/man/syscall/symlink.html
new file mode 100644
index 0000000..5de10d0
--- /dev/null
+++ b/build/install/man/syscall/symlink.html
@@ -0,0 +1,107 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>symlink</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>symlink</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+symlink - create symbolic link
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>int</tt><br>
+<tt>symlink(const char *</tt><em>oldname</em><tt>,
+const char *</tt><em>linkname</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>symlink</tt> creates a symbolic link. The symlink itself is named
+<em>linkname</em>, and it points to <em>oldname</em>.
+</p>
+
+<p>
+<em>oldname</em> need not exist or be on the same filesystem.
+</p>
+
+<p>
+The call (like all system calls) must be atomic; that is, the symlink
+should either be created or not created, and no other process should
+see an intermediate state (such as, for example, a blank symlink whose
+name hasn't been written out yet...) For recoverable file systems,
+this includes after crash recovery.
+</p>
+
+<h3>Return Values</h3>
+<p>
+On success, <tt>symlink</tt> returns 0. On error, -1 is returned, and
+<A HREF=errno.html>errno</A> is set according to the error
+encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=7>&nbsp;</td>
+    <td width=10% valign=top>ENODEV</td>
+				<td>The device prefix of <em>filename</em> did
+				not exist.</td></tr>
+<tr><td valign=top>ENOTDIR</td>	<td>A non-final component of <em>linkname</em>
+				was not a directory.</td></tr>
+<tr><td valign=top>ENOENT</td>	<td>A non-final component of <em>linkname</em>
+				did not exist.</td></tr>
+<tr><td valign=top>EEXIST</td>	<td><em>linkname</em> already exists.</td></tr>
+<tr><td valign=top>ENOSPC</td>	<td>The filesystem that was to hold the link
+				is full.</td></tr>
+<tr><td valign=top>EIO</td>	<td>A hard I/O error occurred.</td></tr>
+<tr><td valign=top>EFAULT</td>	<td><em>linkname</em> or <em>oldname</em> was
+				an invalid pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/sync.html b/build/install/man/syscall/sync.html
new file mode 100644
index 0000000..fb26d66
--- /dev/null
+++ b/build/install/man/syscall/sync.html
@@ -0,0 +1,73 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sync</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sync</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sync - flush filesystem data to disk
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>void</tt><br>
+<tt>sync(void);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+The <tt>sync</tt> function forces a write of all dirty filesystem
+buffers and dirty filesystem state to disk.
+</p>
+
+<h3>Return Values</h3>
+<p>
+No value is returned, and <tt>sync</tt> does not fail.
+</p>
+
+<h3>Errors</h3>
+<p>
+None.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/waitpid.html b/build/install/man/syscall/waitpid.html
new file mode 100644
index 0000000..18d2a6b
--- /dev/null
+++ b/build/install/man/syscall/waitpid.html
@@ -0,0 +1,204 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>waitpid</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>waitpid</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+waitpid - wait for a process to exit
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;sys/wait.h&gt;</tt><br>
+<br>
+<tt>pid_t</tt><br>
+<tt>waitpid(pid_t </tt><em>pid</em><tt>, int *</tt><em>status</em><tt>,
+int </tt><em>options</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+Wait for the process specified by <em>pid</em> to exit, and return an
+encoded exit status in the integer pointed to by <em>status</em>. If
+that process has exited already, <tt>waitpid</tt> returns
+immediately. If that process does not exist, <tt>waitpid</tt> fails.
+</p>
+
+<p>
+It is explicitly allowed for <em>status</em> to be <tt>NULL</tt>, in
+which case waitpid operates normally but the status value is not
+produced.
+</p>
+
+<p>
+A process moves from "has exited already" to "does not exist" when
+every process that is expected to collect its exit status with
+<tt>waitpid</tt> has done so.
+</p>
+
+<p>
+In the standard Unix model of processes, the only process that is
+expected to collect another process's exit status is its parent.
+(If you feel this is restrictive, you might try to extend the model or
+define a new one; however, this is not recommended. The only other
+model that really makes much sense is to let any process wait for any
+other process; but then you need to check for and reject combinations
+that would cause deadlock.)
+</p>
+
+<p>
+There are several semi-standard and messy/ugly ways in Unix for a
+process to indicate that it doesn't want to collect the exit status of
+a child it forks and therefore shouldn't be expected to. You do not
+need to implement any of these, but you might find it convenient for
+your own purposes to provide this functionality.
+</p>
+
+<p>
+If a parent process exits before one or more of its children, it can
+no longer be expected collect their exit status. There are several
+ways to handle this case in practice, of which the traditional Unix
+method is only one. This is something you should design.
+</p>
+
+<p>
+The <em>options</em> argument should be 0. You are not required to
+implement any options. (However, your system should check to make sure
+that requests for options you do not support are rejected.)
+</p>
+
+<p>
+If you desire, you may implement the Unix option WNOHANG; this causes
+waitpid, when called for a process that has not yet exited, to return
+0 immediately instead of waiting.
+</p>
+
+<p>
+The Unix option WUNTRACED, to ask for reporting of processes that stop
+as well as exit, is also defined in the header files, but implementing
+this feature is not required or necessary unless you are implementing
+job control.
+</p>
+
+<p>
+You may also make up your own options if you find them helpful.
+However, please, document anything you make up.
+</p>
+
+<p>
+The encoding of the exit status is comparable to Unix and is defined
+by the flags found in &lt;kern/wait.h&gt;. (Userlevel code should
+include &lt;sys/wait.h&gt; to get these definitions.) A process can
+exit by calling <A HREF=_exit.html>_exit()</A> or it can exit by
+receiving a fatal signal. In the former case the
+<tt>_MKWAIT_EXIT()</tt> macro should be used with the user-supplied
+exit code value to prepare the exit status; in the latter, the
+<tt>_MKWAIT_SIG()</tt> macro (or <tt>_MKWAIT_CORE()</tt> if a core
+file was generated) should be used with the signal number. The result
+encoding also allows notification of processes that have stopped; this
+would be used in connection with job control and with
+<tt>ptrace</tt>-based debugging if you were to implement those things.
+</p>
+
+<p>
+The <tt>_MKWAIT</tt> flags are not standard and should be considered
+part of the implementation.
+</p>
+
+<p>
+To <em>read</em> the wait status, use the macros <tt>WIFEXITED()</tt>,
+<tt>WIFSIGNALED()</tt>, and/or <tt>WIFSTOPPED()</tt> to find out what
+happened, and then <tt>WEXITSTATUS()</tt>, <tt>WTERMSIG()</tt>, or
+<tt>WSTOPSIG()</tt> respectively to get the exit code or signal
+number. If <tt>WIFSIGNALED()</tt> is true, <tt>WCOREDUMP()</tt> can be
+used to check if a core file was generated. This is the same as Unix,
+although the value encoding is different from the historic Unix
+format.
+</p>
+
+<h3>Return Values</h3>
+<p>
+<tt>waitpid</tt> returns the process id whose exit status is reported in
+<em>status</em>. In OS/161, this is always the value of <em>pid</em>.
+<p>
+
+<p>
+(In Unix, but not by default OS/161, you can wait for any of several
+processes by passing magic values of <em>pid</em>, so this return
+value can actually be useful.)
+</p>
+
+<p>
+If you implement WNOHANG, and WNOHANG is given, and the process
+specified by <em>pid</em> has not yet exited, waitpid returns 0.
+</p>
+
+<p>
+On error, -1 is returned, and <A HREF=errno.html>errno</A> is set to a
+suitable error code for the error condition encountered.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=4>&nbsp;</td>
+    <td width=10% valign=top>EINVAL</td>
+			<td>The <em>options</em> argument requested invalid or
+			unsupported options.</td></tr>
+<tr><td valign=top>ECHILD</td>
+			<td>The <em>pid</em> argument named a process
+			that was not a child of the current
+			process.</td></tr>
+<tr><td valign=top>ESRCH</td>
+			<td>The <em>pid</em> argument named a
+			nonexistent process.</td></tr>
+<tr><td valign=top>EFAULT</td>
+			<td>The <em>status</em> argument was an
+			invalid pointer.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/syscall/write.html b/build/install/man/syscall/write.html
new file mode 100644
index 0000000..aaf3736
--- /dev/null
+++ b/build/install/man/syscall/write.html
@@ -0,0 +1,120 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>write</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>write</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+write - write data to file
+</p>
+
+<h3>Library</h3>
+<p>
+Standard C Library (libc, -lc)
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>#include &lt;unistd.h&gt;</tt><br>
+<br>
+<tt>ssize_t</tt><br>
+<tt>write(int </tt><em>fd</em><tt>, const void *</tt><em>buf</em><tt>,
+size_t </tt><em>nbytes</em><tt>);</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>write</tt> writes up to <em>buflen</em> bytes to the file
+specified by <em>fd</em>, at the location in the file specified by the
+current seek position of the file, taking the data from the space
+pointed to by <em>buf</em>. The file must be open for writing.
+</p>
+
+<p>
+The current seek position of the file is advanced by the number of
+bytes written.
+</p>
+
+<p>
+Each write (or <A HREF=read.html>read</A>) operation is atomic
+relative to other I/O to the same file.
+Note that the kernel is not obliged to (and generally cannot) make the
+write atomic with respect to other threads in the same process
+accessing the I/O buffer during the write.
+</p>
+
+<h3>Return Values</h3>
+<p>
+The count of bytes written is returned. This count should be
+positive. A return value of 0 means that nothing could be written,
+but that no error occurred; this only occurs at end-of-file on
+fixed-size objects. On error, <tt>write</tt> returns -1 and sets
+<A HREF=errno.html>errno</A> to a suitable error code for the error
+condition encountered.
+</p>
+
+<p>
+Note that in some cases, particularly on devices, fewer than
+<em>buflen</em> (but greater than zero) bytes may be written. This
+depends on circumstances and does not necessarily signify
+end-of-file. In most cases, one should loop to make sure that all
+output has actually been written.
+</p>
+
+<h3>Errors</h3>
+<p>
+The following error codes should be returned under the conditions
+given. Other error codes may be returned for other cases not
+mentioned here.
+
+<table width=90%>
+<tr><td width=5% rowspan=4>&nbsp;</td>
+    <td width=10% valign=top>EBADF</td>
+			<td><em>fd</em> is not a valid file descriptor, or was
+			not opened for writing.</td></tr>
+<tr><td valign=top>EFAULT</td>
+			<td>Part or all of the address space pointed to by
+			<em>buf</em> is invalid.</td></tr>
+<tr><td valign=top>ENOSPC</td>
+			<td>There is no free space remaining on the filesystem
+			containing the file.</td></tr>
+<tr><td valign=top>EIO</td>
+			<td>A hardware I/O error occurred writing
+			the data.</td></tr>
+</table>
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/add.html b/build/install/man/testbin/add.html
new file mode 100644
index 0000000..b95e9aa
--- /dev/null
+++ b/build/install/man/testbin/add.html
@@ -0,0 +1,67 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>add</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>add</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+add - add two numbers
+</p>
+
+<h3>Synopsis</h3>
+<p>
+/testbin/add <em>n1</em> <em>n2</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>add</tt> prints the sum of the two numbers passed as arguments.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>add</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>add</tt> should work properly once the basic system calls are complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/argtest.html b/build/install/man/testbin/argtest.html
new file mode 100644
index 0000000..71b2572
--- /dev/null
+++ b/build/install/man/testbin/argtest.html
@@ -0,0 +1,68 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>argtest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>argtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+argtest - display arguments passed through execv
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/argtest <em>args</em></tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>argtest</tt> prints its arguments. This is likely to be helpful
+for testing <tt>execv</tt> during the basic system calls assignment.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>argtest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+Argument passing should work once the basic system calls are complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/badcall.html b/build/install/man/testbin/badcall.html
new file mode 100644
index 0000000..1d43dd3
--- /dev/null
+++ b/build/install/man/testbin/badcall.html
@@ -0,0 +1,101 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>badcall</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>badcall</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+badcall - make invalid system calls
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/badcall</tt> [<em>test...</em>]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>badcall</tt> contains a variety of tests for system call error
+conditions and error handling. The tests are grouped by system call;
+all available tests for a particular system call are run when that
+system call is selected.
+</p>
+
+<p>
+None of the tests should crash the system. If you kill processes when
+system calls fail with EFAULT (a valid thing to do) <tt>badcall</tt>
+itself may get killed. Otherwise, <tt>badcall</tt> should not get
+killed either.
+</p>
+
+<p>
+Tests may be selected on the command line; if so, all the tests
+selected on the command line will be run in order. If nothing is
+selected on the command line, a menu is printed and tests are prompted
+for.
+</p>
+
+<p>
+The tests for the individual syscalls are specified with the letters
+`a' through `y'. A single-digit number may also be specified; this
+tests all the system calls that are supposed to work once the
+corresponding assignment is completed. `*' may be used to test
+everything. Use `!' to quit.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>badcall</tt> can test every system call. It requires
+<A HREF=../syscall/read.html>read</A> and
+<A HREF=../syscall/write.html>write</A> itself to work properly, and
+some of the tests may use syscalls other than the ones being tested.
+</p>
+
+<p>
+At the completion of each assignment, the system should pass the tests
+for the syscalls associated with that (and previous) assignments. At
+no time should anything <tt>badcall</tt> does crash the system.
+</p>
+
+<p>
+Ideally, your course staff will have updated the copy of
+<tt>badcall</tt> you received with OS/161 to reflect the system calls
+required in each of the assignments in your course. In practice, this
+will probably not be the case. It is likely a better idea to test each
+system call explicitly than rely on the per-assignment lists.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/bigfile.html b/build/install/man/testbin/bigfile.html
new file mode 100644
index 0000000..939378e
--- /dev/null
+++ b/build/install/man/testbin/bigfile.html
@@ -0,0 +1,79 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>bigfile</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>bigfile</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+bigfile - create a large file in small chunks
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/bigfile</tt> <em>filename</em> <em>size</em><br>
+<tt>/testbin/bigfile</tt> <em>filename</em>
+		<em>size</em><tt>/</tt><em>chunksize</em><br>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>bigfile</tt> creates a file of the specified size in chunks of the
+specified chunk size.
+The default chunk size is 10, which is excessively small.
+The largest chunk size supported is 8192.
+The file size is rounded up to an integral number of chunks.
+Very small chunk sizes are not fully honored.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>bigfile</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>bigfile</tt> should run on emufs once the basic system calls are
+complete, and should run on SFS once the file system assignment is
+complete. Sufficiently small files should work on SFS even before
+that point.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/conman.html b/build/install/man/testbin/conman.html
new file mode 100644
index 0000000..a0e1698
--- /dev/null
+++ b/build/install/man/testbin/conman.html
@@ -0,0 +1,68 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>conman</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>conman</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+conman - echo typed characters
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/conman</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>conman</tt> echos characters typed on standard input until `q' is pressed.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>conman</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>conman</tt> should work once the basic system call assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/crash.html b/build/install/man/testbin/crash.html
new file mode 100644
index 0000000..59e2fa9
--- /dev/null
+++ b/build/install/man/testbin/crash.html
@@ -0,0 +1,90 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>crash</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>crash</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+crash - commit various exceptions
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/crash</tt> [<em>operation</em>]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>crash</tt> will perform any one of fourteen illegal processor
+operations, any one of which should get it killed without causing the
+whole system to crash.
+</p>
+
+<p>
+The operations are coded <tt>a</tt> through <tt>n</tt> and may be
+chosen on the command line. If no operation is chosen, a menu is
+displayed and a choice solicited.
+</p>
+
+<h3>Restrictions</h3>
+<p>
+Test <tt>f</tt>, which writes into the process's own code segment,
+will only cause a processor exception if you implement read-only code
+segments. Since this is not required, it is not required that test
+<tt>f</tt> pass.
+</p>
+
+<p>
+However, using test <tt>f</tt> must not under any circumstances
+corrupt the code in the copy of <tt>crash</tt> on disk!
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>crash</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>crash</tt> should operate properly once the basic system call
+assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/ctest.html b/build/install/man/testbin/ctest.html
new file mode 100644
index 0000000..59adbc3
--- /dev/null
+++ b/build/install/man/testbin/ctest.html
@@ -0,0 +1,80 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>ctest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>ctest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+ctest - cyclic stride-oriented VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/ctest</tt> [<em>stride</em>]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>ctest</tt> creates a 1-megabyte array of pointers and sets it up
+as a circular linked list, then traverses the linked list. The linked
+list is set up so each entry points to the one <em>stride</em> entries
+away.
+</p>
+
+<p>
+The <em>stride</em> argument should be odd, so all elements in the
+list are accessed.
+</p>
+
+<p>
+The default stride is 477.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>ctest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>ctest</tt> should function properly once the VM assignment is
+complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/dirseek.html b/build/install/man/testbin/dirseek.html
new file mode 100644
index 0000000..fc163dc
--- /dev/null
+++ b/build/install/man/testbin/dirseek.html
@@ -0,0 +1,79 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>dirseek</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>dirseek</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+dirseek - seek on directories test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/dirseek</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>dirseek</tt> creates a test directory, creates some files in it,
+and lists the directory repeatedly, seeking in a variety of ways (some
+legal, some not).
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>dirseek</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/chdir.html>chdir</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/getdirentry.html>getdirentry</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>dirseek</tt> should run (on SFS filesystems) when the file system
+assignment is complete. It will not run on emufs, because emufs does
+not support <tt>mkdir</tt> or <tt>rmdir</tt>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/dirtest.html b/build/install/man/testbin/dirtest.html
new file mode 100644
index 0000000..3f8a83d
--- /dev/null
+++ b/build/install/man/testbin/dirtest.html
@@ -0,0 +1,71 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>dirtest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>dirtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+dirtest - simple subdirectories test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/dirtest</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>dirtest</tt> creates and then removes a series of nested directories.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>dirtest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>dirtest</tt> should run (on SFS filesystems) when the file system
+assignment is complete. It will not run on emufs, because emufs does
+not support <tt>rmdir</tt>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/f_test.html b/build/install/man/testbin/f_test.html
new file mode 100644
index 0000000..ff6ef2d
--- /dev/null
+++ b/build/install/man/testbin/f_test.html
@@ -0,0 +1,92 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>f_test</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>f_test</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+f_test - basic concurrent filesystem test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/f_test</tt> [<tt>1</tt>|<tt>2</tt>|<tt>3</tt>]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>f_test</tt> consists of three tests, 1-3, that can be specified on
+the command line. If nothing is specified, all three tests are run.
+</p>
+
+<p>
+Test 1 writes a large file (a bit over 270k) and reads it back.
+</p>
+
+<p>
+Test 2 creates and removes a directory tree, rather like
+<A HREF=dirtest.html>dirtest</A>.
+</p>
+
+<p>
+Test 3 spawns three subprocesses that simultaneously read and write
+the same file.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>f_test</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>f_test</tt> should run correctly once the file system assignment
+is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/farm.html b/build/install/man/testbin/farm.html
new file mode 100644
index 0000000..3bcd7a0
--- /dev/null
+++ b/build/install/man/testbin/farm.html
@@ -0,0 +1,90 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>farm</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>farm</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+farm - run some hogs and cats
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/farm</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>farm</tt> runs three copies of <A HREF=hog.html>hog</A> and one
+copy of <A HREF=../bin/cat.html>/bin/cat</A>.
+</p>
+
+<p>
+The <tt>cat</tt> process reads and prints the file <tt>catfile</tt>,
+which you should create in advance.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>farm</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+The <tt>cat</tt> subprocess spawned by <tt>farm</tt> uses these
+additional system calls:
+<ul>
+<li><A HREF=../syscall/open.html>open</A>
+<li><A HREF=../syscall/read.html>read</A>
+<li><A HREF=../syscall/close.html>close</A>
+</ul>
+</p>
+
+<p>
+<tt>farm</tt> is only likely to be useful for testing the scheduler.
+</p>
+
+<h3>Bugs</h3>
+<p>
+<tt>farm</tt> does not wait for its child processes to finish.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/faulter.html b/build/install/man/testbin/faulter.html
new file mode 100644
index 0000000..5832429
--- /dev/null
+++ b/build/install/man/testbin/faulter.html
@@ -0,0 +1,70 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>faulter</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>faulter</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+faulter - commit address fault
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/faulter</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>faulter</tt> accesses an invalid memory address, thus crashing. It
+should be killed and not crash the entire system.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>faulter</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>faulter</tt> should work properly, that is, get killed with an
+address fault, once the basic system calls assignment is complete. It
+should continue to work once the VM system is done.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/filetest.html b/build/install/man/testbin/filetest.html
new file mode 100644
index 0000000..a320486
--- /dev/null
+++ b/build/install/man/testbin/filetest.html
@@ -0,0 +1,79 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>filetest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>filetest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+filetest - basic filesystem test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/filetest</tt> <em>filename</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>filetest</tt> tests the filesystem by opening, writing to, and
+reading from a user-specified file.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>filetest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>filetest</tt> should run correctly on SFS filesystems with the
+OS/161 system as shipped. It should continue to work once the file
+system assignment is complete.
+</p>
+
+<p>
+It will not work in full on emufs, because emufs does not support
+<tt>remove()</tt>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/forkbomb.html b/build/install/man/testbin/forkbomb.html
new file mode 100644
index 0000000..47a1835
--- /dev/null
+++ b/build/install/man/testbin/forkbomb.html
@@ -0,0 +1,96 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>forkbomb</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>forkbomb</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+forkbomb - create hundreds of processes
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/forkbomb</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>forkbomb</tt> does
+<pre>
+   while (1) fork();
+</pre>
+doing a bit of additional checking similar to that done by
+<A HREF=forktest.html>forktest</A>.
+</p>
+
+</p>
+<strong>
+DO NOT RUN THIS ON A REAL SYSTEM - IT WILL GRIND TO A HALT AND
+PEOPLE WILL COME AFTER YOU WIELDING BASEBALL BATS AND/OR THE AD
+BOARD<sup><font size=-1>*</font></sup>. WE WARNED YOU.
+</strong>
+</p>
+
+<p>
+<font size=-1><i><sup>*</sup> The Administrative Board of Harvard
+College handles formal disciplinary action.</i></font>
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>forkbomb</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/getpid.html>getpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+We don't expect your system to withstand this without grinding to
+a halt, but once your basic system calls are complete it shouldn't
+crash. Likewise for after your virtual memory system is complete.
+</p>
+
+<p>
+Note that this may turn out to be hard to achieve in practice. Don't
+spend much time fixing problems <tt>forkbomb</tt> triggers that won't
+arise under more normal operation. (If in doubt, consult your course
+staff.)
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/forktest.html b/build/install/man/testbin/forktest.html
new file mode 100644
index 0000000..be0d710
--- /dev/null
+++ b/build/install/man/testbin/forktest.html
@@ -0,0 +1,72 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>forktest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>forktest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+forktest - test fork system call
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/forktest</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>forktest</tt> forks a few times and tries to make sure each fork
+has its own data and stack.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>forktest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/getpid.html>getpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>forktest</tt> should run successfully once the basic system calls
+are complete (if given enough memory) and should continue to run
+successfully when the VM assignment is completed.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/guzzle.html b/build/install/man/testbin/guzzle.html
new file mode 100644
index 0000000..7233855
--- /dev/null
+++ b/build/install/man/testbin/guzzle.html
@@ -0,0 +1,70 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>guzzle</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>guzzle</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+guzzle - waste cpu
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/guzzle</tt> [<em>character</em>]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>guzzle</tt> burns cpu and periodically prints a character. The
+default character is a plus sign (+). It differs from
+<A HREF=hog.html>hog</A> chiefly in the printing and in that it runs
+longer.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>guzzle</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+It is only likely to be useful for testing the scheduler.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/hash.html b/build/install/man/testbin/hash.html
new file mode 100644
index 0000000..1747a9a
--- /dev/null
+++ b/build/install/man/testbin/hash.html
@@ -0,0 +1,84 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>hash</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>hash</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+hash - compute a simple hash function of a file
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/hash</tt> <em>file</em><br>
+<tt>host-hash</tt> <em>file</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>hash</tt> takes a file and computes a hash value for it by adding
+all the bytes in the file together modulo a prime.
+</p>
+
+<p>
+<tt>hash</tt> is by default also compiled for the System/161 host OS
+so you can cross-check the answers you get.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>hash</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+Once the basic system calls are complete, hash should work on any file
+the system supports. However, it will probably of most use for testing
+while working on the file system.
+</p>
+
+<h3>Bugs</h3>
+<p>
+<tt>hash</tt> uses a silly hash algorithm.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/hog.html b/build/install/man/testbin/hog.html
new file mode 100644
index 0000000..c933dec
--- /dev/null
+++ b/build/install/man/testbin/hog.html
@@ -0,0 +1,65 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>hog</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>hog</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+hog - waste cpu
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/hog</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>hog</tt> does nothing but burn cpu. It is not substantially different from
+<A HREF=guzzle.html>guzzle</A>.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>hog</tt> uses only the <A HREF=../syscall/_exit.html>_exit</A>
+system call.
+</p>
+
+<p>
+It is only likely to be useful for testing the scheduler.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/huge.html b/build/install/man/testbin/huge.html
new file mode 100644
index 0000000..61cef9f
--- /dev/null
+++ b/build/install/man/testbin/huge.html
@@ -0,0 +1,72 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>huge</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>huge</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+huge - very large VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/huge</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>huge</tt> creates an 8 megabyte data array and manipulates it. It
+will hopefully help show up bugs in the VM system.
+</p>
+
+<p>
+It does not in fact do anything useful even if it completes successfully.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>huge</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>huge</tt> should run properly once the VM assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/index.html b/build/install/man/testbin/index.html
new file mode 100644
index 0000000..b0d1d9e
--- /dev/null
+++ b/build/install/man/testbin/index.html
@@ -0,0 +1,110 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>OS/161 Test binaries</title>
+<link rel="stylesheet" type="text/css" media="all" href="../manindex.css">
+</head>
+<body bgcolor=#ffffff>
+
+<h2 align=center>OS/161 Test binaries (/testbin)</h2>
+
+<p align=center>
+<A HREF=..>Top</A> |
+<A HREF=../bin>Binaries</A> |
+<A HREF=../sbin>Sysadmin binaries</A> |
+<A HREF=../syscall>System calls</A> |
+<A HREF=../libc>C standard library</A> |
+<A HREF=../dev>Device drivers</A> |
+<A HREF=../misc>Miscellaneous</A>
+</p>
+<br>
+
+<ul>
+<li> <A HREF=add.html>add</A> - add two numbers
+<li> <A HREF=argtest.html>argtest</A> - display arguments passed through execv
+<li> <A HREF=badcall.html>badcall</A> - make invalid system calls
+<li> <A HREF=bigexec.html>bigexec</A> - test exec with large argv blocks
+<li> <A HREF=bigfile.html>bigfile</A> - create a large file in small chunks
+<li> <A HREF=bigfork.html>bigfork</A> - large forking test
+<li> <A HREF=bigseek.html>bigseek</A> - test 64-bit seek positions
+<li> <A HREF=bloat.html>bloat</A> - waste memory
+<li> <A HREF=conman.html>conman</A> - echo typed characters
+<li> <A HREF=crash.html>crash</A> - commit various exceptions
+<li> <A HREF=ctest.html>ctest</A> - cyclic stride-oriented VM test
+<li> <A HREF=dirconc.html>dirconc</A> - concurrent directory operations test
+<li> <A HREF=dirseek.html>dirseek</A> - seek on directories test
+<li> <A HREF=dirtest.html>dirtest</A> - simple subdirectories test
+<li> <A HREF=f_test.html>f_test</A> - basic concurrent filesystem test
+<li> <A HREF=factorial.html>factorial</A> - compute factorials using execv
+<li> <A HREF=farm.html>farm</A> - run some hogs and cats
+<li> <A HREF=faulter.html>faulter</A> - commit address fault
+<li> <A HREF=filetest.html>filetest</A> - basic filesystem test
+<li> <A HREF=forkbomb.html>forkbomb</A> - create hundreds of processes
+<li> <A HREF=forktest.html>forktest</A> - test fork system call
+<li> <A HREF=frack.html>frack</A> - file system crack
+<li> <A HREF=guzzle.html>guzzle</A> - waste cpu
+<li> <A HREF=hash.html>hash</A> - compute a simple hash function of a file
+<li> <A HREF=hog.html>hog</A> - waste cpu
+<li> <A HREF=huge.html>huge</A> - very large VM test
+<li> <A HREF=kitchen.html>kitchen</A> - run some sinks
+<li> <A HREF=malloctest.html>malloctest</A> - some simple tests for
+   userlevel malloc
+<li> <A HREF=matmult.html>matmult</A> - baseline VM stress test
+<li> <A HREF=multiexec.html>multiexec</A> - run many exec calls at once
+<li> <A HREF=palin.html>palin</A> - simple VM test
+<li> <A HREF=parallelvm.html>parallelvm</A> - concurrent VM test
+<li> <A HREF=poisondisk.html>poisondisk</A> - write known "poison"
+   values to a disk image
+<li> <A HREF=psort.html>psort</A> - concurrent file system test
+<li> <A HREF=quinthuge.html>quinthuge</A> - very very large VM test
+<li> <A HREF=quintmat.html>quintmat</A> - very large VM test
+<li> <A HREF=quintsort.html>quintsort</A> - very large VM test
+<li> <A HREF=randcall.html>randcall</A> - make randomized system calls
+<li> <A HREF=redirect.html>redirect</A> - test I/O redirection
+<li> <A HREF=rmdirtest.html>rmdirtest</A> - test removing in-use directories
+<li> <A HREF=rmtest.html>rmtest</A> - test removing open files
+<li> <A HREF=sbrktest.html>sbrktest</A> - program for testing sbrk
+<li> <A HREF=schedpong.html>schedpong</A> - scheduler pong
+<li> <A HREF=sink.html>sink</A> - accept and throw away console input
+<li> <A HREF=sort.html>sort</A> - large quicksort-based VM test
+<li> <A HREF=sparsefile.html>sparsefile</A> - generate a sparse file
+<li> <A HREF=sty.html>sty</A> - run some hogs
+<li> <A HREF=tail.html>tail</A> - print part of a file
+<li> <A HREF=tictac.html>tictac</A> - tic-tac-toe game
+<li> <A HREF=triplehuge.html>triplehuge</A> - very very large VM test
+<li> <A HREF=triplemat.html>triplemat</A> - very large VM test
+<li> <A HREF=triplesort.html>triplesort</A> - very large VM test
+<li> <A HREF=usemtest.html>usemtest</A> - test for user-level (semfs) semaphores
+<li> <A HREF=userthreads.html>userthreads</A> - simple user-level threads test
+<li> <A HREF=zero.html>zero</A> - test if VM system zeros memory
+</ul>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/kitchen.html b/build/install/man/testbin/kitchen.html
new file mode 100644
index 0000000..f3ebbc1
--- /dev/null
+++ b/build/install/man/testbin/kitchen.html
@@ -0,0 +1,80 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>kitchen</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>kitchen</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+kitchen - run some sinks
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/kitchen</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+Runs four copies of <A HREF=sink.html>sink</A>. It may be useful for
+testing concurrent access to the console device. It may also be useful
+for testing job control, if you choose to pursue job control.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>kitchen</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+Additionally, the subprocesses it spawns use the
+<A HREF=../syscall/read.html>read</A> system call.
+</p>
+
+<p>
+<tt>kitchen</tt> should function correctly once the basic system calls are
+complete.
+</p>
+
+<h3>Bugs</h3>
+<p>
+<tt>kitchen</tt> does not wait for its child processes to exit.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/malloctest.html b/build/install/man/testbin/malloctest.html
new file mode 100644
index 0000000..582c15f
--- /dev/null
+++ b/build/install/man/testbin/malloctest.html
@@ -0,0 +1,116 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>malloctest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>malloctest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+malloctest - some simple tests for userlevel malloc
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/malloctest</tt> [<em>test</em>...]
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>malloctest</tt> contains 7 tests, 1-7. These may be run
+interactively or from the command line.
+</p>
+
+<p>
+Test 1 checks if all the bytes we ask for actually get allocated.
+</p>
+
+<p>
+Test 2 checks if <tt>malloc</tt> gracefully handles failing requests.
+This test assumes that <tt>malloc</tt> will eventually fail if one
+keeps allocating enough memory, instead of promising memory it can't
+deliver and then (perhaps) killing processes when it runs out. More
+detail regarding this condition can be found in comments in the source
+code.
+</p>
+
+<p>
+Test 3 also checks if <tt>malloc</tt> gracefully handles failing
+requests, and thus has the same restrictions as test 2.
+</p>
+
+<p>
+Test 4 attempts to check if <tt>malloc</tt> coalesces the free list
+properly.  This test is only meant for first-fit, next-fit, or
+best-fit allocators; anything else will most likely confuse it.
+Running test 4 after other tests may confuse it as well.
+</p>
+
+<p>
+Tests 5-7 are a randomized stress test. Test 5 uses pseudorandom seed
+0. Test 6 seeds the random generator from the
+<A HREF=../dev/random.html>random:</A> device. Test 7 prompts you for a
+specific seed.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>malloctest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+Your system should pass all the <tt>malloctest</tt> tests, subject to
+the conditions described above, once you have implemented
+<A HREF=../syscalls/sbrk.html>sbrk</A>.
+</p>
+
+<h3>Bugs</h3>
+<p>
+Because OS/161 ships with a userlevel <tt>malloc</tt> implementation
+now, rather than making you write one, this test is not very useful.
+</p>
+
+<p>
+Because the userlevel <tt>malloc</tt> OS/161 ships with is quite dumb,
+test 3 can be amazingly slow.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/matmult.html b/build/install/man/testbin/matmult.html
new file mode 100644
index 0000000..5483085
--- /dev/null
+++ b/build/install/man/testbin/matmult.html
@@ -0,0 +1,76 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>matmult</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>matmult</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+matmult - baseline VM stress test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/matmult</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>matmult</tt> multiplies two large matrices together and checks the
+result. Hopefully this will help detect bugs in the VM system.
+</p>
+
+<p>
+The version for OS/161 has been gimmicked to be less efficient
+space-wise than normal matrix multiplication. This allows it to both
+take up an interesting amount of memory and run in a non-boring amount
+of time.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>matmult</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>matmult</tt> should run correctly once the VM system assignment is
+complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/palin.html b/build/install/man/testbin/palin.html
new file mode 100644
index 0000000..0dcfebc
--- /dev/null
+++ b/build/install/man/testbin/palin.html
@@ -0,0 +1,76 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>palin</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>palin</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+palin - simple VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/palin</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>palin</tt> checks a long string contained within itself for being
+palindromic. The check should pass.
+</p>
+
+<p>
+The string is not actually all that long and this test does not stress
+the VM in any real sense of the word. However, it might be a useful
+test early on in the debugging phase.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>palin</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>palin</tt> should run correctly once the basic system calls are
+complete, and should continue to run correctly once the VM system
+assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/randcall.html b/build/install/man/testbin/randcall.html
new file mode 100644
index 0000000..d163320
--- /dev/null
+++ b/build/install/man/testbin/randcall.html
@@ -0,0 +1,102 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>randcall</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>randcall</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+randcall - make randomized system calls
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/randcall</tt> [<tt>-f</tt>] [<tt>-c</tt> <em>count</em>]
+[<tt>-r</tt> <em>seed</em>] <em>callset</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>randcall</tt> makes randomized system calls, that is, system calls with
+completely random arguments. The <em>callset</em> determines which
+list of system calls it uses; it is either "all", which does
+everything, or a number that identifies one of the assignments, in
+which case it exercises all the system calls that are supposed to be
+working when that assignment is complete. (If the lists compiled into
+randcall are wrong, contact your course staff.)
+</p>
+
+<p>
+Ordinarily, in case some of these calls cause process termination,
+randcall forks before making each call. This can be slow, so the -f
+option can be used to suppress this behavior.
+</p>
+
+<p>
+The <tt>-c</tt> <em>count</em> option tells randcall to make
+<em>count</em> iterations through the list of calls it's using. (It
+always goes through the list sequentially.) The default count is 100.
+</p>
+
+<p>
+The <tt>-r</tt> <em>seed</em> option allows one to set the
+pseudorandom seed used by <tt>randcall</tt> to generate the call
+arguments. The default seed is 0.
+</p>
+
+<p>
+<tt>randcall</tt> prints what it's doing, so if it blows up you should
+be able to see what happened.
+</p>
+
+<p>
+The system calls that do not take arguments are not on any of the call
+lists. Neither is <A HREF=../syscall/reboot.html>reboot</A>, to prevent
+accidental system shutdown.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>randcall</tt> should never under any circumstances crash the
+kernel, no matter what call list is in use.
+</p>
+
+<h3>Bugs</h3>
+<p>
+There should be an option to seed the random generator from
+<A HREF=../dev/random.html>random:</A>.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/rmdirtest.html b/build/install/man/testbin/rmdirtest.html
new file mode 100644
index 0000000..dfe8c8a
--- /dev/null
+++ b/build/install/man/testbin/rmdirtest.html
@@ -0,0 +1,85 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rmdirtest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rmdirtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rmdirtest - test removing in-use directories
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/rmdirtest</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>rmdirtest</tt> creates a test directory, goes into it, removes it,
+and attempts to do various operations on it. It tries to check that
+the right things happen, although some cases are beyond its ability to
+test directly (such as whether storage is leaked).
+</p>
+
+<p>
+Note that while it is not legal to remove the <tt>.</tt>
+<em>entry</em> in a directory, it is perfectly legal to remove a
+directory by name that happens to be some process's (or your own)
+current working directory.
+</p>
+
+<h3>Requirements</h3>
+<p>
+rmdirtest uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/chdir.html>chdir</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/__getcwd.html>__getcwd</A>
+<li> <A HREF=../syscall/getdirentry.html>getdirentry</A>
+<li> <A HREF=../syscall/mkdir.html>mkdir</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/rmdir.html>rmdir</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>rmdirtest</tt> should run correctly once the file system
+assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/rmtest.html b/build/install/man/testbin/rmtest.html
new file mode 100644
index 0000000..8830907
--- /dev/null
+++ b/build/install/man/testbin/rmtest.html
@@ -0,0 +1,93 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>rmtest</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>rmtest</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+rmtest - test removing open files
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/rmtest</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>rmtest</tt> deletes a file while it's open and then attempts to do
+further I/O to it, and tries to check that the right things happen.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>rmtest</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>rmtest</tt> also spawns a copy of
+<A HREF=../bin/rm.html>/bin/rm</A>, which uses these system calls:
+<ul>
+<li> <A HREF=../syscall/remove.html>remove</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>rmtest</tt> should run correctly once the file system assignment
+is complete.
+</p>
+
+<h3>Bugs</h3>
+<p>
+There's no particular reason it should use <tt>/bin/rm</tt> instead of
+calling <A HREF=../syscall/remove.html>remove</A> itself. But I guess
+it makes life more exciting.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/sink.html b/build/install/man/testbin/sink.html
new file mode 100644
index 0000000..8265c8e
--- /dev/null
+++ b/build/install/man/testbin/sink.html
@@ -0,0 +1,71 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sink</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sink</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sink - accept and throw away console input
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/sink</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>sink</tt> reads characters from standard input and throws them
+away. It is perhaps of some use for testing standard input or console
+devices.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>sink</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>sink</tt> should function properly once the basic system calls are
+complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/sort.html b/build/install/man/testbin/sort.html
new file mode 100644
index 0000000..59a2443
--- /dev/null
+++ b/build/install/man/testbin/sort.html
@@ -0,0 +1,70 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sort</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sort</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sort - large quicksort-based VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/sort</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>sort</tt> creates an array of 147456 random integers and then
+sorts it using quicksort. This will hopefully help show up bugs in the
+VM system.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>sort</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>sort</tt> should run correctly to completion once the VM
+assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/sty.html b/build/install/man/testbin/sty.html
new file mode 100644
index 0000000..38aa8da
--- /dev/null
+++ b/build/install/man/testbin/sty.html
@@ -0,0 +1,74 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>sty</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>sty</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+sty - run some hogs
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/sty</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>sty</tt> runs six copies of <A HREF=hog.html>hog</A>.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>sty</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>sty</tt> is only likely to be useful for testing the scheduler... if then.
+</p>
+
+<h3>Bugs</h3>
+<p>
+<tt>sty</tt> does not wait for its child processes to finish.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/tail.html b/build/install/man/testbin/tail.html
new file mode 100644
index 0000000..ebb311d
--- /dev/null
+++ b/build/install/man/testbin/tail.html
@@ -0,0 +1,79 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>tail</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>tail</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+tail - print part of a file
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/tail</tt> <em>file</em> <em>location</em>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>tail</tt> prints the contents of a file starting at offset
+<em>location</em> within it, skipping the beginning.
+</p>
+
+<p>
+It is somewhat similar in concept to the Unix tail command, but is not
+compatible, which is why it lives in testbin.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>tail</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/open.html>open</A>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/lseek.html>lseek</A>
+<li> <A HREF=../syscall/close.html>close</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>tail</tt> should work once the basic system calls are complete,
+but will probably be most useful as a debugging tool while working on
+the file system.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/tictac.html b/build/install/man/testbin/tictac.html
new file mode 100644
index 0000000..a9d4a42
--- /dev/null
+++ b/build/install/man/testbin/tictac.html
@@ -0,0 +1,69 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>tictac</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>tictac</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+tictac - tic-tac-toe game
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/tictac</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>tictac</tt> implements a simple version of tic-tac-toe.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>tictac</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/read.html>read</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>tictac</tt> should function correctly once the basic system calls
+are complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/triplehuge.html b/build/install/man/testbin/triplehuge.html
new file mode 100644
index 0000000..1b3c6a6
--- /dev/null
+++ b/build/install/man/testbin/triplehuge.html
@@ -0,0 +1,70 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>triplehuge</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>triplehuge</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+triplehuge - very very large VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/triplehuge</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>triplehuge</tt> runs three copies of <A HREF=huge.html>huge</A> at once.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>triplehuge</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>triplehuge</tt> should run properly once the VM assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/triplemat.html b/build/install/man/testbin/triplemat.html
new file mode 100644
index 0000000..a9eb512
--- /dev/null
+++ b/build/install/man/testbin/triplemat.html
@@ -0,0 +1,71 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>triplemat</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>triplemat</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+triplemat - very large VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/triplemat</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>triplemat</tt> runs three copies of
+<A HREF=matmult.html>matmult</A> at once.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>triplemat</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>triplemat</tt> should run properly once the VM assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/triplesort.html b/build/install/man/testbin/triplesort.html
new file mode 100644
index 0000000..05df30f
--- /dev/null
+++ b/build/install/man/testbin/triplesort.html
@@ -0,0 +1,70 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>triplesort</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>triplesort</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+triplesort - very large VM test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/triplesort</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>triplesort</tt> runs three copies of <A HREF=sort.html>sort</A> at once.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>triplesort</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/fork.html>fork</A>
+<li> <A HREF=../syscall/execv.html>execv</A>
+<li> <A HREF=../syscall/waitpid.html>waitpid</A>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+</p>
+
+<p>
+<tt>triplesort</tt> should run properly once the VM assignment is complete.
+</p>
+
+</body>
+</html>
diff --git a/build/install/man/testbin/userthreads.html b/build/install/man/testbin/userthreads.html
new file mode 100644
index 0000000..2f8fa7a
--- /dev/null
+++ b/build/install/man/testbin/userthreads.html
@@ -0,0 +1,75 @@
+<!--
+Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2013
+	The President and Fellows of Harvard College.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+3. Neither the name of the University nor the names of its contributors
+   may be used to endorse or promote products derived from this software
+   without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
+-->
+<html>
+<head>
+<title>userthreads</title>
+<link rel="stylesheet" type="text/css" media="all" href="../man.css">
+</head>
+<body bgcolor=#ffffff>
+<h2 align=center>userthreads</h2>
+<h4 align=center>OS/161 Reference Manual</h4>
+
+<h3>Name</h3>
+<p>
+userthreads - simple user-level threads test
+</p>
+
+<h3>Synopsis</h3>
+<p>
+<tt>/testbin/userthreads</tt>
+</p>
+
+<h3>Description</h3>
+<p>
+<tt>userthreads</tt> does simple console I/O from two threads in the same
+process.
+</p>
+
+<h3>Requirements</h3>
+<p>
+<tt>userthreads</tt> uses the following system calls:
+<ul>
+<li> <A HREF=../syscall/write.html>write</A>
+<li> <A HREF=../syscall/_exit.html>_exit</A>
+</ul>
+
+It also assumes the existence of a function <tt>threadfork()</tt>,
+which takes the address of a function to start a new thread at, and
+makes certain other assumptions about thread semantics. See the source
+file.
+</p>
+
+<p>
+If implementing user-level threads, part of your responsibility is to
+update the userthreads test to work with the threads package you
+write.
+</p>
+
+</body>
+</html>
diff --git a/build/install/sbin/dumpsfs b/build/install/sbin/dumpsfs
new file mode 100755
index 0000000..757fcb9
Binary files /dev/null and b/build/install/sbin/dumpsfs differ
diff --git a/build/install/sbin/halt b/build/install/sbin/halt
new file mode 100755
index 0000000..246c125
Binary files /dev/null and b/build/install/sbin/halt differ
diff --git a/build/install/sbin/mksfs b/build/install/sbin/mksfs
new file mode 100755
index 0000000..5a4e11e
Binary files /dev/null and b/build/install/sbin/mksfs differ
diff --git a/build/install/sbin/poweroff b/build/install/sbin/poweroff
new file mode 100755
index 0000000..81e5f41
Binary files /dev/null and b/build/install/sbin/poweroff differ
diff --git a/build/install/sbin/reboot b/build/install/sbin/reboot
new file mode 100755
index 0000000..2789e51
Binary files /dev/null and b/build/install/sbin/reboot differ
diff --git a/build/install/sbin/sfsck b/build/install/sbin/sfsck
new file mode 100755
index 0000000..03f9fec
Binary files /dev/null and b/build/install/sbin/sfsck differ
diff --git a/build/install/testbin/add b/build/install/testbin/add
new file mode 100755
index 0000000..2a178fe
Binary files /dev/null and b/build/install/testbin/add differ
diff --git a/build/install/testbin/argtest b/build/install/testbin/argtest
new file mode 100755
index 0000000..785a64c
Binary files /dev/null and b/build/install/testbin/argtest differ
diff --git a/build/install/testbin/badcall b/build/install/testbin/badcall
new file mode 100755
index 0000000..1a6e2cc
Binary files /dev/null and b/build/install/testbin/badcall differ
diff --git a/build/install/testbin/bigexec b/build/install/testbin/bigexec
new file mode 100755
index 0000000..d046f78
Binary files /dev/null and b/build/install/testbin/bigexec differ
diff --git a/build/install/testbin/bigfile b/build/install/testbin/bigfile
new file mode 100755
index 0000000..69e2cea
Binary files /dev/null and b/build/install/testbin/bigfile differ
diff --git a/build/install/testbin/bigfork b/build/install/testbin/bigfork
new file mode 100755
index 0000000..a031c1c
Binary files /dev/null and b/build/install/testbin/bigfork differ
diff --git a/build/install/testbin/bigseek b/build/install/testbin/bigseek
new file mode 100755
index 0000000..a7792ca
Binary files /dev/null and b/build/install/testbin/bigseek differ
diff --git a/build/install/testbin/bloat b/build/install/testbin/bloat
new file mode 100755
index 0000000..08257db
Binary files /dev/null and b/build/install/testbin/bloat differ
diff --git a/build/install/testbin/conman b/build/install/testbin/conman
new file mode 100755
index 0000000..1c06953
Binary files /dev/null and b/build/install/testbin/conman differ
diff --git a/build/install/testbin/crash b/build/install/testbin/crash
new file mode 100755
index 0000000..4019d83
Binary files /dev/null and b/build/install/testbin/crash differ
diff --git a/build/install/testbin/ctest b/build/install/testbin/ctest
new file mode 100755
index 0000000..a991f7a
Binary files /dev/null and b/build/install/testbin/ctest differ
diff --git a/build/install/testbin/dirconc b/build/install/testbin/dirconc
new file mode 100755
index 0000000..de3114c
Binary files /dev/null and b/build/install/testbin/dirconc differ
diff --git a/build/install/testbin/dirseek b/build/install/testbin/dirseek
new file mode 100755
index 0000000..5d51574
Binary files /dev/null and b/build/install/testbin/dirseek differ
diff --git a/build/install/testbin/dirtest b/build/install/testbin/dirtest
new file mode 100755
index 0000000..5f5e827
Binary files /dev/null and b/build/install/testbin/dirtest differ
diff --git a/build/install/testbin/f_test b/build/install/testbin/f_test
new file mode 100755
index 0000000..aac485c
Binary files /dev/null and b/build/install/testbin/f_test differ
diff --git a/build/install/testbin/factorial b/build/install/testbin/factorial
new file mode 100755
index 0000000..d23990c
Binary files /dev/null and b/build/install/testbin/factorial differ
diff --git a/build/install/testbin/farm b/build/install/testbin/farm
new file mode 100755
index 0000000..3aafe09
Binary files /dev/null and b/build/install/testbin/farm differ
diff --git a/build/install/testbin/faulter b/build/install/testbin/faulter
new file mode 100755
index 0000000..8641dc6
Binary files /dev/null and b/build/install/testbin/faulter differ
diff --git a/build/install/testbin/filetest b/build/install/testbin/filetest
new file mode 100755
index 0000000..1f0e47a
Binary files /dev/null and b/build/install/testbin/filetest differ
diff --git a/build/install/testbin/forkbomb b/build/install/testbin/forkbomb
new file mode 100755
index 0000000..3433719
Binary files /dev/null and b/build/install/testbin/forkbomb differ
diff --git a/build/install/testbin/forktest b/build/install/testbin/forktest
new file mode 100755
index 0000000..4c5f476
Binary files /dev/null and b/build/install/testbin/forktest differ
diff --git a/build/install/testbin/frack b/build/install/testbin/frack
new file mode 100755
index 0000000..f332796
Binary files /dev/null and b/build/install/testbin/frack differ
diff --git a/build/install/testbin/guzzle b/build/install/testbin/guzzle
new file mode 100755
index 0000000..1087c89
Binary files /dev/null and b/build/install/testbin/guzzle differ
diff --git a/build/install/testbin/hash b/build/install/testbin/hash
new file mode 100755
index 0000000..b57a301
Binary files /dev/null and b/build/install/testbin/hash differ
diff --git a/build/install/testbin/hog b/build/install/testbin/hog
new file mode 100755
index 0000000..c50e086
Binary files /dev/null and b/build/install/testbin/hog differ
diff --git a/build/install/testbin/huge b/build/install/testbin/huge
new file mode 100755
index 0000000..3c67ecb
Binary files /dev/null and b/build/install/testbin/huge differ
diff --git a/build/install/testbin/kitchen b/build/install/testbin/kitchen
new file mode 100755
index 0000000..25dbf9e
Binary files /dev/null and b/build/install/testbin/kitchen differ
diff --git a/build/install/testbin/malloctest b/build/install/testbin/malloctest
new file mode 100755
index 0000000..dea22a6
Binary files /dev/null and b/build/install/testbin/malloctest differ
diff --git a/build/install/testbin/matmult b/build/install/testbin/matmult
new file mode 100755
index 0000000..daf9fc0
Binary files /dev/null and b/build/install/testbin/matmult differ
diff --git a/build/install/testbin/multiexec b/build/install/testbin/multiexec
new file mode 100755
index 0000000..181ccf1
Binary files /dev/null and b/build/install/testbin/multiexec differ
diff --git a/build/install/testbin/palin b/build/install/testbin/palin
new file mode 100755
index 0000000..2b713d5
Binary files /dev/null and b/build/install/testbin/palin differ
diff --git a/build/install/testbin/parallelvm b/build/install/testbin/parallelvm
new file mode 100755
index 0000000..d62707e
Binary files /dev/null and b/build/install/testbin/parallelvm differ
diff --git a/build/install/testbin/poisondisk b/build/install/testbin/poisondisk
new file mode 100755
index 0000000..ba94b98
Binary files /dev/null and b/build/install/testbin/poisondisk differ
diff --git a/build/install/testbin/psort b/build/install/testbin/psort
new file mode 100755
index 0000000..f8a0ef6
Binary files /dev/null and b/build/install/testbin/psort differ
diff --git a/build/install/testbin/quinthuge b/build/install/testbin/quinthuge
new file mode 100755
index 0000000..a85e607
Binary files /dev/null and b/build/install/testbin/quinthuge differ
diff --git a/build/install/testbin/quintmat b/build/install/testbin/quintmat
new file mode 100755
index 0000000..774bc2b
Binary files /dev/null and b/build/install/testbin/quintmat differ
diff --git a/build/install/testbin/quintsort b/build/install/testbin/quintsort
new file mode 100755
index 0000000..8e9082e
Binary files /dev/null and b/build/install/testbin/quintsort differ
diff --git a/build/install/testbin/randcall b/build/install/testbin/randcall
new file mode 100755
index 0000000..c75f2fc
Binary files /dev/null and b/build/install/testbin/randcall differ
diff --git a/build/install/testbin/redirect b/build/install/testbin/redirect
new file mode 100755
index 0000000..9d6c502
Binary files /dev/null and b/build/install/testbin/redirect differ
diff --git a/build/install/testbin/rmdirtest b/build/install/testbin/rmdirtest
new file mode 100755
index 0000000..b0dd72b
Binary files /dev/null and b/build/install/testbin/rmdirtest differ
diff --git a/build/install/testbin/rmtest b/build/install/testbin/rmtest
new file mode 100755
index 0000000..1799fe6
Binary files /dev/null and b/build/install/testbin/rmtest differ
diff --git a/build/install/testbin/sbrktest b/build/install/testbin/sbrktest
new file mode 100755
index 0000000..fd55a77
Binary files /dev/null and b/build/install/testbin/sbrktest differ
diff --git a/build/install/testbin/schedpong b/build/install/testbin/schedpong
new file mode 100755
index 0000000..5ca0415
Binary files /dev/null and b/build/install/testbin/schedpong differ
diff --git a/build/install/testbin/sink b/build/install/testbin/sink
new file mode 100755
index 0000000..327ee8b
Binary files /dev/null and b/build/install/testbin/sink differ
diff --git a/build/install/testbin/sort b/build/install/testbin/sort
new file mode 100755
index 0000000..df0f38c
Binary files /dev/null and b/build/install/testbin/sort differ
diff --git a/build/install/testbin/sparsefile b/build/install/testbin/sparsefile
new file mode 100755
index 0000000..2440cbb
Binary files /dev/null and b/build/install/testbin/sparsefile differ
diff --git a/build/install/testbin/sty b/build/install/testbin/sty
new file mode 100755
index 0000000..eb078a7
Binary files /dev/null and b/build/install/testbin/sty differ
diff --git a/build/install/testbin/tail b/build/install/testbin/tail
new file mode 100755
index 0000000..136498d
Binary files /dev/null and b/build/install/testbin/tail differ
diff --git a/build/install/testbin/tictac b/build/install/testbin/tictac
new file mode 100755
index 0000000..a99176d
Binary files /dev/null and b/build/install/testbin/tictac differ
diff --git a/build/install/testbin/triplehuge b/build/install/testbin/triplehuge
new file mode 100755
index 0000000..6befbc9
Binary files /dev/null and b/build/install/testbin/triplehuge differ
diff --git a/build/install/testbin/triplemat b/build/install/testbin/triplemat
new file mode 100755
index 0000000..906bdda
Binary files /dev/null and b/build/install/testbin/triplemat differ
diff --git a/build/install/testbin/triplesort b/build/install/testbin/triplesort
new file mode 100755
index 0000000..e4eda94
Binary files /dev/null and b/build/install/testbin/triplesort differ
diff --git a/build/install/testbin/usemtest b/build/install/testbin/usemtest
new file mode 100755
index 0000000..5c52980
Binary files /dev/null and b/build/install/testbin/usemtest differ
diff --git a/build/install/testbin/zero b/build/install/testbin/zero
new file mode 100755
index 0000000..a2bde3a
Binary files /dev/null and b/build/install/testbin/zero differ
diff --git a/build/install/testscripts/runtest.py b/build/install/testscripts/runtest.py
new file mode 100644
index 0000000..852db48
--- /dev/null
+++ b/build/install/testscripts/runtest.py
@@ -0,0 +1,202 @@
+#
+# Usage:
+#   import runtest
+#   runtest.run(testcommands, outputfile,
+#               menuprompt=None,	default "OS/161 kernel [? for menu]: "
+#               shellprompt=None,	default "OS/161$ "
+#               conf=None,		default is sys161 default behavior
+#               ram=None, 		default is per sys161 config
+#               cpus=None,		default is per sys161 config
+#               doom=None,		default is no doom counter
+#               progress=30,		default is 30 seconds
+#               timeout=300,		default is 300 seconds
+#               kernel=None)		default is "kernel"
+#
+# Returns None on success or a (string) message if something apparently
+# went wrong in the middle. (XXX: should it throw exceptions instead?)
+#
+# * The testcommands argument is a string containing a list of commands
+# separated by semicolons.  These can be either kernel menu commands
+# or shell commands; the command 's' is recognized for switching from
+# the menu to the shell and 'exit' for switching back to the menu.
+# (This affects waiting for prompts - running the shell via 'p' or
+# crashing out of the shell will confuse things.)
+#
+# The command 'q' from the menu is also recognized as causing a
+# shutdown. This will be done automatically after everything else if
+# not issued explicitly.
+#
+# The following commands are interpreted as macros:
+#    DOMOUNT		expands to "mount sfs lhd1:; cd lhd1:"
+#    DOUNMOUNT		expands to "cd /; unmount lhd1:"
+#    WAIT		sleeps 3 seconds and just presses return
+#
+# * The outputfile argument should be a python file (e.g. sys.stdout)
+# and receives a copy of the System/161 output.
+#
+# * The menuprompt and shellprompt arguments can be used to change the
+# menu and shell prompt strings looked for. For the moment these can
+# only be fixed strings, not regular expressions. (This is probably
+# easy to improve, but I ran into some mysterious problems when I
+# tried, so YMMV.) By default if you pass None prompt strings matching
+# what OS/161 issues by default are used.
+#
+# * The conf argument can be used to supply an alternate sys161.conf
+# file. If None is given (the default), sys161 will use its default
+# config file.
+#
+# * The ram and cpus arguments can be used to override the RAM size
+# and number-of-cpus settings in the sys161 config file. The number of
+# cpus must be an integer, but any RAM size specification understood
+# by sys161 can be used. Note: this feature requires System/161 2.0.5
+# or higher.
+#
+# * The doom argument can be used to set the doom counter. If None is
+# given (the default) the doom counter is not engaged.
+#
+# * The progress and timeout arguments can be used to set the timeouts
+# for System/161 progress monitoring and pexpect-level global timeout,
+# respectively. The defaults (somewhat arbitraily chosen) are 30 and
+# 300 seconds. Passing progress=None disables progress monitoring; this
+# is necessary for nontrivial tests that run within the kernel, as
+# progress monitoring measures userland progress. Passing timeout=None
+# probably either disables the global timeout or makes pexpect crash;
+# I haven't tested it. I don't recommend trying: it is your defense
+# against test runs hanging forever.
+#
+# Note that no-debugger unattended mode (sys161 -X) is always used.
+# The purpose of this script is specifically to support unattended
+# test runs...
+#
+# Depends on pexpect, which you may need to install specifically
+# depending on your OS.
+#
+
+import time
+import pexpect
+
+#
+# Macro commands
+#
+macros = {
+	"MOUNT" : ["mount sfs lhd1:", "cd lhd1:"],
+	"UNMOUNT" : ["cd /", "unmount lhd1:"],
+	# "WAIT" special-cased below
+}
+
+#
+# Wait for a prompt; returns True if we got it, False if we need to
+# bail.
+#
+def getprompt(proc, prompt):
+	which = proc.expect_exact([
+			prompt,
+			"panic: ",		# panic message
+			"sys161: No progress in ", # sys161 deadman print
+			"sys161: Elapsed ",	# sys161 shutdown print
+			pexpect.EOF,
+			pexpect.TIMEOUT
+		])
+	if which == 0:
+		# got the prompt
+		return None
+	if which == 1:
+		proc.expect_exact([pexpect.EOF, pexpect.TIMEOUT])
+		return "panic"
+	if which == 2:
+		proc.expect_exact([pexpect.EOF, pexpect.TIMEOUT])
+		return "progress timeout"
+	if which == 3:
+		proc.expect_exact([pexpect.EOF, pexpect.TIMEOUT])
+		return "unexpected shutdown"
+	if which == 4:
+		return "unexpected end of input"
+	if which == 5:
+		return "top-level timeout"
+	return "runtest: Internal error: pexpect returned out-of-range result"
+# end getprompt
+
+#
+# main test function
+#
+def run(testcommands, outputfile,
+		menuprompt=None, shellprompt=None,
+		conf=None, ram=None, cpus=None,
+		doom=None,
+		progress=30, timeout=300,
+		kernel=None):
+	if menuprompt is None:
+		menuprompt = "OS/161 kernel [? for menu]: "
+	if shellprompt is None:
+		shellprompt = "OS/161$ "
+	if kernel is None:
+		kernel = "kernel"
+
+	args = ["-X"]
+	if conf is not None:
+		args.append("-c")
+		args.append(conf)
+	if cpus is not None:
+		args.append("-C")
+		args.append("31:cpus=%d" % cpus)
+	if doom is not None:
+		args.append("-D")
+		args.append("%d" % doom)
+	if progress is not None:
+		args.append("-Z")
+		args.append("%d" % progress)
+	if ram is not None:
+		args.append("-C")
+		args.append("31:ramsize=%s" % ram)
+	args.append(kernel)
+
+	proc = pexpect.spawn("sys161", args, timeout=timeout,
+				ignore_sighup=False)
+	proc.logfile_read = outputfile
+
+	commands = [s.strip() for s in testcommands.split(";")]
+	commands = [macros[c] if c in macros else [c] for c in commands]
+	# Apparently list flatten() is unpythonic...
+	commands = [c for sublist in commands for c in sublist]
+
+	prompts = { True: shellprompt, False: menuprompt }
+	inshell = False
+	quit = False
+	for cmd in commands:
+		msg = getprompt(proc, prompts[inshell])
+		if msg is not None:
+			return msg
+		if cmd == "WAIT":
+			time.sleep(3)
+			cmd = ""
+		proc.send("%s\r" % cmd)
+		if not inshell and cmd == "q":
+			quit = True
+		if not inshell and cmd == "s":
+			inshell = True
+		if inshell and cmd == "exit":
+			inshell = False
+	if not quit:
+		if inshell:
+			msg = getprompt(proc, prompts[inshell])
+			if msg is not None:
+				return msg
+			proc.send("exit\r")
+			inshell = False
+		msg = getprompt(proc, prompts[inshell])
+		if msg is not None:
+			return msg
+		proc.send("q\r")
+		quit = True
+
+	proc.expect_exact([pexpect.EOF, pexpect.TIMEOUT])
+
+	# Apparently if you call pexpect.wait() you must have
+	# explicitly read all the input, or it hangs; and the process
+	# can't be already dead, or it crashes. Therefore it appears
+	# to be entirely useless. I hope not calling it doesn't cause
+	# zombies to accumulate.
+	#proc.wait()
+
+	return None
+# end run
diff --git a/build/install/testscripts/test.py b/build/install/testscripts/test.py
new file mode 100755
index 0000000..a0ffa7f
--- /dev/null
+++ b/build/install/testscripts/test.py
@@ -0,0 +1,113 @@
+#!/usr/bin/env python2.7
+# test.py - run some test material
+# usage: auto/test.py [options] test-commands
+# options:
+#    --menuprompt=STR	Change menu prompt string
+#    --shellprompt=STR	Change shell prompt string
+#    --conf=sys161.conf	Use alternate sys161 config
+#    --ram=N		Force RAM size (default from sys161 config)
+#    --cpus=N		Force number of cpus (default from sys161 config)
+#    --doom=N		Set doom counter to N (default none)
+#    --progress=N	Progress monitoring with N-second timeout (default 30)
+#    --no-progress	Disable progress monitoring
+#    --timeout=N	Global timeout, in seconds (default 300)
+#    --kernel=KERNEL	Choose kernel to run (default "kernel")
+#
+#
+# This is a directly executable wrapper around runtest.py. You can use
+# it from the host OS shell to run more or less arbitrary scripts, or
+# you can write your own Python scripts using runtest.py directly.
+#
+# See the top of runtest.py for an explanation of the arguments.
+#
+
+import sys
+from optparse import OptionParser
+
+import runtest
+
+############################################################
+# global settings
+
+g_doom = None
+g_conf = None
+g_cpus = None
+g_kernel = None
+g_menuprompt = None
+g_progress = 30
+g_ram = None
+g_shellprompt = None
+g_timeout = 300
+
+############################################################
+# main
+
+def getargs():
+	global g_menuprompt
+	global g_shellprompt
+	global g_ram
+	global g_conf
+	global g_cpus
+	global g_doom
+	global g_progress
+	global g_timeout
+	global g_kernel
+
+	# XXX is there no better scheme for this?
+	p = OptionParser()
+
+	# grr -h is hardwired
+	p.add_option("-c", "--conf", dest="conf")
+	p.add_option("-D", "--doom", dest="doom")
+	p.add_option("-j", "--cpus", dest="cpus")
+	p.add_option("-k", "--kernel", dest="kernel")
+	p.add_option("-m", "--menuprompt", dest="menuprompt")
+	p.add_option("-r", "--ram", dest="ram")
+	p.add_option("-s", "--shellprompt", dest="shellprompt")
+	p.add_option("-t", "--timeout", dest="timeout")
+	p.add_option("-z", "--no-progress", dest="no_progress")
+	p.add_option("-Z", "--progress", dest="progress")
+
+	(options, args) = p.parse_args()
+	if options.menuprompt is not None:
+		g_menuprompt = options.menuprompt
+	if options.shellprompt is not None:
+		g_shellprompt = options.shellprompt
+	if options.conf is not None:
+		g_conf = options.conf
+	if options.ram is not None:
+		g_ram = options.ram
+	if options.cpus is not None:
+		g_cpus = int(options.cpus)
+	if options.doom is not None:
+		g_doom = int(options.doom)
+	if options.progress is not None:
+		g_progress = int(options.progress)
+	if options.no_progress is not None:
+		g_progress = None
+	if options.timeout is not None:
+		g_timeout = int(options.timeout)
+	if options.kernel is not None:
+		g_kernel = options.conf
+
+	if len(args) != 1:
+		sys.stderr.write("Usage: test.py [options] test-commands\n")
+		exit(1)
+	return args[0]
+# end getargs
+
+testcommands = getargs()
+msg = runtest.run(testcommands,
+	sys.stdout,
+	menuprompt=g_menuprompt,
+	shellprompt=g_shellprompt,
+	conf=g_conf,
+	ram=g_ram,
+	cpus=g_cpus,
+	doom=g_doom,
+	progress=g_progress,
+	timeout=g_timeout,
+	kernel=g_kernel)
+if msg is not None:
+	sys.stderr.write("test.py: test commands aborted with %s\n" % msg)
+exit(0)
diff --git a/build/testscripts/test.py b/build/testscripts/test.py
new file mode 100755
index 0000000..a0ffa7f
--- /dev/null
+++ b/build/testscripts/test.py
@@ -0,0 +1,113 @@
+#!/usr/bin/env python2.7
+# test.py - run some test material
+# usage: auto/test.py [options] test-commands
+# options:
+#    --menuprompt=STR	Change menu prompt string
+#    --shellprompt=STR	Change shell prompt string
+#    --conf=sys161.conf	Use alternate sys161 config
+#    --ram=N		Force RAM size (default from sys161 config)
+#    --cpus=N		Force number of cpus (default from sys161 config)
+#    --doom=N		Set doom counter to N (default none)
+#    --progress=N	Progress monitoring with N-second timeout (default 30)
+#    --no-progress	Disable progress monitoring
+#    --timeout=N	Global timeout, in seconds (default 300)
+#    --kernel=KERNEL	Choose kernel to run (default "kernel")
+#
+#
+# This is a directly executable wrapper around runtest.py. You can use
+# it from the host OS shell to run more or less arbitrary scripts, or
+# you can write your own Python scripts using runtest.py directly.
+#
+# See the top of runtest.py for an explanation of the arguments.
+#
+
+import sys
+from optparse import OptionParser
+
+import runtest
+
+############################################################
+# global settings
+
+g_doom = None
+g_conf = None
+g_cpus = None
+g_kernel = None
+g_menuprompt = None
+g_progress = 30
+g_ram = None
+g_shellprompt = None
+g_timeout = 300
+
+############################################################
+# main
+
+def getargs():
+	global g_menuprompt
+	global g_shellprompt
+	global g_ram
+	global g_conf
+	global g_cpus
+	global g_doom
+	global g_progress
+	global g_timeout
+	global g_kernel
+
+	# XXX is there no better scheme for this?
+	p = OptionParser()
+
+	# grr -h is hardwired
+	p.add_option("-c", "--conf", dest="conf")
+	p.add_option("-D", "--doom", dest="doom")
+	p.add_option("-j", "--cpus", dest="cpus")
+	p.add_option("-k", "--kernel", dest="kernel")
+	p.add_option("-m", "--menuprompt", dest="menuprompt")
+	p.add_option("-r", "--ram", dest="ram")
+	p.add_option("-s", "--shellprompt", dest="shellprompt")
+	p.add_option("-t", "--timeout", dest="timeout")
+	p.add_option("-z", "--no-progress", dest="no_progress")
+	p.add_option("-Z", "--progress", dest="progress")
+
+	(options, args) = p.parse_args()
+	if options.menuprompt is not None:
+		g_menuprompt = options.menuprompt
+	if options.shellprompt is not None:
+		g_shellprompt = options.shellprompt
+	if options.conf is not None:
+		g_conf = options.conf
+	if options.ram is not None:
+		g_ram = options.ram
+	if options.cpus is not None:
+		g_cpus = int(options.cpus)
+	if options.doom is not None:
+		g_doom = int(options.doom)
+	if options.progress is not None:
+		g_progress = int(options.progress)
+	if options.no_progress is not None:
+		g_progress = None
+	if options.timeout is not None:
+		g_timeout = int(options.timeout)
+	if options.kernel is not None:
+		g_kernel = options.conf
+
+	if len(args) != 1:
+		sys.stderr.write("Usage: test.py [options] test-commands\n")
+		exit(1)
+	return args[0]
+# end getargs
+
+testcommands = getargs()
+msg = runtest.run(testcommands,
+	sys.stdout,
+	menuprompt=g_menuprompt,
+	shellprompt=g_shellprompt,
+	conf=g_conf,
+	ram=g_ram,
+	cpus=g_cpus,
+	doom=g_doom,
+	progress=g_progress,
+	timeout=g_timeout,
+	kernel=g_kernel)
+if msg is not None:
+	sys.stderr.write("test.py: test commands aborted with %s\n" % msg)
+exit(0)
diff --git a/build/tooldir/hostlib/libhostcompat.a b/build/tooldir/hostlib/libhostcompat.a
new file mode 100644
index 0000000..19c16e6
Binary files /dev/null and b/build/tooldir/hostlib/libhostcompat.a differ
diff --git a/build/userland/bin/cat/.depend b/build/userland/bin/cat/.depend
new file mode 100644
index 0000000..015b277
--- /dev/null
+++ b/build/userland/bin/cat/.depend
@@ -0,0 +1,18 @@
+$(MYBUILDDIR)/cat.o: \
+ cat.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/cat/cat b/build/userland/bin/cat/cat
new file mode 100755
index 0000000..ca6512b
Binary files /dev/null and b/build/userland/bin/cat/cat differ
diff --git a/build/userland/bin/cat/cat.o b/build/userland/bin/cat/cat.o
new file mode 100644
index 0000000..a14bdbe
Binary files /dev/null and b/build/userland/bin/cat/cat.o differ
diff --git a/build/userland/bin/cp/.depend b/build/userland/bin/cp/.depend
new file mode 100644
index 0000000..0c4f5a2
--- /dev/null
+++ b/build/userland/bin/cp/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/cp.o: \
+ cp.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/cp/cp b/build/userland/bin/cp/cp
new file mode 100755
index 0000000..f883740
Binary files /dev/null and b/build/userland/bin/cp/cp differ
diff --git a/build/userland/bin/cp/cp.o b/build/userland/bin/cp/cp.o
new file mode 100644
index 0000000..1227d44
Binary files /dev/null and b/build/userland/bin/cp/cp.o differ
diff --git a/build/userland/bin/false/.depend b/build/userland/bin/false/.depend
new file mode 100644
index 0000000..f889624
--- /dev/null
+++ b/build/userland/bin/false/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/false.o: \
+ false.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h
diff --git a/build/userland/bin/false/false b/build/userland/bin/false/false
new file mode 100755
index 0000000..cdbbd60
Binary files /dev/null and b/build/userland/bin/false/false differ
diff --git a/build/userland/bin/false/false.o b/build/userland/bin/false/false.o
new file mode 100644
index 0000000..42757dc
Binary files /dev/null and b/build/userland/bin/false/false.o differ
diff --git a/build/userland/bin/ln/.depend b/build/userland/bin/ln/.depend
new file mode 100644
index 0000000..850251d
--- /dev/null
+++ b/build/userland/bin/ln/.depend
@@ -0,0 +1,19 @@
+$(MYBUILDDIR)/ln.o: \
+ ln.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/ln/ln b/build/userland/bin/ln/ln
new file mode 100755
index 0000000..26255bb
Binary files /dev/null and b/build/userland/bin/ln/ln differ
diff --git a/build/userland/bin/ln/ln.o b/build/userland/bin/ln/ln.o
new file mode 100644
index 0000000..5e8c6b0
Binary files /dev/null and b/build/userland/bin/ln/ln.o differ
diff --git a/build/userland/bin/ls/.depend b/build/userland/bin/ls/.depend
new file mode 100644
index 0000000..01b6694
--- /dev/null
+++ b/build/userland/bin/ls/.depend
@@ -0,0 +1,24 @@
+$(MYBUILDDIR)/ls.o: \
+ ls.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/ls/ls b/build/userland/bin/ls/ls
new file mode 100755
index 0000000..a65ea5a
Binary files /dev/null and b/build/userland/bin/ls/ls differ
diff --git a/build/userland/bin/ls/ls.o b/build/userland/bin/ls/ls.o
new file mode 100644
index 0000000..63e2235
Binary files /dev/null and b/build/userland/bin/ls/ls.o differ
diff --git a/build/userland/bin/mkdir/.depend b/build/userland/bin/mkdir/.depend
new file mode 100644
index 0000000..55401ff
--- /dev/null
+++ b/build/userland/bin/mkdir/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/mkdir.o: \
+ mkdir.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/mkdir/mkdir b/build/userland/bin/mkdir/mkdir
new file mode 100755
index 0000000..a109a59
Binary files /dev/null and b/build/userland/bin/mkdir/mkdir differ
diff --git a/build/userland/bin/mkdir/mkdir.o b/build/userland/bin/mkdir/mkdir.o
new file mode 100644
index 0000000..977be48
Binary files /dev/null and b/build/userland/bin/mkdir/mkdir.o differ
diff --git a/build/userland/bin/mv/.depend b/build/userland/bin/mv/.depend
new file mode 100644
index 0000000..06c67f3
--- /dev/null
+++ b/build/userland/bin/mv/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/mv.o: \
+ mv.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/mv/mv b/build/userland/bin/mv/mv
new file mode 100755
index 0000000..088b559
Binary files /dev/null and b/build/userland/bin/mv/mv differ
diff --git a/build/userland/bin/mv/mv.o b/build/userland/bin/mv/mv.o
new file mode 100644
index 0000000..318364a
Binary files /dev/null and b/build/userland/bin/mv/mv.o differ
diff --git a/build/userland/bin/pwd/.depend b/build/userland/bin/pwd/.depend
new file mode 100644
index 0000000..a6b3ac8
--- /dev/null
+++ b/build/userland/bin/pwd/.depend
@@ -0,0 +1,21 @@
+$(MYBUILDDIR)/pwd.o: \
+ pwd.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
diff --git a/build/userland/bin/pwd/pwd b/build/userland/bin/pwd/pwd
new file mode 100755
index 0000000..d1466d0
Binary files /dev/null and b/build/userland/bin/pwd/pwd differ
diff --git a/build/userland/bin/pwd/pwd.o b/build/userland/bin/pwd/pwd.o
new file mode 100644
index 0000000..ae1fa7b
Binary files /dev/null and b/build/userland/bin/pwd/pwd.o differ
diff --git a/build/userland/bin/rm/.depend b/build/userland/bin/rm/.depend
new file mode 100644
index 0000000..654e67e
--- /dev/null
+++ b/build/userland/bin/rm/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/rm.o: \
+ rm.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/rm/rm b/build/userland/bin/rm/rm
new file mode 100755
index 0000000..95096aa
Binary files /dev/null and b/build/userland/bin/rm/rm differ
diff --git a/build/userland/bin/rm/rm.o b/build/userland/bin/rm/rm.o
new file mode 100644
index 0000000..7269023
Binary files /dev/null and b/build/userland/bin/rm/rm.o differ
diff --git a/build/userland/bin/rmdir/.depend b/build/userland/bin/rmdir/.depend
new file mode 100644
index 0000000..095ebfb
--- /dev/null
+++ b/build/userland/bin/rmdir/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/rmdir.o: \
+ rmdir.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/rmdir/rmdir b/build/userland/bin/rmdir/rmdir
new file mode 100755
index 0000000..37673e3
Binary files /dev/null and b/build/userland/bin/rmdir/rmdir differ
diff --git a/build/userland/bin/rmdir/rmdir.o b/build/userland/bin/rmdir/rmdir.o
new file mode 100644
index 0000000..cc7d6f8
Binary files /dev/null and b/build/userland/bin/rmdir/rmdir.o differ
diff --git a/build/userland/bin/sh/.depend b/build/userland/bin/sh/.depend
new file mode 100644
index 0000000..b7ed8f4
--- /dev/null
+++ b/build/userland/bin/sh/.depend
@@ -0,0 +1,26 @@
+$(MYBUILDDIR)/sh.o: \
+ sh.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/sh/sh b/build/userland/bin/sh/sh
new file mode 100755
index 0000000..d57fefc
Binary files /dev/null and b/build/userland/bin/sh/sh differ
diff --git a/build/userland/bin/sh/sh.o b/build/userland/bin/sh/sh.o
new file mode 100644
index 0000000..935a0da
Binary files /dev/null and b/build/userland/bin/sh/sh.o differ
diff --git a/build/userland/bin/sync/.depend b/build/userland/bin/sync/.depend
new file mode 100644
index 0000000..0e979b4
--- /dev/null
+++ b/build/userland/bin/sync/.depend
@@ -0,0 +1,16 @@
+$(MYBUILDDIR)/sync.o: \
+ sync.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
diff --git a/build/userland/bin/sync/sync b/build/userland/bin/sync/sync
new file mode 100755
index 0000000..58b0690
Binary files /dev/null and b/build/userland/bin/sync/sync differ
diff --git a/build/userland/bin/sync/sync.o b/build/userland/bin/sync/sync.o
new file mode 100644
index 0000000..93518f6
Binary files /dev/null and b/build/userland/bin/sync/sync.o differ
diff --git a/build/userland/bin/tac/.depend b/build/userland/bin/tac/.depend
new file mode 100644
index 0000000..3057688
--- /dev/null
+++ b/build/userland/bin/tac/.depend
@@ -0,0 +1,23 @@
+$(MYBUILDDIR)/tac.o: \
+ tac.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/bin/tac/tac b/build/userland/bin/tac/tac
new file mode 100755
index 0000000..a3fcf23
Binary files /dev/null and b/build/userland/bin/tac/tac differ
diff --git a/build/userland/bin/tac/tac.o b/build/userland/bin/tac/tac.o
new file mode 100644
index 0000000..4243343
Binary files /dev/null and b/build/userland/bin/tac/tac.o differ
diff --git a/build/userland/bin/true/.depend b/build/userland/bin/true/.depend
new file mode 100644
index 0000000..02794c5
--- /dev/null
+++ b/build/userland/bin/true/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/true.o: \
+ true.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h
diff --git a/build/userland/bin/true/true b/build/userland/bin/true/true
new file mode 100755
index 0000000..d1685aa
Binary files /dev/null and b/build/userland/bin/true/true differ
diff --git a/build/userland/bin/true/true.o b/build/userland/bin/true/true.o
new file mode 100644
index 0000000..d155641
Binary files /dev/null and b/build/userland/bin/true/true.o differ
diff --git a/build/userland/lib/crt0/.depend b/build/userland/lib/crt0/.depend
new file mode 100644
index 0000000..0f185dd
--- /dev/null
+++ b/build/userland/lib/crt0/.depend
@@ -0,0 +1,4 @@
+$(MYBUILDDIR)/crt0.o: \
+ mips/crt0.S \
+ $(INSTALLTOP)/include/kern/mips/regdefs.h \
+ $(INSTALLTOP)/include/kern/syscall.h
diff --git a/build/userland/lib/crt0/crt0.o b/build/userland/lib/crt0/crt0.o
new file mode 100644
index 0000000..a1a7b39
Binary files /dev/null and b/build/userland/lib/crt0/crt0.o differ
diff --git a/build/userland/lib/hostcompat/.hostdepend b/build/userland/lib/hostcompat/.hostdepend
new file mode 100644
index 0000000..d5339d8
--- /dev/null
+++ b/build/userland/lib/hostcompat/.hostdepend
@@ -0,0 +1,12 @@
+$(MYBUILDDIR)/err.ho: \
+ err.c \
+ host-err.h
+$(MYBUILDDIR)/ntohll.ho: \
+ ntohll.c \
+ hostcompat.h
+$(MYBUILDDIR)/time.ho: \
+ time.c \
+ hostcompat.h
+$(MYBUILDDIR)/hostcompat.ho: \
+ hostcompat.c \
+ hostcompat.h
diff --git a/build/userland/lib/hostcompat/err.ho b/build/userland/lib/hostcompat/err.ho
new file mode 100644
index 0000000..e81c799
Binary files /dev/null and b/build/userland/lib/hostcompat/err.ho differ
diff --git a/build/userland/lib/hostcompat/hostcompat.ho b/build/userland/lib/hostcompat/hostcompat.ho
new file mode 100644
index 0000000..5280ee7
Binary files /dev/null and b/build/userland/lib/hostcompat/hostcompat.ho differ
diff --git a/build/userland/lib/hostcompat/libhostcompat.a b/build/userland/lib/hostcompat/libhostcompat.a
new file mode 100644
index 0000000..19c16e6
Binary files /dev/null and b/build/userland/lib/hostcompat/libhostcompat.a differ
diff --git a/build/userland/lib/hostcompat/ntohll.ho b/build/userland/lib/hostcompat/ntohll.ho
new file mode 100644
index 0000000..0d13ca1
Binary files /dev/null and b/build/userland/lib/hostcompat/ntohll.ho differ
diff --git a/build/userland/lib/hostcompat/time.ho b/build/userland/lib/hostcompat/time.ho
new file mode 100644
index 0000000..d2105b2
Binary files /dev/null and b/build/userland/lib/hostcompat/time.ho differ
diff --git a/build/userland/lib/libc/.depend b/build/userland/lib/libc/.depend
new file mode 100644
index 0000000..f89e4df
--- /dev/null
+++ b/build/userland/lib/libc/.depend
@@ -0,0 +1,668 @@
+$(MYBUILDDIR)/__printf.o: \
+ ../../../common/libc/printf/__printf.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdarg.h
+$(MYBUILDDIR)/snprintf.o: \
+ ../../../common/libc/printf/snprintf.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h
+$(MYBUILDDIR)/__puts.o: \
+ stdio/__puts.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/getchar.o: \
+ stdio/getchar.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/printf.o: \
+ stdio/printf.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/putchar.o: \
+ stdio/putchar.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/puts.o: \
+ stdio/puts.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/abort.o: \
+ stdlib/abort.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/atoi.o: \
+ ../../../common/libc/stdlib/atoi.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/exit.o: \
+ stdlib/exit.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/getenv.o: \
+ stdlib/getenv.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/malloc.o: \
+ stdlib/malloc.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/assert.h
+$(MYBUILDDIR)/qsort.o: \
+ stdlib/qsort.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h
+$(MYBUILDDIR)/random.o: \
+ stdlib/random.c \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/system.o: \
+ stdlib/system.c \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/bzero.o: \
+ ../../../common/libc/string/bzero.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memcmp.o: \
+ string/memcmp.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memcpy.o: \
+ ../../../common/libc/string/memcpy.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memmove.o: \
+ ../../../common/libc/string/memmove.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/memset.o: \
+ ../../../common/libc/string/memset.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strcat.o: \
+ ../../../common/libc/string/strcat.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strchr.o: \
+ ../../../common/libc/string/strchr.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strcmp.o: \
+ ../../../common/libc/string/strcmp.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strcpy.o: \
+ ../../../common/libc/string/strcpy.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strerror.o: \
+ string/strerror.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/errmsg.h
+$(MYBUILDDIR)/strlen.o: \
+ ../../../common/libc/string/strlen.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strrchr.o: \
+ ../../../common/libc/string/strrchr.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strtok.o: \
+ string/strtok.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/strtok_r.o: \
+ ../../../common/libc/string/strtok_r.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
+$(MYBUILDDIR)/time.o: \
+ time/time.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
+$(MYBUILDDIR)/syscalls.o: \
+ ../../../build/userland/lib/libc/syscalls.S \
+ $(INSTALLTOP)/include/kern/syscall.h \
+ $(INSTALLTOP)/include/machine/regdefs.h
+$(MYBUILDDIR)/adddi3.o: \
+ ../../../common/gcc-millicode/adddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/anddi3.o: \
+ ../../../common/gcc-millicode/anddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/ashldi3.o: \
+ ../../../common/gcc-millicode/ashldi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/ashrdi3.o: \
+ ../../../common/gcc-millicode/ashrdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/cmpdi2.o: \
+ ../../../common/gcc-millicode/cmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/divdi3.o: \
+ ../../../common/gcc-millicode/divdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/iordi3.o: \
+ ../../../common/gcc-millicode/iordi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/lshldi3.o: \
+ ../../../common/gcc-millicode/lshldi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/lshrdi3.o: \
+ ../../../common/gcc-millicode/lshrdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/moddi3.o: \
+ ../../../common/gcc-millicode/moddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/muldi3.o: \
+ ../../../common/gcc-millicode/muldi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/negdi2.o: \
+ ../../../common/gcc-millicode/negdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/notdi2.o: \
+ ../../../common/gcc-millicode/notdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/qdivrem.o: \
+ ../../../common/gcc-millicode/qdivrem.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/subdi3.o: \
+ ../../../common/gcc-millicode/subdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/ucmpdi2.o: \
+ ../../../common/gcc-millicode/ucmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/udivdi3.o: \
+ ../../../common/gcc-millicode/udivdi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/umoddi3.o: \
+ ../../../common/gcc-millicode/umoddi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/xordi3.o: \
+ ../../../common/gcc-millicode/xordi3.c \
+ ../../../common/gcc-millicode/longlong.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/endian.h \
+ $(INSTALLTOP)/include/kern/endian.h \
+ $(INSTALLTOP)/include/kern/machine/endian.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/__assert.o: \
+ unix/__assert.c \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h
+$(MYBUILDDIR)/err.o: \
+ unix/err.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/errno.o: \
+ unix/errno.c \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/execvp.o: \
+ unix/execvp.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h
+$(MYBUILDDIR)/getcwd.o: \
+ unix/getcwd.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
+$(MYBUILDDIR)/setjmp.o: \
+ ../../../common/libc/arch/mips/setjmp.S \
+ $(INSTALLTOP)/include/kern/mips/regdefs.h
diff --git a/build/userland/lib/libc/__assert.o b/build/userland/lib/libc/__assert.o
new file mode 100644
index 0000000..5704139
Binary files /dev/null and b/build/userland/lib/libc/__assert.o differ
diff --git a/build/userland/lib/libc/__printf.o b/build/userland/lib/libc/__printf.o
new file mode 100644
index 0000000..ef0bca4
Binary files /dev/null and b/build/userland/lib/libc/__printf.o differ
diff --git a/build/userland/lib/libc/__puts.o b/build/userland/lib/libc/__puts.o
new file mode 100644
index 0000000..ca1422b
Binary files /dev/null and b/build/userland/lib/libc/__puts.o differ
diff --git a/build/userland/lib/libc/abort.o b/build/userland/lib/libc/abort.o
new file mode 100644
index 0000000..d45e7cb
Binary files /dev/null and b/build/userland/lib/libc/abort.o differ
diff --git a/build/userland/lib/libc/adddi3.o b/build/userland/lib/libc/adddi3.o
new file mode 100644
index 0000000..695c85d
Binary files /dev/null and b/build/userland/lib/libc/adddi3.o differ
diff --git a/build/userland/lib/libc/anddi3.o b/build/userland/lib/libc/anddi3.o
new file mode 100644
index 0000000..7f2c979
Binary files /dev/null and b/build/userland/lib/libc/anddi3.o differ
diff --git a/build/userland/lib/libc/ashldi3.o b/build/userland/lib/libc/ashldi3.o
new file mode 100644
index 0000000..7716175
Binary files /dev/null and b/build/userland/lib/libc/ashldi3.o differ
diff --git a/build/userland/lib/libc/ashrdi3.o b/build/userland/lib/libc/ashrdi3.o
new file mode 100644
index 0000000..ab7c011
Binary files /dev/null and b/build/userland/lib/libc/ashrdi3.o differ
diff --git a/build/userland/lib/libc/atoi.o b/build/userland/lib/libc/atoi.o
new file mode 100644
index 0000000..2ef64c1
Binary files /dev/null and b/build/userland/lib/libc/atoi.o differ
diff --git a/build/userland/lib/libc/bzero.o b/build/userland/lib/libc/bzero.o
new file mode 100644
index 0000000..a7b30dc
Binary files /dev/null and b/build/userland/lib/libc/bzero.o differ
diff --git a/build/userland/lib/libc/cmpdi2.o b/build/userland/lib/libc/cmpdi2.o
new file mode 100644
index 0000000..22f8dc5
Binary files /dev/null and b/build/userland/lib/libc/cmpdi2.o differ
diff --git a/build/userland/lib/libc/divdi3.o b/build/userland/lib/libc/divdi3.o
new file mode 100644
index 0000000..3f849ba
Binary files /dev/null and b/build/userland/lib/libc/divdi3.o differ
diff --git a/build/userland/lib/libc/err.o b/build/userland/lib/libc/err.o
new file mode 100644
index 0000000..452b5c9
Binary files /dev/null and b/build/userland/lib/libc/err.o differ
diff --git a/build/userland/lib/libc/errno.o b/build/userland/lib/libc/errno.o
new file mode 100644
index 0000000..e386437
Binary files /dev/null and b/build/userland/lib/libc/errno.o differ
diff --git a/build/userland/lib/libc/execvp.o b/build/userland/lib/libc/execvp.o
new file mode 100644
index 0000000..60677f6
Binary files /dev/null and b/build/userland/lib/libc/execvp.o differ
diff --git a/build/userland/lib/libc/exit.o b/build/userland/lib/libc/exit.o
new file mode 100644
index 0000000..41638df
Binary files /dev/null and b/build/userland/lib/libc/exit.o differ
diff --git a/build/userland/lib/libc/getchar.o b/build/userland/lib/libc/getchar.o
new file mode 100644
index 0000000..8d0631c
Binary files /dev/null and b/build/userland/lib/libc/getchar.o differ
diff --git a/build/userland/lib/libc/getcwd.o b/build/userland/lib/libc/getcwd.o
new file mode 100644
index 0000000..dd4ba45
Binary files /dev/null and b/build/userland/lib/libc/getcwd.o differ
diff --git a/build/userland/lib/libc/getenv.o b/build/userland/lib/libc/getenv.o
new file mode 100644
index 0000000..6af2057
Binary files /dev/null and b/build/userland/lib/libc/getenv.o differ
diff --git a/build/userland/lib/libc/iordi3.o b/build/userland/lib/libc/iordi3.o
new file mode 100644
index 0000000..7f2ddb4
Binary files /dev/null and b/build/userland/lib/libc/iordi3.o differ
diff --git a/build/userland/lib/libc/libc.a b/build/userland/lib/libc/libc.a
new file mode 100644
index 0000000..df7d901
Binary files /dev/null and b/build/userland/lib/libc/libc.a differ
diff --git a/build/userland/lib/libc/lshldi3.o b/build/userland/lib/libc/lshldi3.o
new file mode 100644
index 0000000..6382c3a
Binary files /dev/null and b/build/userland/lib/libc/lshldi3.o differ
diff --git a/build/userland/lib/libc/lshrdi3.o b/build/userland/lib/libc/lshrdi3.o
new file mode 100644
index 0000000..38a692e
Binary files /dev/null and b/build/userland/lib/libc/lshrdi3.o differ
diff --git a/build/userland/lib/libc/malloc.o b/build/userland/lib/libc/malloc.o
new file mode 100644
index 0000000..44b522d
Binary files /dev/null and b/build/userland/lib/libc/malloc.o differ
diff --git a/build/userland/lib/libc/memcmp.o b/build/userland/lib/libc/memcmp.o
new file mode 100644
index 0000000..eab32d9
Binary files /dev/null and b/build/userland/lib/libc/memcmp.o differ
diff --git a/build/userland/lib/libc/memcpy.o b/build/userland/lib/libc/memcpy.o
new file mode 100644
index 0000000..607895f
Binary files /dev/null and b/build/userland/lib/libc/memcpy.o differ
diff --git a/build/userland/lib/libc/memmove.o b/build/userland/lib/libc/memmove.o
new file mode 100644
index 0000000..cecefd8
Binary files /dev/null and b/build/userland/lib/libc/memmove.o differ
diff --git a/build/userland/lib/libc/memset.o b/build/userland/lib/libc/memset.o
new file mode 100644
index 0000000..8082c45
Binary files /dev/null and b/build/userland/lib/libc/memset.o differ
diff --git a/build/userland/lib/libc/moddi3.o b/build/userland/lib/libc/moddi3.o
new file mode 100644
index 0000000..0743491
Binary files /dev/null and b/build/userland/lib/libc/moddi3.o differ
diff --git a/build/userland/lib/libc/muldi3.o b/build/userland/lib/libc/muldi3.o
new file mode 100644
index 0000000..5f44468
Binary files /dev/null and b/build/userland/lib/libc/muldi3.o differ
diff --git a/build/userland/lib/libc/negdi2.o b/build/userland/lib/libc/negdi2.o
new file mode 100644
index 0000000..9615795
Binary files /dev/null and b/build/userland/lib/libc/negdi2.o differ
diff --git a/build/userland/lib/libc/notdi2.o b/build/userland/lib/libc/notdi2.o
new file mode 100644
index 0000000..fd3d415
Binary files /dev/null and b/build/userland/lib/libc/notdi2.o differ
diff --git a/build/userland/lib/libc/printf.o b/build/userland/lib/libc/printf.o
new file mode 100644
index 0000000..54cdf4f
Binary files /dev/null and b/build/userland/lib/libc/printf.o differ
diff --git a/build/userland/lib/libc/putchar.o b/build/userland/lib/libc/putchar.o
new file mode 100644
index 0000000..a69a759
Binary files /dev/null and b/build/userland/lib/libc/putchar.o differ
diff --git a/build/userland/lib/libc/puts.o b/build/userland/lib/libc/puts.o
new file mode 100644
index 0000000..0532588
Binary files /dev/null and b/build/userland/lib/libc/puts.o differ
diff --git a/build/userland/lib/libc/qdivrem.o b/build/userland/lib/libc/qdivrem.o
new file mode 100644
index 0000000..ac862f0
Binary files /dev/null and b/build/userland/lib/libc/qdivrem.o differ
diff --git a/build/userland/lib/libc/qsort.o b/build/userland/lib/libc/qsort.o
new file mode 100644
index 0000000..548ea3d
Binary files /dev/null and b/build/userland/lib/libc/qsort.o differ
diff --git a/build/userland/lib/libc/random.o b/build/userland/lib/libc/random.o
new file mode 100644
index 0000000..e0de721
Binary files /dev/null and b/build/userland/lib/libc/random.o differ
diff --git a/build/userland/lib/libc/setjmp.o b/build/userland/lib/libc/setjmp.o
new file mode 100644
index 0000000..607049e
Binary files /dev/null and b/build/userland/lib/libc/setjmp.o differ
diff --git a/build/userland/lib/libc/snprintf.o b/build/userland/lib/libc/snprintf.o
new file mode 100644
index 0000000..60cb2ed
Binary files /dev/null and b/build/userland/lib/libc/snprintf.o differ
diff --git a/build/userland/lib/libc/strcat.o b/build/userland/lib/libc/strcat.o
new file mode 100644
index 0000000..21fe18c
Binary files /dev/null and b/build/userland/lib/libc/strcat.o differ
diff --git a/build/userland/lib/libc/strchr.o b/build/userland/lib/libc/strchr.o
new file mode 100644
index 0000000..012656c
Binary files /dev/null and b/build/userland/lib/libc/strchr.o differ
diff --git a/build/userland/lib/libc/strcmp.o b/build/userland/lib/libc/strcmp.o
new file mode 100644
index 0000000..e13a771
Binary files /dev/null and b/build/userland/lib/libc/strcmp.o differ
diff --git a/build/userland/lib/libc/strcpy.o b/build/userland/lib/libc/strcpy.o
new file mode 100644
index 0000000..2f4ef53
Binary files /dev/null and b/build/userland/lib/libc/strcpy.o differ
diff --git a/build/userland/lib/libc/strerror.o b/build/userland/lib/libc/strerror.o
new file mode 100644
index 0000000..17c8d15
Binary files /dev/null and b/build/userland/lib/libc/strerror.o differ
diff --git a/build/userland/lib/libc/strlen.o b/build/userland/lib/libc/strlen.o
new file mode 100644
index 0000000..ffa0f0f
Binary files /dev/null and b/build/userland/lib/libc/strlen.o differ
diff --git a/build/userland/lib/libc/strrchr.o b/build/userland/lib/libc/strrchr.o
new file mode 100644
index 0000000..18395aa
Binary files /dev/null and b/build/userland/lib/libc/strrchr.o differ
diff --git a/build/userland/lib/libc/strtok.o b/build/userland/lib/libc/strtok.o
new file mode 100644
index 0000000..685c65d
Binary files /dev/null and b/build/userland/lib/libc/strtok.o differ
diff --git a/build/userland/lib/libc/strtok_r.o b/build/userland/lib/libc/strtok_r.o
new file mode 100644
index 0000000..2d9bc95
Binary files /dev/null and b/build/userland/lib/libc/strtok_r.o differ
diff --git a/build/userland/lib/libc/subdi3.o b/build/userland/lib/libc/subdi3.o
new file mode 100644
index 0000000..2586c8c
Binary files /dev/null and b/build/userland/lib/libc/subdi3.o differ
diff --git a/build/userland/lib/libc/syscalls.S b/build/userland/lib/libc/syscalls.S
new file mode 100644
index 0000000..d9e9d8e
--- /dev/null
+++ b/build/userland/lib/libc/syscalls.S
@@ -0,0 +1,182 @@
+/* Automatically generated; do not edit */
+/*
+ * Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009
+ *	The President and Fellows of Harvard College.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * This file is copied to syscalls.S, and then the actual syscalls are
+ * appended as lines of the form
+ *    SYSCALL(symbol, number)
+ *
+ * Warning: gccs before 3.0 run cpp in -traditional mode on .S files.
+ * So if you use an older gcc you'll need to change the token pasting
+ * in SYSCALL().
+ */
+
+#include <kern/syscall.h>
+#include <machine/regdefs.h>
+
+/*
+ * Definition for each syscall.
+ * All we do is load the syscall number into v0, the register the
+ * kernel expects to find it in, and jump to the shared syscall code.
+ * (Note that the addiu instruction is in the jump's delay slot.)
+ */
+#define SYSCALL(sym, num) \
+   .set noreorder		; \
+   .globl sym			; \
+   .type sym,@function		; \
+   .ent sym			; \
+sym:				; \
+   j __syscall                  ; \
+   addiu v0, $0, SYS_##sym	; \
+   .end sym			; \
+   .set reorder
+
+/*
+ * Now, the shared system call code.
+ * The MIPS syscall ABI is as follows:
+ *
+ *    On entry, call number in v0. The rest is like a normal function
+ *    call: four args in a0-a3, the other args on the stack.
+ *
+ *    On successful return, zero in a3 register; return value in v0
+ *    (v0 and v1 for a 64-bit return value).
+ *
+ *    On error return, nonzero in a3 register; errno value in v0.
+ *
+ * The use of a3 as a return register to hold the success flag is
+ * gross, but I didn't make it up.
+ *
+ * Note that by longstanding Unix convention and POSIX decree, errno
+ * is not to be set unless the call actually fails.
+ */
+
+   .set noreorder
+   .text
+   .type __syscall,@function
+   .ent __syscall
+__syscall:
+   syscall              /* make system call */
+   beq a3, $0, 1f       /* if a3 is zero, call succeeded */
+   nop			/* delay slot */
+   sw v0, errno        /* call failed: store errno */
+   li v1, -1		/* and force return value to -1 */
+   li v0, -1
+1:
+   j ra			/* return */
+   nop			/* delay slot */
+   .end __syscall
+   .set reorder
+
+SYSCALL(fork, 0)
+SYSCALL(vfork, 1)
+SYSCALL(execv, 2)
+SYSCALL(_exit, 3)
+SYSCALL(waitpid, 4)
+SYSCALL(getpid, 5)
+SYSCALL(getppid, 6)
+SYSCALL(sbrk, 7)
+SYSCALL(mmap, 8)
+SYSCALL(munmap, 9)
+SYSCALL(mprotect, 10)
+SYSCALL(umask, 17)
+SYSCALL(issetugid, 18)
+SYSCALL(getresuid, 19)
+SYSCALL(setresuid, 20)
+SYSCALL(getresgid, 21)
+SYSCALL(setresgid, 22)
+SYSCALL(getgroups, 23)
+SYSCALL(setgroups, 24)
+SYSCALL(__getlogin, 25)
+SYSCALL(__setlogin, 26)
+SYSCALL(kill, 27)
+SYSCALL(sigaction, 28)
+SYSCALL(sigpending, 29)
+SYSCALL(sigprocmask, 30)
+SYSCALL(sigsuspend, 31)
+SYSCALL(sigreturn, 32)
+SYSCALL(open, 45)
+SYSCALL(pipe, 46)
+SYSCALL(dup, 47)
+SYSCALL(dup2, 48)
+SYSCALL(close, 49)
+SYSCALL(read, 50)
+SYSCALL(pread, 51)
+SYSCALL(getdirentry, 54)
+SYSCALL(write, 55)
+SYSCALL(pwrite, 56)
+SYSCALL(lseek, 59)
+SYSCALL(flock, 60)
+SYSCALL(ftruncate, 61)
+SYSCALL(fsync, 62)
+SYSCALL(fcntl, 63)
+SYSCALL(ioctl, 64)
+SYSCALL(select, 65)
+SYSCALL(poll, 66)
+SYSCALL(link, 67)
+SYSCALL(remove, 68)
+SYSCALL(mkdir, 69)
+SYSCALL(rmdir, 70)
+SYSCALL(mkfifo, 71)
+SYSCALL(rename, 72)
+SYSCALL(access, 73)
+SYSCALL(chdir, 74)
+SYSCALL(fchdir, 75)
+SYSCALL(__getcwd, 76)
+SYSCALL(symlink, 77)
+SYSCALL(readlink, 78)
+SYSCALL(mount, 79)
+SYSCALL(unmount, 80)
+SYSCALL(stat, 81)
+SYSCALL(fstat, 82)
+SYSCALL(lstat, 83)
+SYSCALL(utimes, 84)
+SYSCALL(futimes, 85)
+SYSCALL(lutimes, 86)
+SYSCALL(chmod, 87)
+SYSCALL(chown, 88)
+SYSCALL(fchmod, 89)
+SYSCALL(fchown, 90)
+SYSCALL(lchmod, 91)
+SYSCALL(lchown, 92)
+SYSCALL(socket, 98)
+SYSCALL(bind, 99)
+SYSCALL(connect, 100)
+SYSCALL(listen, 101)
+SYSCALL(accept, 102)
+SYSCALL(shutdown, 104)
+SYSCALL(getsockname, 105)
+SYSCALL(getpeername, 106)
+SYSCALL(getsockopt, 107)
+SYSCALL(setsockopt, 108)
+SYSCALL(__time, 113)
+SYSCALL(__settime, 114)
+SYSCALL(nanosleep, 115)
+SYSCALL(sync, 118)
+SYSCALL(reboot, 119)
diff --git a/build/userland/lib/libc/syscalls.o b/build/userland/lib/libc/syscalls.o
new file mode 100644
index 0000000..cb5c0e2
Binary files /dev/null and b/build/userland/lib/libc/syscalls.o differ
diff --git a/build/userland/lib/libc/system.o b/build/userland/lib/libc/system.o
new file mode 100644
index 0000000..184e608
Binary files /dev/null and b/build/userland/lib/libc/system.o differ
diff --git a/build/userland/lib/libc/time.o b/build/userland/lib/libc/time.o
new file mode 100644
index 0000000..53117fd
Binary files /dev/null and b/build/userland/lib/libc/time.o differ
diff --git a/build/userland/lib/libc/ucmpdi2.o b/build/userland/lib/libc/ucmpdi2.o
new file mode 100644
index 0000000..84c6c92
Binary files /dev/null and b/build/userland/lib/libc/ucmpdi2.o differ
diff --git a/build/userland/lib/libc/udivdi3.o b/build/userland/lib/libc/udivdi3.o
new file mode 100644
index 0000000..f9963f7
Binary files /dev/null and b/build/userland/lib/libc/udivdi3.o differ
diff --git a/build/userland/lib/libc/umoddi3.o b/build/userland/lib/libc/umoddi3.o
new file mode 100644
index 0000000..45af5cc
Binary files /dev/null and b/build/userland/lib/libc/umoddi3.o differ
diff --git a/build/userland/lib/libc/xordi3.o b/build/userland/lib/libc/xordi3.o
new file mode 100644
index 0000000..a2870ed
Binary files /dev/null and b/build/userland/lib/libc/xordi3.o differ
diff --git a/build/userland/lib/libtest/.depend b/build/userland/lib/libtest/.depend
new file mode 100644
index 0000000..5ba559a
--- /dev/null
+++ b/build/userland/lib/libtest/.depend
@@ -0,0 +1,38 @@
+$(MYBUILDDIR)/triple.o: \
+ triple.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/test/triple.h
+$(MYBUILDDIR)/quint.o: \
+ quint.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/test/quint.h
diff --git a/build/userland/lib/libtest/libtest.a b/build/userland/lib/libtest/libtest.a
new file mode 100644
index 0000000..d029e89
Binary files /dev/null and b/build/userland/lib/libtest/libtest.a differ
diff --git a/build/userland/lib/libtest/quint.o b/build/userland/lib/libtest/quint.o
new file mode 100644
index 0000000..5c0d741
Binary files /dev/null and b/build/userland/lib/libtest/quint.o differ
diff --git a/build/userland/lib/libtest/triple.o b/build/userland/lib/libtest/triple.o
new file mode 100644
index 0000000..49a5fd8
Binary files /dev/null and b/build/userland/lib/libtest/triple.o differ
diff --git a/build/userland/sbin/dumpsfs/.depend b/build/userland/sbin/dumpsfs/.depend
new file mode 100644
index 0000000..76455a4
--- /dev/null
+++ b/build/userland/sbin/dumpsfs/.depend
@@ -0,0 +1,51 @@
+$(MYBUILDDIR)/dumpsfs.o: \
+ dumpsfs.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdbool.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/disk.o: \
+ ../mksfs/disk.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h \
+ ../mksfs/support.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/support.o: \
+ ../mksfs/support.c
diff --git a/build/userland/sbin/dumpsfs/.hostdepend b/build/userland/sbin/dumpsfs/.hostdepend
new file mode 100644
index 0000000..4ad26c7
--- /dev/null
+++ b/build/userland/sbin/dumpsfs/.hostdepend
@@ -0,0 +1,12 @@
+$(MYBUILDDIR)/dumpsfs.ho: \
+ dumpsfs.c \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/disk.ho: \
+ ../mksfs/disk.c \
+ ../mksfs/support.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/support.ho: \
+ ../mksfs/support.c
diff --git a/build/userland/sbin/dumpsfs/disk.ho b/build/userland/sbin/dumpsfs/disk.ho
new file mode 100644
index 0000000..7b18d00
Binary files /dev/null and b/build/userland/sbin/dumpsfs/disk.ho differ
diff --git a/build/userland/sbin/dumpsfs/disk.o b/build/userland/sbin/dumpsfs/disk.o
new file mode 100644
index 0000000..0de7cb0
Binary files /dev/null and b/build/userland/sbin/dumpsfs/disk.o differ
diff --git a/build/userland/sbin/dumpsfs/dumpsfs b/build/userland/sbin/dumpsfs/dumpsfs
new file mode 100755
index 0000000..757fcb9
Binary files /dev/null and b/build/userland/sbin/dumpsfs/dumpsfs differ
diff --git a/build/userland/sbin/dumpsfs/dumpsfs.ho b/build/userland/sbin/dumpsfs/dumpsfs.ho
new file mode 100644
index 0000000..bed2bb3
Binary files /dev/null and b/build/userland/sbin/dumpsfs/dumpsfs.ho differ
diff --git a/build/userland/sbin/dumpsfs/dumpsfs.o b/build/userland/sbin/dumpsfs/dumpsfs.o
new file mode 100644
index 0000000..3663022
Binary files /dev/null and b/build/userland/sbin/dumpsfs/dumpsfs.o differ
diff --git a/build/userland/sbin/dumpsfs/host-dumpsfs b/build/userland/sbin/dumpsfs/host-dumpsfs
new file mode 100755
index 0000000..fdf3e15
Binary files /dev/null and b/build/userland/sbin/dumpsfs/host-dumpsfs differ
diff --git a/build/userland/sbin/dumpsfs/support.ho b/build/userland/sbin/dumpsfs/support.ho
new file mode 100644
index 0000000..b5f4f43
Binary files /dev/null and b/build/userland/sbin/dumpsfs/support.ho differ
diff --git a/build/userland/sbin/dumpsfs/support.o b/build/userland/sbin/dumpsfs/support.o
new file mode 100644
index 0000000..c300d30
Binary files /dev/null and b/build/userland/sbin/dumpsfs/support.o differ
diff --git a/build/userland/sbin/halt/.depend b/build/userland/sbin/halt/.depend
new file mode 100644
index 0000000..51a6d62
--- /dev/null
+++ b/build/userland/sbin/halt/.depend
@@ -0,0 +1,16 @@
+$(MYBUILDDIR)/halt.o: \
+ halt.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
diff --git a/build/userland/sbin/halt/halt b/build/userland/sbin/halt/halt
new file mode 100755
index 0000000..246c125
Binary files /dev/null and b/build/userland/sbin/halt/halt differ
diff --git a/build/userland/sbin/halt/halt.o b/build/userland/sbin/halt/halt.o
new file mode 100644
index 0000000..f37672d
Binary files /dev/null and b/build/userland/sbin/halt/halt.o differ
diff --git a/build/userland/sbin/mksfs/.depend b/build/userland/sbin/mksfs/.depend
new file mode 100644
index 0000000..3f5fd83
--- /dev/null
+++ b/build/userland/sbin/mksfs/.depend
@@ -0,0 +1,47 @@
+$(MYBUILDDIR)/mksfs.o: \
+ mksfs.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ disk.h
+$(MYBUILDDIR)/disk.o: \
+ disk.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h \
+ support.h \
+ disk.h
+$(MYBUILDDIR)/support.o: \
+ support.c
diff --git a/build/userland/sbin/mksfs/.hostdepend b/build/userland/sbin/mksfs/.hostdepend
new file mode 100644
index 0000000..85fc22a
--- /dev/null
+++ b/build/userland/sbin/mksfs/.hostdepend
@@ -0,0 +1,12 @@
+$(MYBUILDDIR)/mksfs.ho: \
+ mksfs.c \
+ support.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ disk.h
+$(MYBUILDDIR)/disk.ho: \
+ disk.c \
+ support.h \
+ disk.h
+$(MYBUILDDIR)/support.ho: \
+ support.c
diff --git a/build/userland/sbin/mksfs/disk.ho b/build/userland/sbin/mksfs/disk.ho
new file mode 100644
index 0000000..1c6dd21
Binary files /dev/null and b/build/userland/sbin/mksfs/disk.ho differ
diff --git a/build/userland/sbin/mksfs/disk.o b/build/userland/sbin/mksfs/disk.o
new file mode 100644
index 0000000..4ec988e
Binary files /dev/null and b/build/userland/sbin/mksfs/disk.o differ
diff --git a/build/userland/sbin/mksfs/host-mksfs b/build/userland/sbin/mksfs/host-mksfs
new file mode 100755
index 0000000..3f90039
Binary files /dev/null and b/build/userland/sbin/mksfs/host-mksfs differ
diff --git a/build/userland/sbin/mksfs/mksfs b/build/userland/sbin/mksfs/mksfs
new file mode 100755
index 0000000..5a4e11e
Binary files /dev/null and b/build/userland/sbin/mksfs/mksfs differ
diff --git a/build/userland/sbin/mksfs/mksfs.ho b/build/userland/sbin/mksfs/mksfs.ho
new file mode 100644
index 0000000..adb1ec9
Binary files /dev/null and b/build/userland/sbin/mksfs/mksfs.ho differ
diff --git a/build/userland/sbin/mksfs/mksfs.o b/build/userland/sbin/mksfs/mksfs.o
new file mode 100644
index 0000000..556789e
Binary files /dev/null and b/build/userland/sbin/mksfs/mksfs.o differ
diff --git a/build/userland/sbin/mksfs/support.ho b/build/userland/sbin/mksfs/support.ho
new file mode 100644
index 0000000..b5f4f43
Binary files /dev/null and b/build/userland/sbin/mksfs/support.ho differ
diff --git a/build/userland/sbin/mksfs/support.o b/build/userland/sbin/mksfs/support.o
new file mode 100644
index 0000000..c300d30
Binary files /dev/null and b/build/userland/sbin/mksfs/support.o differ
diff --git a/build/userland/sbin/poweroff/.depend b/build/userland/sbin/poweroff/.depend
new file mode 100644
index 0000000..b43bcbc
--- /dev/null
+++ b/build/userland/sbin/poweroff/.depend
@@ -0,0 +1,16 @@
+$(MYBUILDDIR)/poweroff.o: \
+ poweroff.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
diff --git a/build/userland/sbin/poweroff/poweroff b/build/userland/sbin/poweroff/poweroff
new file mode 100755
index 0000000..81e5f41
Binary files /dev/null and b/build/userland/sbin/poweroff/poweroff differ
diff --git a/build/userland/sbin/poweroff/poweroff.o b/build/userland/sbin/poweroff/poweroff.o
new file mode 100644
index 0000000..33ad9c0
Binary files /dev/null and b/build/userland/sbin/poweroff/poweroff.o differ
diff --git a/build/userland/sbin/reboot/.depend b/build/userland/sbin/reboot/.depend
new file mode 100644
index 0000000..d4bdcd3
--- /dev/null
+++ b/build/userland/sbin/reboot/.depend
@@ -0,0 +1,16 @@
+$(MYBUILDDIR)/reboot.o: \
+ reboot.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
diff --git a/build/userland/sbin/reboot/reboot b/build/userland/sbin/reboot/reboot
new file mode 100755
index 0000000..2789e51
Binary files /dev/null and b/build/userland/sbin/reboot/reboot differ
diff --git a/build/userland/sbin/reboot/reboot.o b/build/userland/sbin/reboot/reboot.o
new file mode 100644
index 0000000..76c3c7f
Binary files /dev/null and b/build/userland/sbin/reboot/reboot.o differ
diff --git a/build/userland/sbin/sfsck/.depend b/build/userland/sbin/sfsck/.depend
new file mode 100644
index 0000000..55f0509
--- /dev/null
+++ b/build/userland/sbin/sfsck/.depend
@@ -0,0 +1,203 @@
+$(MYBUILDDIR)/main.o: \
+ main.c \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ ../mksfs/disk.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ inode.h \
+ passes.h \
+ main.h
+$(MYBUILDDIR)/pass1.o: \
+ pass1.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ ../mksfs/disk.h \
+ utils.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ ibmacros.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ inode.h \
+ passes.h \
+ main.h
+$(MYBUILDDIR)/pass2.o: \
+ pass2.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ ../mksfs/disk.h \
+ utils.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ ibmacros.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ inode.h \
+ passes.h \
+ main.h
+$(MYBUILDDIR)/inode.o: \
+ inode.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ utils.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ sfs.h \
+ freemap.h \
+ inode.h \
+ main.h
+$(MYBUILDDIR)/freemap.o: \
+ freemap.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ utils.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ main.h
+$(MYBUILDDIR)/sb.o: \
+ sb.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ utils.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ main.h
+$(MYBUILDDIR)/sfs.o: \
+ sfs.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/include/kern/sfs.h \
+ ../mksfs/disk.h \
+ utils.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ ibmacros.h \
+ sfs.h \
+ main.h
+$(MYBUILDDIR)/utils.o: \
+ utils.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ compat.h \
+ ../mksfs/support.h \
+ utils.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ main.h
+$(MYBUILDDIR)/disk.o: \
+ ../mksfs/disk.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h \
+ ../mksfs/support.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/support.o: \
+ ../mksfs/support.c
diff --git a/build/userland/sbin/sfsck/.hostdepend b/build/userland/sbin/sfsck/.hostdepend
new file mode 100644
index 0000000..8a5c39d
--- /dev/null
+++ b/build/userland/sbin/sfsck/.hostdepend
@@ -0,0 +1,99 @@
+$(MYBUILDDIR)/main.ho: \
+ main.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ ../mksfs/disk.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ inode.h \
+ passes.h \
+ main.h
+$(MYBUILDDIR)/pass1.ho: \
+ pass1.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ ../mksfs/disk.h \
+ utils.h \
+ ibmacros.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ inode.h \
+ passes.h \
+ main.h
+$(MYBUILDDIR)/pass2.ho: \
+ pass2.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ ../mksfs/disk.h \
+ utils.h \
+ ibmacros.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ inode.h \
+ passes.h \
+ main.h
+$(MYBUILDDIR)/inode.ho: \
+ inode.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ utils.h \
+ sfs.h \
+ freemap.h \
+ inode.h \
+ main.h
+$(MYBUILDDIR)/freemap.ho: \
+ freemap.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ utils.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ main.h
+$(MYBUILDDIR)/sb.ho: \
+ sb.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ utils.h \
+ sfs.h \
+ sb.h \
+ freemap.h \
+ main.h
+$(MYBUILDDIR)/sfs.ho: \
+ sfs.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ $(INSTALLTOP)/hostinclude/kern/sfs.h \
+ ../mksfs/disk.h \
+ utils.h \
+ ibmacros.h \
+ sfs.h \
+ main.h
+$(MYBUILDDIR)/utils.ho: \
+ utils.c \
+ compat.h \
+ ../mksfs/support.h \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ utils.h \
+ main.h
+$(MYBUILDDIR)/disk.ho: \
+ ../mksfs/disk.c \
+ ../mksfs/support.h \
+ ../mksfs/disk.h
+$(MYBUILDDIR)/support.ho: \
+ ../mksfs/support.c
diff --git a/build/userland/sbin/sfsck/disk.ho b/build/userland/sbin/sfsck/disk.ho
new file mode 100644
index 0000000..7b18d00
Binary files /dev/null and b/build/userland/sbin/sfsck/disk.ho differ
diff --git a/build/userland/sbin/sfsck/disk.o b/build/userland/sbin/sfsck/disk.o
new file mode 100644
index 0000000..0de7cb0
Binary files /dev/null and b/build/userland/sbin/sfsck/disk.o differ
diff --git a/build/userland/sbin/sfsck/freemap.ho b/build/userland/sbin/sfsck/freemap.ho
new file mode 100644
index 0000000..6cc96ba
Binary files /dev/null and b/build/userland/sbin/sfsck/freemap.ho differ
diff --git a/build/userland/sbin/sfsck/freemap.o b/build/userland/sbin/sfsck/freemap.o
new file mode 100644
index 0000000..635eb28
Binary files /dev/null and b/build/userland/sbin/sfsck/freemap.o differ
diff --git a/build/userland/sbin/sfsck/host-sfsck b/build/userland/sbin/sfsck/host-sfsck
new file mode 100755
index 0000000..086fff5
Binary files /dev/null and b/build/userland/sbin/sfsck/host-sfsck differ
diff --git a/build/userland/sbin/sfsck/inode.ho b/build/userland/sbin/sfsck/inode.ho
new file mode 100644
index 0000000..104f5f8
Binary files /dev/null and b/build/userland/sbin/sfsck/inode.ho differ
diff --git a/build/userland/sbin/sfsck/inode.o b/build/userland/sbin/sfsck/inode.o
new file mode 100644
index 0000000..b6faa96
Binary files /dev/null and b/build/userland/sbin/sfsck/inode.o differ
diff --git a/build/userland/sbin/sfsck/main.ho b/build/userland/sbin/sfsck/main.ho
new file mode 100644
index 0000000..76f9bf5
Binary files /dev/null and b/build/userland/sbin/sfsck/main.ho differ
diff --git a/build/userland/sbin/sfsck/main.o b/build/userland/sbin/sfsck/main.o
new file mode 100644
index 0000000..ba6b03a
Binary files /dev/null and b/build/userland/sbin/sfsck/main.o differ
diff --git a/build/userland/sbin/sfsck/pass1.ho b/build/userland/sbin/sfsck/pass1.ho
new file mode 100644
index 0000000..b86f25a
Binary files /dev/null and b/build/userland/sbin/sfsck/pass1.ho differ
diff --git a/build/userland/sbin/sfsck/pass1.o b/build/userland/sbin/sfsck/pass1.o
new file mode 100644
index 0000000..4f8a3df
Binary files /dev/null and b/build/userland/sbin/sfsck/pass1.o differ
diff --git a/build/userland/sbin/sfsck/pass2.ho b/build/userland/sbin/sfsck/pass2.ho
new file mode 100644
index 0000000..9fb6875
Binary files /dev/null and b/build/userland/sbin/sfsck/pass2.ho differ
diff --git a/build/userland/sbin/sfsck/pass2.o b/build/userland/sbin/sfsck/pass2.o
new file mode 100644
index 0000000..bcb6134
Binary files /dev/null and b/build/userland/sbin/sfsck/pass2.o differ
diff --git a/build/userland/sbin/sfsck/sb.ho b/build/userland/sbin/sfsck/sb.ho
new file mode 100644
index 0000000..1a7b438
Binary files /dev/null and b/build/userland/sbin/sfsck/sb.ho differ
diff --git a/build/userland/sbin/sfsck/sb.o b/build/userland/sbin/sfsck/sb.o
new file mode 100644
index 0000000..4b0276f
Binary files /dev/null and b/build/userland/sbin/sfsck/sb.o differ
diff --git a/build/userland/sbin/sfsck/sfs.ho b/build/userland/sbin/sfsck/sfs.ho
new file mode 100644
index 0000000..493c493
Binary files /dev/null and b/build/userland/sbin/sfsck/sfs.ho differ
diff --git a/build/userland/sbin/sfsck/sfs.o b/build/userland/sbin/sfsck/sfs.o
new file mode 100644
index 0000000..20879c4
Binary files /dev/null and b/build/userland/sbin/sfsck/sfs.o differ
diff --git a/build/userland/sbin/sfsck/sfsck b/build/userland/sbin/sfsck/sfsck
new file mode 100755
index 0000000..03f9fec
Binary files /dev/null and b/build/userland/sbin/sfsck/sfsck differ
diff --git a/build/userland/sbin/sfsck/support.ho b/build/userland/sbin/sfsck/support.ho
new file mode 100644
index 0000000..b5f4f43
Binary files /dev/null and b/build/userland/sbin/sfsck/support.ho differ
diff --git a/build/userland/sbin/sfsck/support.o b/build/userland/sbin/sfsck/support.o
new file mode 100644
index 0000000..c300d30
Binary files /dev/null and b/build/userland/sbin/sfsck/support.o differ
diff --git a/build/userland/sbin/sfsck/utils.ho b/build/userland/sbin/sfsck/utils.ho
new file mode 100644
index 0000000..272655e
Binary files /dev/null and b/build/userland/sbin/sfsck/utils.ho differ
diff --git a/build/userland/sbin/sfsck/utils.o b/build/userland/sbin/sfsck/utils.o
new file mode 100644
index 0000000..ef33ca6
Binary files /dev/null and b/build/userland/sbin/sfsck/utils.o differ
diff --git a/build/userland/testbin/add/.depend b/build/userland/testbin/add/.depend
new file mode 100644
index 0000000..227f9d6
--- /dev/null
+++ b/build/userland/testbin/add/.depend
@@ -0,0 +1,10 @@
+$(MYBUILDDIR)/add.o: \
+ add.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h
diff --git a/build/userland/testbin/add/add b/build/userland/testbin/add/add
new file mode 100755
index 0000000..2a178fe
Binary files /dev/null and b/build/userland/testbin/add/add differ
diff --git a/build/userland/testbin/add/add.o b/build/userland/testbin/add/add.o
new file mode 100644
index 0000000..fd6ca87
Binary files /dev/null and b/build/userland/testbin/add/add.o differ
diff --git a/build/userland/testbin/argtest/.depend b/build/userland/testbin/argtest/.depend
new file mode 100644
index 0000000..0ab6487
--- /dev/null
+++ b/build/userland/testbin/argtest/.depend
@@ -0,0 +1,7 @@
+$(MYBUILDDIR)/argtest.o: \
+ argtest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
diff --git a/build/userland/testbin/argtest/argtest b/build/userland/testbin/argtest/argtest
new file mode 100755
index 0000000..785a64c
Binary files /dev/null and b/build/userland/testbin/argtest/argtest differ
diff --git a/build/userland/testbin/argtest/argtest.o b/build/userland/testbin/argtest/argtest.o
new file mode 100644
index 0000000..6025449
Binary files /dev/null and b/build/userland/testbin/argtest/argtest.o differ
diff --git a/build/userland/testbin/badcall/.depend b/build/userland/testbin/badcall/.depend
new file mode 100644
index 0000000..279f3a9
--- /dev/null
+++ b/build/userland/testbin/badcall/.depend
@@ -0,0 +1,651 @@
+$(MYBUILDDIR)/bad_execv.o: \
+ bad_execv.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_waitpid.o: \
+ bad_waitpid.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_open.o: \
+ bad_open.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_read.o: \
+ bad_read.c \
+ test.h
+$(MYBUILDDIR)/bad_write.o: \
+ bad_write.c \
+ test.h
+$(MYBUILDDIR)/bad_close.o: \
+ bad_close.c \
+ test.h
+$(MYBUILDDIR)/bad_reboot.o: \
+ bad_reboot.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_sbrk.o: \
+ bad_sbrk.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_ioctl.o: \
+ bad_ioctl.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/ioctl.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_lseek.o: \
+ bad_lseek.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_fsync.o: \
+ bad_fsync.c \
+ test.h
+$(MYBUILDDIR)/bad_ftruncate.o: \
+ bad_ftruncate.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_stat.o: \
+ bad_stat.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_remove.o: \
+ bad_remove.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_rename.o: \
+ bad_rename.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_link.o: \
+ bad_link.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_mkdir.o: \
+ bad_mkdir.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_rmdir.o: \
+ bad_rmdir.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_chdir.o: \
+ bad_chdir.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ test.h
+$(MYBUILDDIR)/bad_getdirentry.o: \
+ bad_getdirentry.c \
+ test.h
+$(MYBUILDDIR)/bad_symlink.o: \
+ bad_symlink.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_readlink.o: \
+ bad_readlink.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ test.h
+$(MYBUILDDIR)/bad_dup2.o: \
+ bad_dup2.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_pipe.o: \
+ bad_pipe.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_time.o: \
+ bad_time.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/bad_getcwd.o: \
+ bad_getcwd.c \
+ test.h
+$(MYBUILDDIR)/common_buf.o: \
+ common_buf.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/common_fds.o: \
+ common_fds.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/common_path.o: \
+ common_path.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/report.o: \
+ report.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/assert.h \
+ config.h \
+ test.h
+$(MYBUILDDIR)/driver.o: \
+ driver.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ config.h \
+ test.h
diff --git a/build/userland/testbin/badcall/bad_chdir.o b/build/userland/testbin/badcall/bad_chdir.o
new file mode 100644
index 0000000..151a933
Binary files /dev/null and b/build/userland/testbin/badcall/bad_chdir.o differ
diff --git a/build/userland/testbin/badcall/bad_close.o b/build/userland/testbin/badcall/bad_close.o
new file mode 100644
index 0000000..8c19f95
Binary files /dev/null and b/build/userland/testbin/badcall/bad_close.o differ
diff --git a/build/userland/testbin/badcall/bad_dup2.o b/build/userland/testbin/badcall/bad_dup2.o
new file mode 100644
index 0000000..7400d26
Binary files /dev/null and b/build/userland/testbin/badcall/bad_dup2.o differ
diff --git a/build/userland/testbin/badcall/bad_execv.o b/build/userland/testbin/badcall/bad_execv.o
new file mode 100644
index 0000000..1e54c6a
Binary files /dev/null and b/build/userland/testbin/badcall/bad_execv.o differ
diff --git a/build/userland/testbin/badcall/bad_fsync.o b/build/userland/testbin/badcall/bad_fsync.o
new file mode 100644
index 0000000..d12ca7e
Binary files /dev/null and b/build/userland/testbin/badcall/bad_fsync.o differ
diff --git a/build/userland/testbin/badcall/bad_ftruncate.o b/build/userland/testbin/badcall/bad_ftruncate.o
new file mode 100644
index 0000000..4b71e11
Binary files /dev/null and b/build/userland/testbin/badcall/bad_ftruncate.o differ
diff --git a/build/userland/testbin/badcall/bad_getcwd.o b/build/userland/testbin/badcall/bad_getcwd.o
new file mode 100644
index 0000000..0586780
Binary files /dev/null and b/build/userland/testbin/badcall/bad_getcwd.o differ
diff --git a/build/userland/testbin/badcall/bad_getdirentry.o b/build/userland/testbin/badcall/bad_getdirentry.o
new file mode 100644
index 0000000..b4f8c50
Binary files /dev/null and b/build/userland/testbin/badcall/bad_getdirentry.o differ
diff --git a/build/userland/testbin/badcall/bad_ioctl.o b/build/userland/testbin/badcall/bad_ioctl.o
new file mode 100644
index 0000000..6fcd38a
Binary files /dev/null and b/build/userland/testbin/badcall/bad_ioctl.o differ
diff --git a/build/userland/testbin/badcall/bad_link.o b/build/userland/testbin/badcall/bad_link.o
new file mode 100644
index 0000000..9dd8e4b
Binary files /dev/null and b/build/userland/testbin/badcall/bad_link.o differ
diff --git a/build/userland/testbin/badcall/bad_lseek.o b/build/userland/testbin/badcall/bad_lseek.o
new file mode 100644
index 0000000..e49b3b8
Binary files /dev/null and b/build/userland/testbin/badcall/bad_lseek.o differ
diff --git a/build/userland/testbin/badcall/bad_mkdir.o b/build/userland/testbin/badcall/bad_mkdir.o
new file mode 100644
index 0000000..d586480
Binary files /dev/null and b/build/userland/testbin/badcall/bad_mkdir.o differ
diff --git a/build/userland/testbin/badcall/bad_open.o b/build/userland/testbin/badcall/bad_open.o
new file mode 100644
index 0000000..ac9b241
Binary files /dev/null and b/build/userland/testbin/badcall/bad_open.o differ
diff --git a/build/userland/testbin/badcall/bad_pipe.o b/build/userland/testbin/badcall/bad_pipe.o
new file mode 100644
index 0000000..c30f8f9
Binary files /dev/null and b/build/userland/testbin/badcall/bad_pipe.o differ
diff --git a/build/userland/testbin/badcall/bad_read.o b/build/userland/testbin/badcall/bad_read.o
new file mode 100644
index 0000000..8bbe1a9
Binary files /dev/null and b/build/userland/testbin/badcall/bad_read.o differ
diff --git a/build/userland/testbin/badcall/bad_readlink.o b/build/userland/testbin/badcall/bad_readlink.o
new file mode 100644
index 0000000..26aa02c
Binary files /dev/null and b/build/userland/testbin/badcall/bad_readlink.o differ
diff --git a/build/userland/testbin/badcall/bad_reboot.o b/build/userland/testbin/badcall/bad_reboot.o
new file mode 100644
index 0000000..4edab98
Binary files /dev/null and b/build/userland/testbin/badcall/bad_reboot.o differ
diff --git a/build/userland/testbin/badcall/bad_remove.o b/build/userland/testbin/badcall/bad_remove.o
new file mode 100644
index 0000000..99536ea
Binary files /dev/null and b/build/userland/testbin/badcall/bad_remove.o differ
diff --git a/build/userland/testbin/badcall/bad_rename.o b/build/userland/testbin/badcall/bad_rename.o
new file mode 100644
index 0000000..8941a89
Binary files /dev/null and b/build/userland/testbin/badcall/bad_rename.o differ
diff --git a/build/userland/testbin/badcall/bad_rmdir.o b/build/userland/testbin/badcall/bad_rmdir.o
new file mode 100644
index 0000000..cdf5e46
Binary files /dev/null and b/build/userland/testbin/badcall/bad_rmdir.o differ
diff --git a/build/userland/testbin/badcall/bad_sbrk.o b/build/userland/testbin/badcall/bad_sbrk.o
new file mode 100644
index 0000000..cd670b0
Binary files /dev/null and b/build/userland/testbin/badcall/bad_sbrk.o differ
diff --git a/build/userland/testbin/badcall/bad_stat.o b/build/userland/testbin/badcall/bad_stat.o
new file mode 100644
index 0000000..700a162
Binary files /dev/null and b/build/userland/testbin/badcall/bad_stat.o differ
diff --git a/build/userland/testbin/badcall/bad_symlink.o b/build/userland/testbin/badcall/bad_symlink.o
new file mode 100644
index 0000000..5027ed9
Binary files /dev/null and b/build/userland/testbin/badcall/bad_symlink.o differ
diff --git a/build/userland/testbin/badcall/bad_time.o b/build/userland/testbin/badcall/bad_time.o
new file mode 100644
index 0000000..8b72ebc
Binary files /dev/null and b/build/userland/testbin/badcall/bad_time.o differ
diff --git a/build/userland/testbin/badcall/bad_waitpid.o b/build/userland/testbin/badcall/bad_waitpid.o
new file mode 100644
index 0000000..48650e2
Binary files /dev/null and b/build/userland/testbin/badcall/bad_waitpid.o differ
diff --git a/build/userland/testbin/badcall/bad_write.o b/build/userland/testbin/badcall/bad_write.o
new file mode 100644
index 0000000..b2c80c3
Binary files /dev/null and b/build/userland/testbin/badcall/bad_write.o differ
diff --git a/build/userland/testbin/badcall/badcall b/build/userland/testbin/badcall/badcall
new file mode 100755
index 0000000..1a6e2cc
Binary files /dev/null and b/build/userland/testbin/badcall/badcall differ
diff --git a/build/userland/testbin/badcall/common_buf.o b/build/userland/testbin/badcall/common_buf.o
new file mode 100644
index 0000000..223fa49
Binary files /dev/null and b/build/userland/testbin/badcall/common_buf.o differ
diff --git a/build/userland/testbin/badcall/common_fds.o b/build/userland/testbin/badcall/common_fds.o
new file mode 100644
index 0000000..ba4c194
Binary files /dev/null and b/build/userland/testbin/badcall/common_fds.o differ
diff --git a/build/userland/testbin/badcall/common_path.o b/build/userland/testbin/badcall/common_path.o
new file mode 100644
index 0000000..04f47e3
Binary files /dev/null and b/build/userland/testbin/badcall/common_path.o differ
diff --git a/build/userland/testbin/badcall/driver.o b/build/userland/testbin/badcall/driver.o
new file mode 100644
index 0000000..3567510
Binary files /dev/null and b/build/userland/testbin/badcall/driver.o differ
diff --git a/build/userland/testbin/badcall/report.o b/build/userland/testbin/badcall/report.o
new file mode 100644
index 0000000..5aa2d33
Binary files /dev/null and b/build/userland/testbin/badcall/report.o differ
diff --git a/build/userland/testbin/bigexec/.depend b/build/userland/testbin/bigexec/.depend
new file mode 100644
index 0000000..9988d64
--- /dev/null
+++ b/build/userland/testbin/bigexec/.depend
@@ -0,0 +1,23 @@
+$(MYBUILDDIR)/bigexec.o: \
+ bigexec.c \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/bigexec/bigexec b/build/userland/testbin/bigexec/bigexec
new file mode 100755
index 0000000..d046f78
Binary files /dev/null and b/build/userland/testbin/bigexec/bigexec differ
diff --git a/build/userland/testbin/bigexec/bigexec.o b/build/userland/testbin/bigexec/bigexec.o
new file mode 100644
index 0000000..7da121d
Binary files /dev/null and b/build/userland/testbin/bigexec/bigexec.o differ
diff --git a/build/userland/testbin/bigfile/.depend b/build/userland/testbin/bigfile/.depend
new file mode 100644
index 0000000..780839e
--- /dev/null
+++ b/build/userland/testbin/bigfile/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/bigfile.o: \
+ bigfile.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/bigfile/bigfile b/build/userland/testbin/bigfile/bigfile
new file mode 100755
index 0000000..69e2cea
Binary files /dev/null and b/build/userland/testbin/bigfile/bigfile differ
diff --git a/build/userland/testbin/bigfile/bigfile.o b/build/userland/testbin/bigfile/bigfile.o
new file mode 100644
index 0000000..76a473f
Binary files /dev/null and b/build/userland/testbin/bigfile/bigfile.o differ
diff --git a/build/userland/testbin/bigfork/.depend b/build/userland/testbin/bigfork/.depend
new file mode 100644
index 0000000..8606c54
--- /dev/null
+++ b/build/userland/testbin/bigfork/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/bigfork.o: \
+ bigfork.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/bigfork/bigfork b/build/userland/testbin/bigfork/bigfork
new file mode 100755
index 0000000..a031c1c
Binary files /dev/null and b/build/userland/testbin/bigfork/bigfork differ
diff --git a/build/userland/testbin/bigfork/bigfork.o b/build/userland/testbin/bigfork/bigfork.o
new file mode 100644
index 0000000..9d51322
Binary files /dev/null and b/build/userland/testbin/bigfork/bigfork.o differ
diff --git a/build/userland/testbin/bigseek/.depend b/build/userland/testbin/bigseek/.depend
new file mode 100644
index 0000000..7b8a58d
--- /dev/null
+++ b/build/userland/testbin/bigseek/.depend
@@ -0,0 +1,22 @@
+$(MYBUILDDIR)/bigseek.o: \
+ bigseek.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdbool.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
diff --git a/build/userland/testbin/bigseek/bigseek b/build/userland/testbin/bigseek/bigseek
new file mode 100755
index 0000000..a7792ca
Binary files /dev/null and b/build/userland/testbin/bigseek/bigseek differ
diff --git a/build/userland/testbin/bigseek/bigseek.o b/build/userland/testbin/bigseek/bigseek.o
new file mode 100644
index 0000000..cc9bad8
Binary files /dev/null and b/build/userland/testbin/bigseek/bigseek.o differ
diff --git a/build/userland/testbin/bloat/.depend b/build/userland/testbin/bloat/.depend
new file mode 100644
index 0000000..d99f12c
--- /dev/null
+++ b/build/userland/testbin/bloat/.depend
@@ -0,0 +1,23 @@
+$(MYBUILDDIR)/bloat.o: \
+ bloat.c \
+ $(INSTALLTOP)/include/stdbool.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/bloat/bloat b/build/userland/testbin/bloat/bloat
new file mode 100755
index 0000000..08257db
Binary files /dev/null and b/build/userland/testbin/bloat/bloat differ
diff --git a/build/userland/testbin/bloat/bloat.o b/build/userland/testbin/bloat/bloat.o
new file mode 100644
index 0000000..8356252
Binary files /dev/null and b/build/userland/testbin/bloat/bloat.o differ
diff --git a/build/userland/testbin/conman/.depend b/build/userland/testbin/conman/.depend
new file mode 100644
index 0000000..29929df
--- /dev/null
+++ b/build/userland/testbin/conman/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/conman.o: \
+ conman.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/conman/conman b/build/userland/testbin/conman/conman
new file mode 100755
index 0000000..1c06953
Binary files /dev/null and b/build/userland/testbin/conman/conman differ
diff --git a/build/userland/testbin/conman/conman.o b/build/userland/testbin/conman/conman.o
new file mode 100644
index 0000000..4978f10
Binary files /dev/null and b/build/userland/testbin/conman/conman.o differ
diff --git a/build/userland/testbin/crash/.depend b/build/userland/testbin/crash/.depend
new file mode 100644
index 0000000..cb18337
--- /dev/null
+++ b/build/userland/testbin/crash/.depend
@@ -0,0 +1,21 @@
+$(MYBUILDDIR)/crash.o: \
+ crash.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/signal.h \
+ $(INSTALLTOP)/include/kern/signal.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/crash/crash b/build/userland/testbin/crash/crash
new file mode 100755
index 0000000..4019d83
Binary files /dev/null and b/build/userland/testbin/crash/crash differ
diff --git a/build/userland/testbin/crash/crash.o b/build/userland/testbin/crash/crash.o
new file mode 100644
index 0000000..2eb0c67
Binary files /dev/null and b/build/userland/testbin/crash/crash.o differ
diff --git a/build/userland/testbin/ctest/.depend b/build/userland/testbin/ctest/.depend
new file mode 100644
index 0000000..39c093d
--- /dev/null
+++ b/build/userland/testbin/ctest/.depend
@@ -0,0 +1,8 @@
+$(MYBUILDDIR)/ctest.o: \
+ ctest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h
diff --git a/build/userland/testbin/ctest/ctest b/build/userland/testbin/ctest/ctest
new file mode 100755
index 0000000..a991f7a
Binary files /dev/null and b/build/userland/testbin/ctest/ctest differ
diff --git a/build/userland/testbin/ctest/ctest.o b/build/userland/testbin/ctest/ctest.o
new file mode 100644
index 0000000..e121b58
Binary files /dev/null and b/build/userland/testbin/ctest/ctest.o differ
diff --git a/build/userland/testbin/dirconc/.depend b/build/userland/testbin/dirconc/.depend
new file mode 100644
index 0000000..70a6d5c
--- /dev/null
+++ b/build/userland/testbin/dirconc/.depend
@@ -0,0 +1,26 @@
+$(MYBUILDDIR)/dirconc.o: \
+ dirconc.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/string.h
diff --git a/build/userland/testbin/dirconc/dirconc b/build/userland/testbin/dirconc/dirconc
new file mode 100755
index 0000000..de3114c
Binary files /dev/null and b/build/userland/testbin/dirconc/dirconc differ
diff --git a/build/userland/testbin/dirconc/dirconc.o b/build/userland/testbin/dirconc/dirconc.o
new file mode 100644
index 0000000..267f4e8
Binary files /dev/null and b/build/userland/testbin/dirconc/dirconc.o differ
diff --git a/build/userland/testbin/dirseek/.depend b/build/userland/testbin/dirseek/.depend
new file mode 100644
index 0000000..a58a1e9
--- /dev/null
+++ b/build/userland/testbin/dirseek/.depend
@@ -0,0 +1,23 @@
+$(MYBUILDDIR)/dirseek.o: \
+ dirseek.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/dirseek/dirseek b/build/userland/testbin/dirseek/dirseek
new file mode 100755
index 0000000..5d51574
Binary files /dev/null and b/build/userland/testbin/dirseek/dirseek differ
diff --git a/build/userland/testbin/dirseek/dirseek.o b/build/userland/testbin/dirseek/dirseek.o
new file mode 100644
index 0000000..1688532
Binary files /dev/null and b/build/userland/testbin/dirseek/dirseek.o differ
diff --git a/build/userland/testbin/dirtest/.depend b/build/userland/testbin/dirtest/.depend
new file mode 100644
index 0000000..df5c29a
--- /dev/null
+++ b/build/userland/testbin/dirtest/.depend
@@ -0,0 +1,22 @@
+$(MYBUILDDIR)/dirtest.o: \
+ dirtest.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/dirtest/dirtest b/build/userland/testbin/dirtest/dirtest
new file mode 100755
index 0000000..5f5e827
Binary files /dev/null and b/build/userland/testbin/dirtest/dirtest differ
diff --git a/build/userland/testbin/dirtest/dirtest.o b/build/userland/testbin/dirtest/dirtest.o
new file mode 100644
index 0000000..610b1b1
Binary files /dev/null and b/build/userland/testbin/dirtest/dirtest.o differ
diff --git a/build/userland/testbin/f_test/.depend b/build/userland/testbin/f_test/.depend
new file mode 100644
index 0000000..aeb0eb1
--- /dev/null
+++ b/build/userland/testbin/f_test/.depend
@@ -0,0 +1,61 @@
+$(MYBUILDDIR)/f_test.o: \
+ f_test.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ f_hdr.h
+$(MYBUILDDIR)/f_read.o: \
+ f_read.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ f_hdr.h
+$(MYBUILDDIR)/f_write.o: \
+ f_write.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/err.h \
+ f_hdr.h
diff --git a/build/userland/testbin/f_test/f_read.o b/build/userland/testbin/f_test/f_read.o
new file mode 100644
index 0000000..d7cefb0
Binary files /dev/null and b/build/userland/testbin/f_test/f_read.o differ
diff --git a/build/userland/testbin/f_test/f_test b/build/userland/testbin/f_test/f_test
new file mode 100755
index 0000000..aac485c
Binary files /dev/null and b/build/userland/testbin/f_test/f_test differ
diff --git a/build/userland/testbin/f_test/f_test.o b/build/userland/testbin/f_test/f_test.o
new file mode 100644
index 0000000..a026db1
Binary files /dev/null and b/build/userland/testbin/f_test/f_test.o differ
diff --git a/build/userland/testbin/f_test/f_write.o b/build/userland/testbin/f_test/f_write.o
new file mode 100644
index 0000000..09cfb81
Binary files /dev/null and b/build/userland/testbin/f_test/f_write.o differ
diff --git a/build/userland/testbin/factorial/.depend b/build/userland/testbin/factorial/.depend
new file mode 100644
index 0000000..1372c65
--- /dev/null
+++ b/build/userland/testbin/factorial/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/factorial.o: \
+ factorial.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/factorial/factorial b/build/userland/testbin/factorial/factorial
new file mode 100755
index 0000000..d23990c
Binary files /dev/null and b/build/userland/testbin/factorial/factorial differ
diff --git a/build/userland/testbin/factorial/factorial.o b/build/userland/testbin/factorial/factorial.o
new file mode 100644
index 0000000..2474262
Binary files /dev/null and b/build/userland/testbin/factorial/factorial.o differ
diff --git a/build/userland/testbin/farm/.depend b/build/userland/testbin/farm/.depend
new file mode 100644
index 0000000..fce605e
--- /dev/null
+++ b/build/userland/testbin/farm/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/farm.o: \
+ farm.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/farm/farm b/build/userland/testbin/farm/farm
new file mode 100755
index 0000000..3aafe09
Binary files /dev/null and b/build/userland/testbin/farm/farm differ
diff --git a/build/userland/testbin/farm/farm.o b/build/userland/testbin/farm/farm.o
new file mode 100644
index 0000000..5c96778
Binary files /dev/null and b/build/userland/testbin/farm/farm.o differ
diff --git a/build/userland/testbin/faulter/.depend b/build/userland/testbin/faulter/.depend
new file mode 100644
index 0000000..1c62317
--- /dev/null
+++ b/build/userland/testbin/faulter/.depend
@@ -0,0 +1,7 @@
+$(MYBUILDDIR)/faulter.o: \
+ faulter.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h
diff --git a/build/userland/testbin/faulter/faulter b/build/userland/testbin/faulter/faulter
new file mode 100755
index 0000000..8641dc6
Binary files /dev/null and b/build/userland/testbin/faulter/faulter differ
diff --git a/build/userland/testbin/faulter/faulter.o b/build/userland/testbin/faulter/faulter.o
new file mode 100644
index 0000000..b0ba6f4
Binary files /dev/null and b/build/userland/testbin/faulter/faulter.o differ
diff --git a/build/userland/testbin/filetest/.depend b/build/userland/testbin/filetest/.depend
new file mode 100644
index 0000000..0b2d8f3
--- /dev/null
+++ b/build/userland/testbin/filetest/.depend
@@ -0,0 +1,19 @@
+$(MYBUILDDIR)/filetest.o: \
+ filetest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/filetest/filetest b/build/userland/testbin/filetest/filetest
new file mode 100755
index 0000000..1f0e47a
Binary files /dev/null and b/build/userland/testbin/filetest/filetest differ
diff --git a/build/userland/testbin/filetest/filetest.o b/build/userland/testbin/filetest/filetest.o
new file mode 100644
index 0000000..80e45d9
Binary files /dev/null and b/build/userland/testbin/filetest/filetest.o differ
diff --git a/build/userland/testbin/forkbomb/.depend b/build/userland/testbin/forkbomb/.depend
new file mode 100644
index 0000000..3be11ec
--- /dev/null
+++ b/build/userland/testbin/forkbomb/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/forkbomb.o: \
+ forkbomb.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/forkbomb/forkbomb b/build/userland/testbin/forkbomb/forkbomb
new file mode 100755
index 0000000..3433719
Binary files /dev/null and b/build/userland/testbin/forkbomb/forkbomb differ
diff --git a/build/userland/testbin/forkbomb/forkbomb.o b/build/userland/testbin/forkbomb/forkbomb.o
new file mode 100644
index 0000000..d20b1cd
Binary files /dev/null and b/build/userland/testbin/forkbomb/forkbomb.o differ
diff --git a/build/userland/testbin/forktest/.depend b/build/userland/testbin/forktest/.depend
new file mode 100644
index 0000000..a09c835
--- /dev/null
+++ b/build/userland/testbin/forktest/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/forktest.o: \
+ forktest.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/forktest/forktest b/build/userland/testbin/forktest/forktest
new file mode 100755
index 0000000..4c5f476
Binary files /dev/null and b/build/userland/testbin/forktest/forktest differ
diff --git a/build/userland/testbin/forktest/forktest.o b/build/userland/testbin/forktest/forktest.o
new file mode 100644
index 0000000..734664d
Binary files /dev/null and b/build/userland/testbin/forktest/forktest.o differ
diff --git a/build/userland/testbin/frack/.depend b/build/userland/testbin/frack/.depend
new file mode 100644
index 0000000..a618546
--- /dev/null
+++ b/build/userland/testbin/frack/.depend
@@ -0,0 +1,152 @@
+$(MYBUILDDIR)/main.o: \
+ main.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ workloads.h \
+ main.h
+$(MYBUILDDIR)/workloads.o: \
+ workloads.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ ops.h \
+ workloads.h \
+ $(INSTALLTOP)/include/stdio.h
+$(MYBUILDDIR)/ops.o: \
+ ops.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ pool.h \
+ data.h \
+ do.h \
+ check.h \
+ ops.h \
+ main.h
+$(MYBUILDDIR)/do.o: \
+ do.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ data.h \
+ name.h \
+ do.h
+$(MYBUILDDIR)/check.o: \
+ check.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ name.h \
+ data.h \
+ pool.h \
+ check.h
+$(MYBUILDDIR)/pool.o: \
+ pool.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ pool.h
+$(MYBUILDDIR)/data.o: \
+ data.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ data.h
+$(MYBUILDDIR)/name.o: \
+ name.c \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ name.h
diff --git a/build/userland/testbin/frack/check.o b/build/userland/testbin/frack/check.o
new file mode 100644
index 0000000..962e71c
Binary files /dev/null and b/build/userland/testbin/frack/check.o differ
diff --git a/build/userland/testbin/frack/data.o b/build/userland/testbin/frack/data.o
new file mode 100644
index 0000000..7128a6f
Binary files /dev/null and b/build/userland/testbin/frack/data.o differ
diff --git a/build/userland/testbin/frack/do.o b/build/userland/testbin/frack/do.o
new file mode 100644
index 0000000..b75f01b
Binary files /dev/null and b/build/userland/testbin/frack/do.o differ
diff --git a/build/userland/testbin/frack/frack b/build/userland/testbin/frack/frack
new file mode 100755
index 0000000..f332796
Binary files /dev/null and b/build/userland/testbin/frack/frack differ
diff --git a/build/userland/testbin/frack/main.o b/build/userland/testbin/frack/main.o
new file mode 100644
index 0000000..646635d
Binary files /dev/null and b/build/userland/testbin/frack/main.o differ
diff --git a/build/userland/testbin/frack/name.o b/build/userland/testbin/frack/name.o
new file mode 100644
index 0000000..d24c035
Binary files /dev/null and b/build/userland/testbin/frack/name.o differ
diff --git a/build/userland/testbin/frack/ops.o b/build/userland/testbin/frack/ops.o
new file mode 100644
index 0000000..fe05191
Binary files /dev/null and b/build/userland/testbin/frack/ops.o differ
diff --git a/build/userland/testbin/frack/pool.o b/build/userland/testbin/frack/pool.o
new file mode 100644
index 0000000..0cf7224
Binary files /dev/null and b/build/userland/testbin/frack/pool.o differ
diff --git a/build/userland/testbin/frack/workloads.o b/build/userland/testbin/frack/workloads.o
new file mode 100644
index 0000000..9561b4f
Binary files /dev/null and b/build/userland/testbin/frack/workloads.o differ
diff --git a/build/userland/testbin/guzzle/.depend b/build/userland/testbin/guzzle/.depend
new file mode 100644
index 0000000..7ef78c5
--- /dev/null
+++ b/build/userland/testbin/guzzle/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/guzzle.o: \
+ guzzle.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
diff --git a/build/userland/testbin/guzzle/guzzle b/build/userland/testbin/guzzle/guzzle
new file mode 100755
index 0000000..1087c89
Binary files /dev/null and b/build/userland/testbin/guzzle/guzzle differ
diff --git a/build/userland/testbin/guzzle/guzzle.o b/build/userland/testbin/guzzle/guzzle.o
new file mode 100644
index 0000000..f154a0c
Binary files /dev/null and b/build/userland/testbin/guzzle/guzzle.o differ
diff --git a/build/userland/testbin/hash/.depend b/build/userland/testbin/hash/.depend
new file mode 100644
index 0000000..c10d25c
--- /dev/null
+++ b/build/userland/testbin/hash/.depend
@@ -0,0 +1,19 @@
+$(MYBUILDDIR)/hash.o: \
+ hash.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/hash/.hostdepend b/build/userland/testbin/hash/.hostdepend
new file mode 100644
index 0000000..a9f076f
--- /dev/null
+++ b/build/userland/testbin/hash/.hostdepend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/hash.ho: \
+ hash.c \
+ $(INSTALLTOP)/hostinclude/hostcompat.h
diff --git a/build/userland/testbin/hash/hash b/build/userland/testbin/hash/hash
new file mode 100755
index 0000000..b57a301
Binary files /dev/null and b/build/userland/testbin/hash/hash differ
diff --git a/build/userland/testbin/hash/hash.ho b/build/userland/testbin/hash/hash.ho
new file mode 100644
index 0000000..fabde8b
Binary files /dev/null and b/build/userland/testbin/hash/hash.ho differ
diff --git a/build/userland/testbin/hash/hash.o b/build/userland/testbin/hash/hash.o
new file mode 100644
index 0000000..8bf88f5
Binary files /dev/null and b/build/userland/testbin/hash/hash.o differ
diff --git a/build/userland/testbin/hash/host-hash b/build/userland/testbin/hash/host-hash
new file mode 100755
index 0000000..a54bf42
Binary files /dev/null and b/build/userland/testbin/hash/host-hash differ
diff --git a/build/userland/testbin/hog/.depend b/build/userland/testbin/hog/.depend
new file mode 100644
index 0000000..d485aee
--- /dev/null
+++ b/build/userland/testbin/hog/.depend
@@ -0,0 +1,2 @@
+$(MYBUILDDIR)/hog.o: \
+ hog.c
diff --git a/build/userland/testbin/hog/hog b/build/userland/testbin/hog/hog
new file mode 100755
index 0000000..c50e086
Binary files /dev/null and b/build/userland/testbin/hog/hog differ
diff --git a/build/userland/testbin/hog/hog.o b/build/userland/testbin/hog/hog.o
new file mode 100644
index 0000000..c2e57c1
Binary files /dev/null and b/build/userland/testbin/hog/hog.o differ
diff --git a/build/userland/testbin/huge/.depend b/build/userland/testbin/huge/.depend
new file mode 100644
index 0000000..d316568
--- /dev/null
+++ b/build/userland/testbin/huge/.depend
@@ -0,0 +1,8 @@
+$(MYBUILDDIR)/huge.o: \
+ huge.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h
diff --git a/build/userland/testbin/huge/huge b/build/userland/testbin/huge/huge
new file mode 100755
index 0000000..3c67ecb
Binary files /dev/null and b/build/userland/testbin/huge/huge differ
diff --git a/build/userland/testbin/huge/huge.o b/build/userland/testbin/huge/huge.o
new file mode 100644
index 0000000..9e37968
Binary files /dev/null and b/build/userland/testbin/huge/huge.o differ
diff --git a/build/userland/testbin/kitchen/.depend b/build/userland/testbin/kitchen/.depend
new file mode 100644
index 0000000..21ea2a0
--- /dev/null
+++ b/build/userland/testbin/kitchen/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/kitchen.o: \
+ kitchen.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/kitchen/kitchen b/build/userland/testbin/kitchen/kitchen
new file mode 100755
index 0000000..25dbf9e
Binary files /dev/null and b/build/userland/testbin/kitchen/kitchen differ
diff --git a/build/userland/testbin/kitchen/kitchen.o b/build/userland/testbin/kitchen/kitchen.o
new file mode 100644
index 0000000..0c92506
Binary files /dev/null and b/build/userland/testbin/kitchen/kitchen.o differ
diff --git a/build/userland/testbin/malloctest/.depend b/build/userland/testbin/malloctest/.depend
new file mode 100644
index 0000000..bba0949
--- /dev/null
+++ b/build/userland/testbin/malloctest/.depend
@@ -0,0 +1,22 @@
+$(MYBUILDDIR)/malloctest.o: \
+ malloctest.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/malloctest/malloctest b/build/userland/testbin/malloctest/malloctest
new file mode 100755
index 0000000..dea22a6
Binary files /dev/null and b/build/userland/testbin/malloctest/malloctest differ
diff --git a/build/userland/testbin/malloctest/malloctest.o b/build/userland/testbin/malloctest/malloctest.o
new file mode 100644
index 0000000..dbbf1fa
Binary files /dev/null and b/build/userland/testbin/malloctest/malloctest.o differ
diff --git a/build/userland/testbin/matmult/.depend b/build/userland/testbin/matmult/.depend
new file mode 100644
index 0000000..e6cb169
--- /dev/null
+++ b/build/userland/testbin/matmult/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/matmult.o: \
+ matmult.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h
diff --git a/build/userland/testbin/matmult/matmult b/build/userland/testbin/matmult/matmult
new file mode 100755
index 0000000..daf9fc0
Binary files /dev/null and b/build/userland/testbin/matmult/matmult differ
diff --git a/build/userland/testbin/matmult/matmult.o b/build/userland/testbin/matmult/matmult.o
new file mode 100644
index 0000000..6375381
Binary files /dev/null and b/build/userland/testbin/matmult/matmult.o differ
diff --git a/build/userland/testbin/multiexec/.depend b/build/userland/testbin/multiexec/.depend
new file mode 100644
index 0000000..34bf7b9
--- /dev/null
+++ b/build/userland/testbin/multiexec/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/multiexec.o: \
+ multiexec.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/multiexec/multiexec b/build/userland/testbin/multiexec/multiexec
new file mode 100755
index 0000000..181ccf1
Binary files /dev/null and b/build/userland/testbin/multiexec/multiexec differ
diff --git a/build/userland/testbin/multiexec/multiexec.o b/build/userland/testbin/multiexec/multiexec.o
new file mode 100644
index 0000000..f7b0760
Binary files /dev/null and b/build/userland/testbin/multiexec/multiexec.o differ
diff --git a/build/userland/testbin/palin/.depend b/build/userland/testbin/palin/.depend
new file mode 100644
index 0000000..704a5ba
--- /dev/null
+++ b/build/userland/testbin/palin/.depend
@@ -0,0 +1,8 @@
+$(MYBUILDDIR)/palin.o: \
+ palin.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h
diff --git a/build/userland/testbin/palin/palin b/build/userland/testbin/palin/palin
new file mode 100755
index 0000000..2b713d5
Binary files /dev/null and b/build/userland/testbin/palin/palin differ
diff --git a/build/userland/testbin/palin/palin.o b/build/userland/testbin/palin/palin.o
new file mode 100644
index 0000000..00b0217
Binary files /dev/null and b/build/userland/testbin/palin/palin.o differ
diff --git a/build/userland/testbin/parallelvm/.depend b/build/userland/testbin/parallelvm/.depend
new file mode 100644
index 0000000..820a3f6
--- /dev/null
+++ b/build/userland/testbin/parallelvm/.depend
@@ -0,0 +1,23 @@
+$(MYBUILDDIR)/parallelvm.o: \
+ parallelvm.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdbool.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/parallelvm/parallelvm b/build/userland/testbin/parallelvm/parallelvm
new file mode 100755
index 0000000..d62707e
Binary files /dev/null and b/build/userland/testbin/parallelvm/parallelvm differ
diff --git a/build/userland/testbin/parallelvm/parallelvm.o b/build/userland/testbin/parallelvm/parallelvm.o
new file mode 100644
index 0000000..e56836e
Binary files /dev/null and b/build/userland/testbin/parallelvm/parallelvm.o differ
diff --git a/build/userland/testbin/poisondisk/.depend b/build/userland/testbin/poisondisk/.depend
new file mode 100644
index 0000000..c8c3cf3
--- /dev/null
+++ b/build/userland/testbin/poisondisk/.depend
@@ -0,0 +1,50 @@
+$(MYBUILDDIR)/poisondisk.o: \
+ poisondisk.c \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ ../../sbin/mksfs/disk.h
+$(MYBUILDDIR)/disk.o: \
+ ../../sbin/mksfs/disk.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h \
+ ../../sbin/mksfs/support.h \
+ ../../sbin/mksfs/disk.h
+$(MYBUILDDIR)/support.o: \
+ ../../sbin/mksfs/support.c
diff --git a/build/userland/testbin/poisondisk/.hostdepend b/build/userland/testbin/poisondisk/.hostdepend
new file mode 100644
index 0000000..923c040
--- /dev/null
+++ b/build/userland/testbin/poisondisk/.hostdepend
@@ -0,0 +1,10 @@
+$(MYBUILDDIR)/poisondisk.ho: \
+ poisondisk.c \
+ $(INSTALLTOP)/hostinclude/hostcompat.h \
+ ../../sbin/mksfs/disk.h
+$(MYBUILDDIR)/disk.ho: \
+ ../../sbin/mksfs/disk.c \
+ ../../sbin/mksfs/support.h \
+ ../../sbin/mksfs/disk.h
+$(MYBUILDDIR)/support.ho: \
+ ../../sbin/mksfs/support.c
diff --git a/build/userland/testbin/poisondisk/disk.ho b/build/userland/testbin/poisondisk/disk.ho
new file mode 100644
index 0000000..6a002a3
Binary files /dev/null and b/build/userland/testbin/poisondisk/disk.ho differ
diff --git a/build/userland/testbin/poisondisk/disk.o b/build/userland/testbin/poisondisk/disk.o
new file mode 100644
index 0000000..f98a7f5
Binary files /dev/null and b/build/userland/testbin/poisondisk/disk.o differ
diff --git a/build/userland/testbin/poisondisk/host-poisondisk b/build/userland/testbin/poisondisk/host-poisondisk
new file mode 100755
index 0000000..58e8995
Binary files /dev/null and b/build/userland/testbin/poisondisk/host-poisondisk differ
diff --git a/build/userland/testbin/poisondisk/poisondisk b/build/userland/testbin/poisondisk/poisondisk
new file mode 100755
index 0000000..ba94b98
Binary files /dev/null and b/build/userland/testbin/poisondisk/poisondisk differ
diff --git a/build/userland/testbin/poisondisk/poisondisk.ho b/build/userland/testbin/poisondisk/poisondisk.ho
new file mode 100644
index 0000000..56aa5f8
Binary files /dev/null and b/build/userland/testbin/poisondisk/poisondisk.ho differ
diff --git a/build/userland/testbin/poisondisk/poisondisk.o b/build/userland/testbin/poisondisk/poisondisk.o
new file mode 100644
index 0000000..ddc932b
Binary files /dev/null and b/build/userland/testbin/poisondisk/poisondisk.o differ
diff --git a/build/userland/testbin/poisondisk/support.ho b/build/userland/testbin/poisondisk/support.ho
new file mode 100644
index 0000000..b5f4f43
Binary files /dev/null and b/build/userland/testbin/poisondisk/support.ho differ
diff --git a/build/userland/testbin/poisondisk/support.o b/build/userland/testbin/poisondisk/support.o
new file mode 100644
index 0000000..c300d30
Binary files /dev/null and b/build/userland/testbin/poisondisk/support.o differ
diff --git a/build/userland/testbin/psort/.depend b/build/userland/testbin/psort/.depend
new file mode 100644
index 0000000..2af1612
--- /dev/null
+++ b/build/userland/testbin/psort/.depend
@@ -0,0 +1,28 @@
+$(MYBUILDDIR)/psort.o: \
+ psort.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
diff --git a/build/userland/testbin/psort/.hostdepend b/build/userland/testbin/psort/.hostdepend
new file mode 100644
index 0000000..04bb343
--- /dev/null
+++ b/build/userland/testbin/psort/.hostdepend
@@ -0,0 +1,2 @@
+$(MYBUILDDIR)/psort.ho: \
+ psort.c
diff --git a/build/userland/testbin/psort/host-psort b/build/userland/testbin/psort/host-psort
new file mode 100755
index 0000000..540d779
Binary files /dev/null and b/build/userland/testbin/psort/host-psort differ
diff --git a/build/userland/testbin/psort/psort b/build/userland/testbin/psort/psort
new file mode 100755
index 0000000..f8a0ef6
Binary files /dev/null and b/build/userland/testbin/psort/psort differ
diff --git a/build/userland/testbin/psort/psort.ho b/build/userland/testbin/psort/psort.ho
new file mode 100644
index 0000000..b9c88b0
Binary files /dev/null and b/build/userland/testbin/psort/psort.ho differ
diff --git a/build/userland/testbin/psort/psort.o b/build/userland/testbin/psort/psort.o
new file mode 100644
index 0000000..078c232
Binary files /dev/null and b/build/userland/testbin/psort/psort.o differ
diff --git a/build/userland/testbin/quinthuge/.depend b/build/userland/testbin/quinthuge/.depend
new file mode 100644
index 0000000..e9eac6b
--- /dev/null
+++ b/build/userland/testbin/quinthuge/.depend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/quinthuge.o: \
+ quinthuge.c \
+ $(INSTALLTOP)/include/test/quint.h
diff --git a/build/userland/testbin/quinthuge/quinthuge b/build/userland/testbin/quinthuge/quinthuge
new file mode 100755
index 0000000..a85e607
Binary files /dev/null and b/build/userland/testbin/quinthuge/quinthuge differ
diff --git a/build/userland/testbin/quinthuge/quinthuge.o b/build/userland/testbin/quinthuge/quinthuge.o
new file mode 100644
index 0000000..f831ce9
Binary files /dev/null and b/build/userland/testbin/quinthuge/quinthuge.o differ
diff --git a/build/userland/testbin/quintmat/.depend b/build/userland/testbin/quintmat/.depend
new file mode 100644
index 0000000..21215c6
--- /dev/null
+++ b/build/userland/testbin/quintmat/.depend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/quintmat.o: \
+ quintmat.c \
+ $(INSTALLTOP)/include/test/quint.h
diff --git a/build/userland/testbin/quintmat/quintmat b/build/userland/testbin/quintmat/quintmat
new file mode 100755
index 0000000..774bc2b
Binary files /dev/null and b/build/userland/testbin/quintmat/quintmat differ
diff --git a/build/userland/testbin/quintmat/quintmat.o b/build/userland/testbin/quintmat/quintmat.o
new file mode 100644
index 0000000..8e322b1
Binary files /dev/null and b/build/userland/testbin/quintmat/quintmat.o differ
diff --git a/build/userland/testbin/quintsort/.depend b/build/userland/testbin/quintsort/.depend
new file mode 100644
index 0000000..0432f42
--- /dev/null
+++ b/build/userland/testbin/quintsort/.depend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/quintsort.o: \
+ quintsort.c \
+ $(INSTALLTOP)/include/test/quint.h
diff --git a/build/userland/testbin/quintsort/quintsort b/build/userland/testbin/quintsort/quintsort
new file mode 100755
index 0000000..8e9082e
Binary files /dev/null and b/build/userland/testbin/quintsort/quintsort differ
diff --git a/build/userland/testbin/quintsort/quintsort.o b/build/userland/testbin/quintsort/quintsort.o
new file mode 100644
index 0000000..b0f081b
Binary files /dev/null and b/build/userland/testbin/quintsort/quintsort.o differ
diff --git a/build/userland/testbin/randcall/.depend b/build/userland/testbin/randcall/.depend
new file mode 100644
index 0000000..5bda2f3
--- /dev/null
+++ b/build/userland/testbin/randcall/.depend
@@ -0,0 +1,37 @@
+$(MYBUILDDIR)/calls.o: \
+ ../../../build/userland/testbin/randcall/calls.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/assert.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h \
+ extern.h
+$(MYBUILDDIR)/main.o: \
+ main.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ extern.h \
+ $(INSTALLTOP)/include/sys/types.h
diff --git a/build/userland/testbin/randcall/calls.c b/build/userland/testbin/randcall/calls.c
new file mode 100644
index 0000000..1085d1d
--- /dev/null
+++ b/build/userland/testbin/randcall/calls.c
@@ -0,0 +1,873 @@
+/* Automatically generated file; do not edit */
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <assert.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <err.h>
+
+#include "extern.h"
+
+typedef void (*tryfunc)(int dofork);
+
+static
+void
+try_execv(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "execv(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = execv(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_waitpid(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	int a2 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "waitpid(%d, %p, %d)",
+		(a0), (a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = waitpid(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_open(int dofork)
+{
+	void * a0 = randptr();
+	int a1 = randint();
+	int a2 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "open(%p, %d, %d)",
+		(a0), (a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = open(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_read(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "read(%d, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = read(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_write(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "write(%d, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = write(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_close(int dofork)
+{
+	int a0 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "close(%d)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = close(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_ioctl(int dofork)
+{
+	int a0 = randint();
+	int a1 = randint();
+	void * a2 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "ioctl(%d, %d, %p)",
+		(a0), (a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = ioctl(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_lseek(int dofork)
+{
+	int a0 = randint();
+	off_t a1 = randoff();
+	int a2 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "lseek(%d, %lld, %d)",
+		(a0), (long long)(a1), (a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = lseek(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_fsync(int dofork)
+{
+	int a0 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "fsync(%d)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = fsync(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_ftruncate(int dofork)
+{
+	int a0 = randint();
+	off_t a1 = randoff();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "ftruncate(%d, %lld)",
+		(a0), (long long)(a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = ftruncate(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_fstat(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "fstat(%d, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = fstat(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_remove(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "remove(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = remove(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_rename(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "rename(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = rename(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_link(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "link(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = link(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_mkdir(int dofork)
+{
+	void * a0 = randptr();
+	int a1 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "mkdir(%p, %d)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = mkdir(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_rmdir(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "rmdir(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = rmdir(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_chdir(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "chdir(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = chdir(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_getdirentry(int dofork)
+{
+	int a0 = randint();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "getdirentry(%d, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = getdirentry(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_symlink(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "symlink(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = symlink(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_readlink(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	size_t a2 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "readlink(%p, %p, %lu)",
+		(a0), (a1), (unsigned long)(a2));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = readlink(a0, a1, a2);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_dup2(int dofork)
+{
+	int a0 = randint();
+	int a1 = randint();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "dup2(%d, %d)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = dup2(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_pipe(int dofork)
+{
+	void * a0 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "pipe(%p)",
+		(a0));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = pipe(a0);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try___time(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "__time(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = __time(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try___getcwd(int dofork)
+{
+	void * a0 = randptr();
+	size_t a1 = randsize();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "__getcwd(%p, %lu)",
+		(a0), (unsigned long)(a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = __getcwd(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_stat(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "stat(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = stat(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static
+void
+try_lstat(int dofork)
+{
+	void * a0 = randptr();
+	void * a1 = randptr();
+	int result, pid, status;
+	char buf[128];
+
+	snprintf(buf, sizeof(buf), "lstat(%p, %p)",
+		(a0), (a1));
+	printf("%-47s", buf);
+
+	pid = dofork ? fork() : 0;
+	if (pid<0) {
+		err(1, "fork");
+	}
+	if (pid>0) {
+		waitpid(pid, &status, 0);
+		return;
+	}
+
+	result = lstat(a0, a1);
+	printf(" result %d, errno %d\n", result, errno);
+	if (dofork) {
+		exit(0);
+	}
+}
+
+static tryfunc funcs2[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_lseek,
+	try_chdir,
+	try_dup2,
+	try___getcwd,
+	NULL
+};
+
+static tryfunc funcs3[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_lseek,
+	try_chdir,
+	try_dup2,
+	try___getcwd,
+	NULL
+};
+
+static tryfunc funcs4[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_lseek,
+	try_fsync,
+	try_ftruncate,
+	try_fstat,
+	try_remove,
+	try_rename,
+	try_mkdir,
+	try_rmdir,
+	try_chdir,
+	try_getdirentry,
+	try_dup2,
+	try___getcwd,
+	NULL
+};
+
+static tryfunc funcs5[] = {
+	try_execv,
+	try_waitpid,
+	try_open,
+	try_read,
+	try_write,
+	try_close,
+	try_ioctl,
+	try_lseek,
+	try_fsync,
+	try_ftruncate,
+	try_fstat,
+	try_remove,
+	try_rename,
+	try_link,
+	try_mkdir,
+	try_rmdir,
+	try_chdir,
+	try_getdirentry,
+	try_symlink,
+	try_readlink,
+	try_dup2,
+	try_pipe,
+	try___time,
+	try___getcwd,
+	try_stat,
+	try_lstat,
+	NULL
+};
+
+static tryfunc *tables[4] = {
+	funcs2,
+	funcs3,
+	funcs4,
+	funcs5,
+};
+
+void
+trycalls(int asst, int dofork, int count)
+{
+	tryfunc *list;
+	int i, j;
+
+	assert(asst>=2 && asst<=5);
+	list = tables[asst-2];
+
+	for (i=0; i<count; i++) {
+		for (j=0; list[j]; j++) {
+			(*list[j])(dofork);
+		}
+	}
+}
+
diff --git a/build/userland/testbin/randcall/calls.o b/build/userland/testbin/randcall/calls.o
new file mode 100644
index 0000000..3796633
Binary files /dev/null and b/build/userland/testbin/randcall/calls.o differ
diff --git a/build/userland/testbin/randcall/main.o b/build/userland/testbin/randcall/main.o
new file mode 100644
index 0000000..f90b338
Binary files /dev/null and b/build/userland/testbin/randcall/main.o differ
diff --git a/build/userland/testbin/randcall/randcall b/build/userland/testbin/randcall/randcall
new file mode 100755
index 0000000..c75f2fc
Binary files /dev/null and b/build/userland/testbin/randcall/randcall differ
diff --git a/build/userland/testbin/redirect/.depend b/build/userland/testbin/redirect/.depend
new file mode 100644
index 0000000..547bbe5
--- /dev/null
+++ b/build/userland/testbin/redirect/.depend
@@ -0,0 +1,19 @@
+$(MYBUILDDIR)/redirect.o: \
+ redirect.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/redirect/redirect b/build/userland/testbin/redirect/redirect
new file mode 100755
index 0000000..9d6c502
Binary files /dev/null and b/build/userland/testbin/redirect/redirect differ
diff --git a/build/userland/testbin/redirect/redirect.o b/build/userland/testbin/redirect/redirect.o
new file mode 100644
index 0000000..e398d99
Binary files /dev/null and b/build/userland/testbin/redirect/redirect.o differ
diff --git a/build/userland/testbin/rmdirtest/.depend b/build/userland/testbin/rmdirtest/.depend
new file mode 100644
index 0000000..3b4028d
--- /dev/null
+++ b/build/userland/testbin/rmdirtest/.depend
@@ -0,0 +1,27 @@
+$(MYBUILDDIR)/rmdirtest.o: \
+ rmdirtest.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/stat.h \
+ $(INSTALLTOP)/include/kern/stat.h \
+ $(INSTALLTOP)/include/kern/stattypes.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/limits.h \
+ $(INSTALLTOP)/include/kern/limits.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/rmdirtest/rmdirtest b/build/userland/testbin/rmdirtest/rmdirtest
new file mode 100755
index 0000000..b0dd72b
Binary files /dev/null and b/build/userland/testbin/rmdirtest/rmdirtest differ
diff --git a/build/userland/testbin/rmdirtest/rmdirtest.o b/build/userland/testbin/rmdirtest/rmdirtest.o
new file mode 100644
index 0000000..ab5544e
Binary files /dev/null and b/build/userland/testbin/rmdirtest/rmdirtest.o differ
diff --git a/build/userland/testbin/rmtest/.depend b/build/userland/testbin/rmtest/.depend
new file mode 100644
index 0000000..3f2f889
--- /dev/null
+++ b/build/userland/testbin/rmtest/.depend
@@ -0,0 +1,22 @@
+$(MYBUILDDIR)/rmtest.o: \
+ rmtest.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/rmtest/rmtest b/build/userland/testbin/rmtest/rmtest
new file mode 100755
index 0000000..1799fe6
Binary files /dev/null and b/build/userland/testbin/rmtest/rmtest differ
diff --git a/build/userland/testbin/rmtest/rmtest.o b/build/userland/testbin/rmtest/rmtest.o
new file mode 100644
index 0000000..877f17a
Binary files /dev/null and b/build/userland/testbin/rmtest/rmtest.o differ
diff --git a/build/userland/testbin/sbrktest/.depend b/build/userland/testbin/sbrktest/.depend
new file mode 100644
index 0000000..546c912
--- /dev/null
+++ b/build/userland/testbin/sbrktest/.depend
@@ -0,0 +1,24 @@
+$(MYBUILDDIR)/sbrktest.o: \
+ sbrktest.c \
+ $(INSTALLTOP)/include/stdbool.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h
diff --git a/build/userland/testbin/sbrktest/sbrktest b/build/userland/testbin/sbrktest/sbrktest
new file mode 100755
index 0000000..fd55a77
Binary files /dev/null and b/build/userland/testbin/sbrktest/sbrktest differ
diff --git a/build/userland/testbin/sbrktest/sbrktest.o b/build/userland/testbin/sbrktest/sbrktest.o
new file mode 100644
index 0000000..09e67eb
Binary files /dev/null and b/build/userland/testbin/sbrktest/sbrktest.o differ
diff --git a/build/userland/testbin/schedpong/.depend b/build/userland/testbin/schedpong/.depend
new file mode 100644
index 0000000..d9e037e
--- /dev/null
+++ b/build/userland/testbin/schedpong/.depend
@@ -0,0 +1,95 @@
+$(MYBUILDDIR)/main.o: \
+ main.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdint.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h \
+ usem.h \
+ tasks.h \
+ results.h
+$(MYBUILDDIR)/think.o: \
+ think.c \
+ tasks.h
+$(MYBUILDDIR)/grind.o: \
+ grind.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ tasks.h
+$(MYBUILDDIR)/pong.o: \
+ pong.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/assert.h \
+ usem.h \
+ tasks.h
+$(MYBUILDDIR)/results.o: \
+ results.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/assert.h \
+ results.h
+$(MYBUILDDIR)/usem.o: \
+ usem.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdarg.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h \
+ usem.h
diff --git a/build/userland/testbin/schedpong/grind.o b/build/userland/testbin/schedpong/grind.o
new file mode 100644
index 0000000..f41882e
Binary files /dev/null and b/build/userland/testbin/schedpong/grind.o differ
diff --git a/build/userland/testbin/schedpong/main.o b/build/userland/testbin/schedpong/main.o
new file mode 100644
index 0000000..d437a81
Binary files /dev/null and b/build/userland/testbin/schedpong/main.o differ
diff --git a/build/userland/testbin/schedpong/pong.o b/build/userland/testbin/schedpong/pong.o
new file mode 100644
index 0000000..5211eda
Binary files /dev/null and b/build/userland/testbin/schedpong/pong.o differ
diff --git a/build/userland/testbin/schedpong/results.o b/build/userland/testbin/schedpong/results.o
new file mode 100644
index 0000000..247932a
Binary files /dev/null and b/build/userland/testbin/schedpong/results.o differ
diff --git a/build/userland/testbin/schedpong/schedpong b/build/userland/testbin/schedpong/schedpong
new file mode 100755
index 0000000..5ca0415
Binary files /dev/null and b/build/userland/testbin/schedpong/schedpong differ
diff --git a/build/userland/testbin/schedpong/think.o b/build/userland/testbin/schedpong/think.o
new file mode 100644
index 0000000..3a6957e
Binary files /dev/null and b/build/userland/testbin/schedpong/think.o differ
diff --git a/build/userland/testbin/schedpong/usem.o b/build/userland/testbin/schedpong/usem.o
new file mode 100644
index 0000000..c5e53be
Binary files /dev/null and b/build/userland/testbin/schedpong/usem.o differ
diff --git a/build/userland/testbin/sink/.depend b/build/userland/testbin/sink/.depend
new file mode 100644
index 0000000..0515963
--- /dev/null
+++ b/build/userland/testbin/sink/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/sink.o: \
+ sink.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/sink/sink b/build/userland/testbin/sink/sink
new file mode 100755
index 0000000..327ee8b
Binary files /dev/null and b/build/userland/testbin/sink/sink differ
diff --git a/build/userland/testbin/sink/sink.o b/build/userland/testbin/sink/sink.o
new file mode 100644
index 0000000..bab7992
Binary files /dev/null and b/build/userland/testbin/sink/sink.o differ
diff --git a/build/userland/testbin/sort/.depend b/build/userland/testbin/sort/.depend
new file mode 100644
index 0000000..980d14f
--- /dev/null
+++ b/build/userland/testbin/sort/.depend
@@ -0,0 +1,10 @@
+$(MYBUILDDIR)/sort.o: \
+ sort.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/string.h \
+ $(INSTALLTOP)/include/err.h \
+ $(INSTALLTOP)/include/sys/cdefs.h
diff --git a/build/userland/testbin/sort/sort b/build/userland/testbin/sort/sort
new file mode 100755
index 0000000..df0f38c
Binary files /dev/null and b/build/userland/testbin/sort/sort differ
diff --git a/build/userland/testbin/sort/sort.o b/build/userland/testbin/sort/sort.o
new file mode 100644
index 0000000..d986be3
Binary files /dev/null and b/build/userland/testbin/sort/sort.o differ
diff --git a/build/userland/testbin/sparsefile/.depend b/build/userland/testbin/sparsefile/.depend
new file mode 100644
index 0000000..31884bf
--- /dev/null
+++ b/build/userland/testbin/sparsefile/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/sparsefile.o: \
+ sparsefile.c \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/sparsefile/sparsefile b/build/userland/testbin/sparsefile/sparsefile
new file mode 100755
index 0000000..2440cbb
Binary files /dev/null and b/build/userland/testbin/sparsefile/sparsefile differ
diff --git a/build/userland/testbin/sparsefile/sparsefile.o b/build/userland/testbin/sparsefile/sparsefile.o
new file mode 100644
index 0000000..0afc39d
Binary files /dev/null and b/build/userland/testbin/sparsefile/sparsefile.o differ
diff --git a/build/userland/testbin/sty/.depend b/build/userland/testbin/sty/.depend
new file mode 100644
index 0000000..09d3546
--- /dev/null
+++ b/build/userland/testbin/sty/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/sty.o: \
+ sty.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/sty/sty b/build/userland/testbin/sty/sty
new file mode 100755
index 0000000..eb078a7
Binary files /dev/null and b/build/userland/testbin/sty/sty differ
diff --git a/build/userland/testbin/sty/sty.o b/build/userland/testbin/sty/sty.o
new file mode 100644
index 0000000..216fafb
Binary files /dev/null and b/build/userland/testbin/sty/sty.o differ
diff --git a/build/userland/testbin/tail/.depend b/build/userland/testbin/tail/.depend
new file mode 100644
index 0000000..7ea1d4e
--- /dev/null
+++ b/build/userland/testbin/tail/.depend
@@ -0,0 +1,18 @@
+$(MYBUILDDIR)/tail.o: \
+ tail.c \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdlib.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/tail/tail b/build/userland/testbin/tail/tail
new file mode 100755
index 0000000..136498d
Binary files /dev/null and b/build/userland/testbin/tail/tail differ
diff --git a/build/userland/testbin/tail/tail.o b/build/userland/testbin/tail/tail.o
new file mode 100644
index 0000000..faa58b6
Binary files /dev/null and b/build/userland/testbin/tail/tail.o differ
diff --git a/build/userland/testbin/tictac/.depend b/build/userland/testbin/tictac/.depend
new file mode 100644
index 0000000..26eacd4
--- /dev/null
+++ b/build/userland/testbin/tictac/.depend
@@ -0,0 +1,17 @@
+$(MYBUILDDIR)/tictac.o: \
+ tictac.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h
diff --git a/build/userland/testbin/tictac/tictac b/build/userland/testbin/tictac/tictac
new file mode 100755
index 0000000..a99176d
Binary files /dev/null and b/build/userland/testbin/tictac/tictac differ
diff --git a/build/userland/testbin/tictac/tictac.o b/build/userland/testbin/tictac/tictac.o
new file mode 100644
index 0000000..3f7712d
Binary files /dev/null and b/build/userland/testbin/tictac/tictac.o differ
diff --git a/build/userland/testbin/triplehuge/.depend b/build/userland/testbin/triplehuge/.depend
new file mode 100644
index 0000000..34f831f
--- /dev/null
+++ b/build/userland/testbin/triplehuge/.depend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/triplehuge.o: \
+ triplehuge.c \
+ $(INSTALLTOP)/include/test/triple.h
diff --git a/build/userland/testbin/triplehuge/triplehuge b/build/userland/testbin/triplehuge/triplehuge
new file mode 100755
index 0000000..6befbc9
Binary files /dev/null and b/build/userland/testbin/triplehuge/triplehuge differ
diff --git a/build/userland/testbin/triplehuge/triplehuge.o b/build/userland/testbin/triplehuge/triplehuge.o
new file mode 100644
index 0000000..d65cbcd
Binary files /dev/null and b/build/userland/testbin/triplehuge/triplehuge.o differ
diff --git a/build/userland/testbin/triplemat/.depend b/build/userland/testbin/triplemat/.depend
new file mode 100644
index 0000000..879ff63
--- /dev/null
+++ b/build/userland/testbin/triplemat/.depend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/triplemat.o: \
+ triplemat.c \
+ $(INSTALLTOP)/include/test/triple.h
diff --git a/build/userland/testbin/triplemat/triplemat b/build/userland/testbin/triplemat/triplemat
new file mode 100755
index 0000000..906bdda
Binary files /dev/null and b/build/userland/testbin/triplemat/triplemat differ
diff --git a/build/userland/testbin/triplemat/triplemat.o b/build/userland/testbin/triplemat/triplemat.o
new file mode 100644
index 0000000..aa37bf4
Binary files /dev/null and b/build/userland/testbin/triplemat/triplemat.o differ
diff --git a/build/userland/testbin/triplesort/.depend b/build/userland/testbin/triplesort/.depend
new file mode 100644
index 0000000..7e4c761
--- /dev/null
+++ b/build/userland/testbin/triplesort/.depend
@@ -0,0 +1,3 @@
+$(MYBUILDDIR)/triplesort.o: \
+ triplesort.c \
+ $(INSTALLTOP)/include/test/triple.h
diff --git a/build/userland/testbin/triplesort/triplesort b/build/userland/testbin/triplesort/triplesort
new file mode 100755
index 0000000..e4eda94
Binary files /dev/null and b/build/userland/testbin/triplesort/triplesort differ
diff --git a/build/userland/testbin/triplesort/triplesort.o b/build/userland/testbin/triplesort/triplesort.o
new file mode 100644
index 0000000..b10d476
Binary files /dev/null and b/build/userland/testbin/triplesort/triplesort.o differ
diff --git a/build/userland/testbin/usemtest/.depend b/build/userland/testbin/usemtest/.depend
new file mode 100644
index 0000000..78ea66e
--- /dev/null
+++ b/build/userland/testbin/usemtest/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/usemtest.o: \
+ usemtest.c \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/sys/wait.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/fcntl.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/usemtest/.hostdepend b/build/userland/testbin/usemtest/.hostdepend
new file mode 100644
index 0000000..9b0f235
--- /dev/null
+++ b/build/userland/testbin/usemtest/.hostdepend
@@ -0,0 +1,2 @@
+$(MYBUILDDIR)/usemtest.ho: \
+ usemtest.c
diff --git a/build/userland/testbin/usemtest/host-usemtest b/build/userland/testbin/usemtest/host-usemtest
new file mode 100755
index 0000000..5bb9bdd
Binary files /dev/null and b/build/userland/testbin/usemtest/host-usemtest differ
diff --git a/build/userland/testbin/usemtest/usemtest b/build/userland/testbin/usemtest/usemtest
new file mode 100755
index 0000000..5c52980
Binary files /dev/null and b/build/userland/testbin/usemtest/usemtest differ
diff --git a/build/userland/testbin/usemtest/usemtest.ho b/build/userland/testbin/usemtest/usemtest.ho
new file mode 100644
index 0000000..963f2eb
Binary files /dev/null and b/build/userland/testbin/usemtest/usemtest.ho differ
diff --git a/build/userland/testbin/usemtest/usemtest.o b/build/userland/testbin/usemtest/usemtest.o
new file mode 100644
index 0000000..b6b2c48
Binary files /dev/null and b/build/userland/testbin/usemtest/usemtest.o differ
diff --git a/build/userland/testbin/zero/.depend b/build/userland/testbin/zero/.depend
new file mode 100644
index 0000000..150e4c5
--- /dev/null
+++ b/build/userland/testbin/zero/.depend
@@ -0,0 +1,20 @@
+$(MYBUILDDIR)/zero.o: \
+ zero.c \
+ $(INSTALLTOP)/include/stdio.h \
+ $(INSTALLTOP)/include/kern/types.h \
+ $(INSTALLTOP)/include/kern/machine/types.h \
+ $(INSTALLTOP)/include/types/size_t.h \
+ $(INSTALLTOP)/include/sys/null.h \
+ $(INSTALLTOP)/include/unistd.h \
+ $(INSTALLTOP)/include/sys/cdefs.h \
+ $(INSTALLTOP)/include/sys/types.h \
+ $(INSTALLTOP)/include/kern/fcntl.h \
+ $(INSTALLTOP)/include/kern/ioctl.h \
+ $(INSTALLTOP)/include/kern/reboot.h \
+ $(INSTALLTOP)/include/kern/seek.h \
+ $(INSTALLTOP)/include/kern/time.h \
+ $(INSTALLTOP)/include/kern/unistd.h \
+ $(INSTALLTOP)/include/kern/wait.h \
+ $(INSTALLTOP)/include/errno.h \
+ $(INSTALLTOP)/include/kern/errno.h \
+ $(INSTALLTOP)/include/err.h
diff --git a/build/userland/testbin/zero/zero b/build/userland/testbin/zero/zero
new file mode 100755
index 0000000..a2bde3a
Binary files /dev/null and b/build/userland/testbin/zero/zero differ
diff --git a/build/userland/testbin/zero/zero.o b/build/userland/testbin/zero/zero.o
new file mode 100644
index 0000000..36ebc63
Binary files /dev/null and b/build/userland/testbin/zero/zero.o differ
diff --git a/defs.mk b/defs.mk
index 9932652..d82a764 100644
--- a/defs.mk
+++ b/defs.mk
@@ -13,7 +13,7 @@
 # The things that can be set here are documented in mk/os161.config.mk.
 #
 
-OSTREE=/home/ubuntu/cs161/root
+OSTREE=/home/iman/os161/root
 PLATFORM=sys161
 MACHINE=mips
 COMPAT_CFLAGS= -DNEED_NTOHLL
diff --git a/isd13-reading2.txt b/isd13-reading2.txt
new file mode 100644
index 0000000..9c71457
--- /dev/null
+++ b/isd13-reading2.txt
@@ -0,0 +1,43 @@
+THREAD QUESTIONS:
+
+1)	When thread exit is called, it sets exit status and wakes up anyone waiting to exit.
+Sets thread struct pointer to t_cwd to NULL. Destroy the t_filetable that curthread points 
+to and sets the pointer to NULL.
+Then if cur points to t_addrspace, set addrspace struct pointer object, as, to 
+cur->t_addrspace, which gets set to NULL. t_addrspace is cleared before calling as_destroy,
+so if it sleeps, we won't call as_activate on a half destroyed address space, which is
+usually fatal.
+Then destroy the as pointer.
+Then check stack guard band.
+Switch zombie thread to NULL.
+Yield cpu to another process and keep running.
+
+2)	thread_switch(), which calls switchframe_switch().
+
+3)	Running - Active.
+	Ready - Can be run when able.
+	Sleeping - Waiting. Needs to be determined if thread should be deleted or set to 
+		ready to run again.
+	Zombie - Thread exited but not deleted.
+
+4)	Turning interrupts off will not allow any new interrupts to be made or processed.
+This is to ensure that the kernel code to handle interrupts is not interrupted. This is to
+ensure that the hardware remains able to execute its processes.
+It also avoids race condition in case of a shared variable.
+
+5)	A thread wakes another by calling threadlist_remhead() to get the next waiting 
+thread and sets it to ready status. It is then added to the cpu's queue to be run on
+context switch.
+
+
+SCHEDULER/SEMAPHORE QUESTIONS:
+
+1) scheduler() calls q_remhead, which passes runqueue as its parameter, and returns the next
+thread in queue.
+
+2)	q_remhead will access runqueue and return the next thread in queue by assigning
+the thread. The student must implement the synchronization method.
+
+3)	wchan_sleep() and wchan_wakeone() are used so that if there are any reseources that 
+need to be used by more than one process, one process is put to sleep so the other
+may execute the instructions. 
diff --git a/kern/compile/ASST1/.depend b/kern/compile/ASST1/.depend
new file mode 100644
index 0000000..51e48eb
--- /dev/null
+++ b/kern/compile/ASST1/.depend
@@ -0,0 +1,904 @@
+__printf.o: ../../../common/libc/printf/__printf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
+snprintf.o: ../../../common/libc/printf/snprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
+atoi.o: ../../../common/libc/stdlib/atoi.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+bzero.o: ../../../common/libc/string/bzero.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+memcpy.o: ../../../common/libc/string/memcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+memmove.o: ../../../common/libc/string/memmove.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+memset.o: ../../../common/libc/string/memset.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strcat.o: ../../../common/libc/string/strcat.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strchr.o: ../../../common/libc/string/strchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strcmp.o: ../../../common/libc/string/strcmp.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strcpy.o: ../../../common/libc/string/strcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strlen.o: ../../../common/libc/string/strlen.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strrchr.o: ../../../common/libc/string/strrchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strtok_r.o: ../../../common/libc/string/strtok_r.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+autoconf.o: ../../compile/ASST1/autoconf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../compile/ASST1/autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/beep.h autoconf.h
+console.o: ../../dev/generic/console.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../dev/generic/console.h ../../include/vfs.h ../../include/device.h \
+ autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/vfs.h ../../include/array.h ../../dev/generic/random.h \
+ ../../include/device.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/clock.h ../../include/kern/time.h \
+ ../../dev/generic/rtclock.h autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+ autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/emu.h autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../dev/lamebus/emu.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/emufs.h \
+ ../../include/fs.h ../../include/vnode.h autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../dev/lamebus/lamebus.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/array.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lser.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../dev/lamebus/lser.h autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h includelinks/platform/bus.h \
+ includelinks/machine/vm.h ../../dev/lamebus/lamebus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/random.h ../../include/device.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/rtclock.h ../../dev/lamebus/ltimer.h autoconf.h
+semfs_fsops.o: ../../fs/semfs/semfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h ../../fs/semfs/semfs.h
+semfs_obj.o: ../../fs/semfs/semfs_obj.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../fs/semfs/semfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h
+semfs_vnops.o: ../../fs/semfs/semfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/vnode.h \
+ ../../fs/semfs/semfs.h ../../include/fs.h
+sfs_balloc.o: ../../fs/sfs/sfs_balloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/buf.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h \
+ ../../include/uio.h ../../include/kern/iovec.h
+sfs_bmap.o: ../../fs/sfs/sfs_bmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
+sfs_dir.o: ../../fs/sfs/sfs_dir.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
+sfs_fsops.o: ../../fs/sfs/sfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h
+sfs_inode.o: ../../fs/sfs/sfs_inode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/device.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
+sfs_jphys.o: ../../fs/sfs/sfs_jphys.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
+sfs_vnops.o: ../../fs/sfs/sfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
+array.o: ../../lib/array.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/bitmap.h
+bswap.o: ../../lib/bswap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h
+kgets.o: ../../lib/kgets.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/unistd.h \
+ ../../include/stdarg.h ../../include/cdefs.h ../../include/lib.h \
+ opt-noasserts.h ../../include/spl.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../include/mainbus.h ../../include/vfs.h ../../dev/lamebus/ltrace.h
+misc.o: ../../lib/misc.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errmsg.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+time.o: ../../lib/time.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/clock.h ../../include/kern/time.h
+uio.o: ../../lib/uio.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/copyinout.h
+main.o: ../../main/main.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/wait.h \
+ ../../include/kern/errno.h ../../include/kern/reboot.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/syscall.h \
+ ../../include/test.h ../../include/version.h autoconf.h
+menu.o: ../../main/menu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/reboot.h ../../include/kern/unistd.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/uio.h \
+ ../../include/kern/iovec.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../include/syscall.h ../../include/test.h \
+ opt-synchprobs.h opt-sfs.h opt-net.h
+proc.o: ../../proc/proc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/spl.h ../../include/cdefs.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/addrspace.h ../../include/vm.h includelinks/machine/vm.h \
+ opt-dumbvm.h ../../include/vnode.h
+airballoon.o: ../../synchprobs/airballoon.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/wchan.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h ../../include/kern/errno.h \
+ ../../synchprobs/common.h
+common.o: ../../synchprobs/common.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/wchan.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h ../../include/kern/errno.h \
+ ../../synchprobs/common.h
+elves.o: ../../synchprobs/elves.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/wchan.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h ../../include/kern/errno.h \
+ ../../synchprobs/common.h
+loadelf.o: ../../syscall/loadelf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vnode.h ../../include/elf.h includelinks/machine/elf.h
+runprogram.o: ../../syscall/runprogram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vfs.h ../../include/syscall.h ../../include/test.h
+time_syscalls.o: ../../syscall/time_syscalls.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/copyinout.h \
+ ../../include/syscall.h ../../include/cdefs.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/test.h
+kmalloctest.o: ../../test/kmalloctest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vm.h includelinks/machine/vm.h ../../include/test.h \
+ opt-dumbvm.h
+semunit.o: ../../test/semunit.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/synch.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/test.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/clock.h ../../include/kern/time.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h
+threadlisttest.o: ../../test/threadlisttest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
+clock.o: ../../thread/clock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/wchan.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h
+spinlock.o: ../../thread/spinlock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
+spl.o: ../../thread/spl.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h
+synch.o: ../../thread/synch.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h
+thread.o: ../../thread/thread.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/wchan.h \
+ ../../include/thread.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h ../../include/mainbus.h ../../include/vnode.h
+threadlist.o: ../../thread/threadlist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
+buf.o: ../../vfs/buf.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errno.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/buf.h
+device.o: ../../vfs/device.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vnode.h ../../include/device.h
+devnull.o: ../../vfs/devnull.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/array.h ../../include/device.h
+vfscwd.o: ../../vfs/vfscwd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/stat.h ../../include/kern/stat.h \
+ ../../include/kern/stattypes.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/vnode.h
+vfsfail.o: ../../vfs/vfsfail.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/vnode.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h
+vfslist.o: ../../vfs/vfslist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/device.h
+vfslookup.o: ../../vfs/vfslookup.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+ ../../include/vnode.h
+vfspath.o: ../../vfs/vfspath.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vfs.h ../../include/array.h \
+ ../../include/vnode.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h
+vnode.o: ../../vfs/vnode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/vnode.h
+kmalloc.o: ../../vm/kmalloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vm.h includelinks/machine/vm.h
+trap.o: ../../arch/mips/locore/trap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/signal.h \
+ includelinks/kern/machine/signal.h ../../include/kern/signal.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ includelinks/mips/specialreg.h includelinks/mips/trapframe.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/vm.h ../../include/mainbus.h ../../include/syscall.h
+syscall.o: ../../arch/mips/syscall/syscall.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/syscall.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/trapframe.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/syscall.h
+cpu.o: ../../arch/mips/thread/cpu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h includelinks/platform/maxcpus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h
+switchframe.o: ../../arch/mips/thread/switchframe.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../arch/mips/thread/switchframe.h
+switch.o: ../../arch/mips/thread/switch.S \
+ includelinks/kern/mips/regdefs.h
+thread_machdep.o: ../../arch/mips/thread/thread_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/threadprivate.h
+threadstart.o: ../../arch/mips/thread/threadstart.S \
+ includelinks/kern/mips/regdefs.h
+dumbvm.o: ../../arch/mips/vm/dumbvm.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/spl.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ includelinks/mips/tlb.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h
+ram.o: ../../arch/mips/vm/ram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vm.h includelinks/machine/vm.h \
+ ../../include/mainbus.h
+adddi3.o: ../../../common/gcc-millicode/adddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+anddi3.o: ../../../common/gcc-millicode/anddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+ashldi3.o: ../../../common/gcc-millicode/ashldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+ashrdi3.o: ../../../common/gcc-millicode/ashrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+cmpdi2.o: ../../../common/gcc-millicode/cmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+divdi3.o: ../../../common/gcc-millicode/divdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+iordi3.o: ../../../common/gcc-millicode/iordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+lshldi3.o: ../../../common/gcc-millicode/lshldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+lshrdi3.o: ../../../common/gcc-millicode/lshrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+moddi3.o: ../../../common/gcc-millicode/moddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+muldi3.o: ../../../common/gcc-millicode/muldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+negdi2.o: ../../../common/gcc-millicode/negdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+notdi2.o: ../../../common/gcc-millicode/notdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+qdivrem.o: ../../../common/gcc-millicode/qdivrem.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+subdi3.o: ../../../common/gcc-millicode/subdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+ucmpdi2.o: ../../../common/gcc-millicode/ucmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+udivdi3.o: ../../../common/gcc-millicode/udivdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+umoddi3.o: ../../../common/gcc-millicode/umoddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+xordi3.o: ../../../common/gcc-millicode/xordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+setjmp.o: ../../../common/libc/arch/mips/setjmp.S \
+ includelinks/kern/mips/regdefs.h
+copyinout.o: ../../vm/copyinout.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/copyinout.h
+cache-mips161.o: ../../arch/mips/locore/cache-mips161.S \
+ includelinks/kern/mips/regdefs.h
+exception-mips1.o: ../../arch/mips/locore/exception-mips1.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
+tlb-mips161.o: ../../arch/mips/vm/tlb-mips161.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
+lamebus_machdep.o: ../../arch/sys161/dev/lamebus_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h ../../include/spl.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/mainbus.h includelinks/sys161/bus.h \
+ ../../dev/lamebus/lamebus.h autoconf.h
+start.o: ../../arch/sys161/main/start.S includelinks/kern/mips/regdefs.h \
+ includelinks/mips/specialreg.h
diff --git a/kern/compile/ASST1/.depend.__printf.c b/kern/compile/ASST1/.depend.__printf.c
new file mode 100644
index 0000000..f105fcf
--- /dev/null
+++ b/kern/compile/ASST1/.depend.__printf.c
@@ -0,0 +1,4 @@
+__printf.o: ../../../common/libc/printf/__printf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
diff --git a/kern/compile/ASST1/.depend.adddi3.c b/kern/compile/ASST1/.depend.adddi3.c
new file mode 100644
index 0000000..b26c51a
--- /dev/null
+++ b/kern/compile/ASST1/.depend.adddi3.c
@@ -0,0 +1,6 @@
+adddi3.o: ../../../common/gcc-millicode/adddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.airballoon.c b/kern/compile/ASST1/.depend.airballoon.c
new file mode 100644
index 0000000..6c81752
--- /dev/null
+++ b/kern/compile/ASST1/.depend.airballoon.c
@@ -0,0 +1,10 @@
+airballoon.o: ../../synchprobs/airballoon.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/wchan.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h ../../include/kern/errno.h \
+ ../../synchprobs/common.h
diff --git a/kern/compile/ASST1/.depend.anddi3.c b/kern/compile/ASST1/.depend.anddi3.c
new file mode 100644
index 0000000..5c3af59
--- /dev/null
+++ b/kern/compile/ASST1/.depend.anddi3.c
@@ -0,0 +1,6 @@
+anddi3.o: ../../../common/gcc-millicode/anddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.array.c b/kern/compile/ASST1/.depend.array.c
new file mode 100644
index 0000000..11769df
--- /dev/null
+++ b/kern/compile/ASST1/.depend.array.c
@@ -0,0 +1,5 @@
+array.o: ../../lib/array.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h
diff --git a/kern/compile/ASST1/.depend.arraytest.c b/kern/compile/ASST1/.depend.arraytest.c
new file mode 100644
index 0000000..d5f5a99
--- /dev/null
+++ b/kern/compile/ASST1/.depend.arraytest.c
@@ -0,0 +1,4 @@
+arraytest.o: ../../test/arraytest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.ashldi3.c b/kern/compile/ASST1/.depend.ashldi3.c
new file mode 100644
index 0000000..5a9b439
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ashldi3.c
@@ -0,0 +1,6 @@
+ashldi3.o: ../../../common/gcc-millicode/ashldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.ashrdi3.c b/kern/compile/ASST1/.depend.ashrdi3.c
new file mode 100644
index 0000000..501df15
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ashrdi3.c
@@ -0,0 +1,6 @@
+ashrdi3.o: ../../../common/gcc-millicode/ashrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.atoi.c b/kern/compile/ASST1/.depend.atoi.c
new file mode 100644
index 0000000..b1309d1
--- /dev/null
+++ b/kern/compile/ASST1/.depend.atoi.c
@@ -0,0 +1,4 @@
+atoi.o: ../../../common/libc/stdlib/atoi.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.autoconf.c b/kern/compile/ASST1/.depend.autoconf.c
new file mode 100644
index 0000000..c63183a
--- /dev/null
+++ b/kern/compile/ASST1/.depend.autoconf.c
@@ -0,0 +1,4 @@
+autoconf.o: ../../compile/ASST1/autoconf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../compile/ASST1/autoconf.h
diff --git a/kern/compile/ASST1/.depend.beep.c b/kern/compile/ASST1/.depend.beep.c
new file mode 100644
index 0000000..2eb1f4f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.beep.c
@@ -0,0 +1,5 @@
+beep.o: ../../dev/generic/beep.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/beep.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.beep_ltimer.c b/kern/compile/ASST1/.depend.beep_ltimer.c
new file mode 100644
index 0000000..4997972
--- /dev/null
+++ b/kern/compile/ASST1/.depend.beep_ltimer.c
@@ -0,0 +1,5 @@
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+ autoconf.h
diff --git a/kern/compile/ASST1/.depend.bitmap.c b/kern/compile/ASST1/.depend.bitmap.c
new file mode 100644
index 0000000..0abdd43
--- /dev/null
+++ b/kern/compile/ASST1/.depend.bitmap.c
@@ -0,0 +1,5 @@
+bitmap.o: ../../lib/bitmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/bitmap.h
diff --git a/kern/compile/ASST1/.depend.bitmaptest.c b/kern/compile/ASST1/.depend.bitmaptest.c
new file mode 100644
index 0000000..ac59647
--- /dev/null
+++ b/kern/compile/ASST1/.depend.bitmaptest.c
@@ -0,0 +1,4 @@
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.bswap.c b/kern/compile/ASST1/.depend.bswap.c
new file mode 100644
index 0000000..3e30c8c
--- /dev/null
+++ b/kern/compile/ASST1/.depend.bswap.c
@@ -0,0 +1,4 @@
+bswap.o: ../../lib/bswap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h
diff --git a/kern/compile/ASST1/.depend.buf.c b/kern/compile/ASST1/.depend.buf.c
new file mode 100644
index 0000000..765d478
--- /dev/null
+++ b/kern/compile/ASST1/.depend.buf.c
@@ -0,0 +1,11 @@
+buf.o: ../../vfs/buf.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errno.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/buf.h
diff --git a/kern/compile/ASST1/.depend.bzero.c b/kern/compile/ASST1/.depend.bzero.c
new file mode 100644
index 0000000..5b7b54a
--- /dev/null
+++ b/kern/compile/ASST1/.depend.bzero.c
@@ -0,0 +1,4 @@
+bzero.o: ../../../common/libc/string/bzero.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.cache-mips161.S b/kern/compile/ASST1/.depend.cache-mips161.S
new file mode 100644
index 0000000..ab451a9
--- /dev/null
+++ b/kern/compile/ASST1/.depend.cache-mips161.S
@@ -0,0 +1,2 @@
+cache-mips161.o: ../../arch/mips/locore/cache-mips161.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/ASST1/.depend.clock.c b/kern/compile/ASST1/.depend.clock.c
new file mode 100644
index 0000000..0b983e9
--- /dev/null
+++ b/kern/compile/ASST1/.depend.clock.c
@@ -0,0 +1,10 @@
+clock.o: ../../thread/clock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/wchan.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h
diff --git a/kern/compile/ASST1/.depend.cmpdi2.c b/kern/compile/ASST1/.depend.cmpdi2.c
new file mode 100644
index 0000000..6720414
--- /dev/null
+++ b/kern/compile/ASST1/.depend.cmpdi2.c
@@ -0,0 +1,6 @@
+cmpdi2.o: ../../../common/gcc-millicode/cmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.common.c b/kern/compile/ASST1/.depend.common.c
new file mode 100644
index 0000000..a86440e
--- /dev/null
+++ b/kern/compile/ASST1/.depend.common.c
@@ -0,0 +1,10 @@
+common.o: ../../synchprobs/common.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/wchan.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h ../../include/kern/errno.h \
+ ../../synchprobs/common.h
diff --git a/kern/compile/ASST1/.depend.con_lser.c b/kern/compile/ASST1/.depend.con_lser.c
new file mode 100644
index 0000000..7a5a2db
--- /dev/null
+++ b/kern/compile/ASST1/.depend.con_lser.c
@@ -0,0 +1,5 @@
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.console.c b/kern/compile/ASST1/.depend.console.c
new file mode 100644
index 0000000..aae4ea0
--- /dev/null
+++ b/kern/compile/ASST1/.depend.console.c
@@ -0,0 +1,13 @@
+console.o: ../../dev/generic/console.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../dev/generic/console.h ../../include/vfs.h ../../include/device.h \
+ autoconf.h
diff --git a/kern/compile/ASST1/.depend.copyinout.c b/kern/compile/ASST1/.depend.copyinout.c
new file mode 100644
index 0000000..3812981
--- /dev/null
+++ b/kern/compile/ASST1/.depend.copyinout.c
@@ -0,0 +1,10 @@
+copyinout.o: ../../vm/copyinout.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/copyinout.h
diff --git a/kern/compile/ASST1/.depend.cpu.c b/kern/compile/ASST1/.depend.cpu.c
new file mode 100644
index 0000000..12b41ff
--- /dev/null
+++ b/kern/compile/ASST1/.depend.cpu.c
@@ -0,0 +1,10 @@
+cpu.o: ../../arch/mips/thread/cpu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h includelinks/platform/maxcpus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h
diff --git a/kern/compile/ASST1/.depend.device.c b/kern/compile/ASST1/.depend.device.c
new file mode 100644
index 0000000..283f8ae
--- /dev/null
+++ b/kern/compile/ASST1/.depend.device.c
@@ -0,0 +1,9 @@
+device.o: ../../vfs/device.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vnode.h ../../include/device.h
diff --git a/kern/compile/ASST1/.depend.devnull.c b/kern/compile/ASST1/.depend.devnull.c
new file mode 100644
index 0000000..b8237d8
--- /dev/null
+++ b/kern/compile/ASST1/.depend.devnull.c
@@ -0,0 +1,6 @@
+devnull.o: ../../vfs/devnull.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/array.h ../../include/device.h
diff --git a/kern/compile/ASST1/.depend.divdi3.c b/kern/compile/ASST1/.depend.divdi3.c
new file mode 100644
index 0000000..6a93f7a
--- /dev/null
+++ b/kern/compile/ASST1/.depend.divdi3.c
@@ -0,0 +1,6 @@
+divdi3.o: ../../../common/gcc-millicode/divdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.dumbvm.c b/kern/compile/ASST1/.depend.dumbvm.c
new file mode 100644
index 0000000..01c06ae
--- /dev/null
+++ b/kern/compile/ASST1/.depend.dumbvm.c
@@ -0,0 +1,12 @@
+dumbvm.o: ../../arch/mips/vm/dumbvm.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/spl.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ includelinks/mips/tlb.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h
diff --git a/kern/compile/ASST1/.depend.elves.c b/kern/compile/ASST1/.depend.elves.c
new file mode 100644
index 0000000..2790ec1
--- /dev/null
+++ b/kern/compile/ASST1/.depend.elves.c
@@ -0,0 +1,10 @@
+elves.o: ../../synchprobs/elves.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/wchan.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h ../../include/kern/errno.h \
+ ../../synchprobs/common.h
diff --git a/kern/compile/ASST1/.depend.emu.c b/kern/compile/ASST1/.depend.emu.c
new file mode 100644
index 0000000..92de4b8
--- /dev/null
+++ b/kern/compile/ASST1/.depend.emu.c
@@ -0,0 +1,14 @@
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../dev/lamebus/emu.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/emufs.h \
+ ../../include/fs.h ../../include/vnode.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.emu_att.c b/kern/compile/ASST1/.depend.emu_att.c
new file mode 100644
index 0000000..05e253f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.emu_att.c
@@ -0,0 +1,7 @@
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/emu.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.exception-mips1.S b/kern/compile/ASST1/.depend.exception-mips1.S
new file mode 100644
index 0000000..67ce24f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.exception-mips1.S
@@ -0,0 +1,2 @@
+exception-mips1.o: ../../arch/mips/locore/exception-mips1.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
diff --git a/kern/compile/ASST1/.depend.fstest.c b/kern/compile/ASST1/.depend.fstest.c
new file mode 100644
index 0000000..5acf37d
--- /dev/null
+++ b/kern/compile/ASST1/.depend.fstest.c
@@ -0,0 +1,11 @@
+fstest.o: ../../test/fstest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.iordi3.c b/kern/compile/ASST1/.depend.iordi3.c
new file mode 100644
index 0000000..b6a3add
--- /dev/null
+++ b/kern/compile/ASST1/.depend.iordi3.c
@@ -0,0 +1,6 @@
+iordi3.o: ../../../common/gcc-millicode/iordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.kgets.c b/kern/compile/ASST1/.depend.kgets.c
new file mode 100644
index 0000000..6f40418
--- /dev/null
+++ b/kern/compile/ASST1/.depend.kgets.c
@@ -0,0 +1,4 @@
+kgets.o: ../../lib/kgets.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.kmalloc.c b/kern/compile/ASST1/.depend.kmalloc.c
new file mode 100644
index 0000000..5c81e8a
--- /dev/null
+++ b/kern/compile/ASST1/.depend.kmalloc.c
@@ -0,0 +1,5 @@
+kmalloc.o: ../../vm/kmalloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vm.h includelinks/machine/vm.h
diff --git a/kern/compile/ASST1/.depend.kmalloctest.c b/kern/compile/ASST1/.depend.kmalloctest.c
new file mode 100644
index 0000000..a6c4284
--- /dev/null
+++ b/kern/compile/ASST1/.depend.kmalloctest.c
@@ -0,0 +1,10 @@
+kmalloctest.o: ../../test/kmalloctest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vm.h includelinks/machine/vm.h ../../include/test.h \
+ opt-dumbvm.h
diff --git a/kern/compile/ASST1/.depend.kprintf.c b/kern/compile/ASST1/.depend.kprintf.c
new file mode 100644
index 0000000..08447d3
--- /dev/null
+++ b/kern/compile/ASST1/.depend.kprintf.c
@@ -0,0 +1,12 @@
+kprintf.o: ../../lib/kprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/unistd.h \
+ ../../include/stdarg.h ../../include/cdefs.h ../../include/lib.h \
+ opt-noasserts.h ../../include/spl.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../include/mainbus.h ../../include/vfs.h ../../dev/lamebus/ltrace.h
diff --git a/kern/compile/ASST1/.depend.lamebus.c b/kern/compile/ASST1/.depend.lamebus.c
new file mode 100644
index 0000000..e92be68
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lamebus.c
@@ -0,0 +1,11 @@
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../dev/lamebus/lamebus.h
diff --git a/kern/compile/ASST1/.depend.lamebus_machdep.c b/kern/compile/ASST1/.depend.lamebus_machdep.c
new file mode 100644
index 0000000..113727d
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lamebus_machdep.c
@@ -0,0 +1,15 @@
+lamebus_machdep.o: ../../arch/sys161/dev/lamebus_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h ../../include/spl.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/mainbus.h includelinks/sys161/bus.h \
+ ../../dev/lamebus/lamebus.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.lhd.c b/kern/compile/ASST1/.depend.lhd.c
new file mode 100644
index 0000000..5b8e494
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lhd.c
@@ -0,0 +1,11 @@
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/array.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.lhd_att.c b/kern/compile/ASST1/.depend.lhd_att.c
new file mode 100644
index 0000000..2f69f50
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lhd_att.c
@@ -0,0 +1,7 @@
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.loadelf.c b/kern/compile/ASST1/.depend.loadelf.c
new file mode 100644
index 0000000..412a9fd
--- /dev/null
+++ b/kern/compile/ASST1/.depend.loadelf.c
@@ -0,0 +1,12 @@
+loadelf.o: ../../syscall/loadelf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vnode.h ../../include/elf.h includelinks/machine/elf.h
diff --git a/kern/compile/ASST1/.depend.lrandom.c b/kern/compile/ASST1/.depend.lrandom.c
new file mode 100644
index 0000000..7dccf3f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lrandom.c
@@ -0,0 +1,8 @@
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.lrandom_att.c b/kern/compile/ASST1/.depend.lrandom_att.c
new file mode 100644
index 0000000..e4dc766
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lrandom_att.c
@@ -0,0 +1,7 @@
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.lser.c b/kern/compile/ASST1/.depend.lser.c
new file mode 100644
index 0000000..a2ba69c
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lser.c
@@ -0,0 +1,7 @@
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../dev/lamebus/lser.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.lser_att.c b/kern/compile/ASST1/.depend.lser_att.c
new file mode 100644
index 0000000..7c095cb
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lser_att.c
@@ -0,0 +1,7 @@
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lser.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.lshldi3.c b/kern/compile/ASST1/.depend.lshldi3.c
new file mode 100644
index 0000000..19fd20f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lshldi3.c
@@ -0,0 +1,6 @@
+lshldi3.o: ../../../common/gcc-millicode/lshldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.lshrdi3.c b/kern/compile/ASST1/.depend.lshrdi3.c
new file mode 100644
index 0000000..f867bad
--- /dev/null
+++ b/kern/compile/ASST1/.depend.lshrdi3.c
@@ -0,0 +1,6 @@
+lshrdi3.o: ../../../common/gcc-millicode/lshrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.ltimer.c b/kern/compile/ASST1/.depend.ltimer.c
new file mode 100644
index 0000000..13379e3
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ltimer.c
@@ -0,0 +1,9 @@
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h includelinks/platform/bus.h \
+ includelinks/machine/vm.h ../../dev/lamebus/lamebus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.ltimer_att.c b/kern/compile/ASST1/.depend.ltimer_att.c
new file mode 100644
index 0000000..c7afbc9
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ltimer_att.c
@@ -0,0 +1,7 @@
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.ltrace.c b/kern/compile/ASST1/.depend.ltrace.c
new file mode 100644
index 0000000..4dacdd3
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ltrace.c
@@ -0,0 +1,7 @@
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.ltrace_att.c b/kern/compile/ASST1/.depend.ltrace_att.c
new file mode 100644
index 0000000..5fe2f14
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ltrace_att.c
@@ -0,0 +1,7 @@
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.main.c b/kern/compile/ASST1/.depend.main.c
new file mode 100644
index 0000000..cdd6610
--- /dev/null
+++ b/kern/compile/ASST1/.depend.main.c
@@ -0,0 +1,15 @@
+main.o: ../../main/main.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/wait.h \
+ ../../include/kern/errno.h ../../include/kern/reboot.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/syscall.h \
+ ../../include/test.h ../../include/version.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.memcpy.c b/kern/compile/ASST1/.depend.memcpy.c
new file mode 100644
index 0000000..0b67cb4
--- /dev/null
+++ b/kern/compile/ASST1/.depend.memcpy.c
@@ -0,0 +1,4 @@
+memcpy.o: ../../../common/libc/string/memcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.memmove.c b/kern/compile/ASST1/.depend.memmove.c
new file mode 100644
index 0000000..4dcbc31
--- /dev/null
+++ b/kern/compile/ASST1/.depend.memmove.c
@@ -0,0 +1,4 @@
+memmove.o: ../../../common/libc/string/memmove.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.memset.c b/kern/compile/ASST1/.depend.memset.c
new file mode 100644
index 0000000..15bb933
--- /dev/null
+++ b/kern/compile/ASST1/.depend.memset.c
@@ -0,0 +1,4 @@
+memset.o: ../../../common/libc/string/memset.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.menu.c b/kern/compile/ASST1/.depend.menu.c
new file mode 100644
index 0000000..0d45641
--- /dev/null
+++ b/kern/compile/ASST1/.depend.menu.c
@@ -0,0 +1,15 @@
+menu.o: ../../main/menu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/reboot.h ../../include/kern/unistd.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/uio.h \
+ ../../include/kern/iovec.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../include/syscall.h ../../include/test.h \
+ opt-synchprobs.h opt-sfs.h opt-net.h
diff --git a/kern/compile/ASST1/.depend.misc.c b/kern/compile/ASST1/.depend.misc.c
new file mode 100644
index 0000000..7aaf652
--- /dev/null
+++ b/kern/compile/ASST1/.depend.misc.c
@@ -0,0 +1,4 @@
+misc.o: ../../lib/misc.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errmsg.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.moddi3.c b/kern/compile/ASST1/.depend.moddi3.c
new file mode 100644
index 0000000..4a05e30
--- /dev/null
+++ b/kern/compile/ASST1/.depend.moddi3.c
@@ -0,0 +1,6 @@
+moddi3.o: ../../../common/gcc-millicode/moddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.muldi3.c b/kern/compile/ASST1/.depend.muldi3.c
new file mode 100644
index 0000000..d43769e
--- /dev/null
+++ b/kern/compile/ASST1/.depend.muldi3.c
@@ -0,0 +1,6 @@
+muldi3.o: ../../../common/gcc-millicode/muldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.negdi2.c b/kern/compile/ASST1/.depend.negdi2.c
new file mode 100644
index 0000000..6da3714
--- /dev/null
+++ b/kern/compile/ASST1/.depend.negdi2.c
@@ -0,0 +1,6 @@
+negdi2.o: ../../../common/gcc-millicode/negdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.notdi2.c b/kern/compile/ASST1/.depend.notdi2.c
new file mode 100644
index 0000000..c4f6a31
--- /dev/null
+++ b/kern/compile/ASST1/.depend.notdi2.c
@@ -0,0 +1,6 @@
+notdi2.o: ../../../common/gcc-millicode/notdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.proc.c b/kern/compile/ASST1/.depend.proc.c
new file mode 100644
index 0000000..157e915
--- /dev/null
+++ b/kern/compile/ASST1/.depend.proc.c
@@ -0,0 +1,11 @@
+proc.o: ../../proc/proc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/spl.h ../../include/cdefs.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/addrspace.h ../../include/vm.h includelinks/machine/vm.h \
+ opt-dumbvm.h ../../include/vnode.h
diff --git a/kern/compile/ASST1/.depend.qdivrem.c b/kern/compile/ASST1/.depend.qdivrem.c
new file mode 100644
index 0000000..d85cc1b
--- /dev/null
+++ b/kern/compile/ASST1/.depend.qdivrem.c
@@ -0,0 +1,6 @@
+qdivrem.o: ../../../common/gcc-millicode/qdivrem.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.ram.c b/kern/compile/ASST1/.depend.ram.c
new file mode 100644
index 0000000..731b6ed
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ram.c
@@ -0,0 +1,5 @@
+ram.o: ../../arch/mips/vm/ram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vm.h includelinks/machine/vm.h \
+ ../../include/mainbus.h
diff --git a/kern/compile/ASST1/.depend.random.c b/kern/compile/ASST1/.depend.random.c
new file mode 100644
index 0000000..639be22
--- /dev/null
+++ b/kern/compile/ASST1/.depend.random.c
@@ -0,0 +1,7 @@
+random.o: ../../dev/generic/random.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/vfs.h ../../include/array.h ../../dev/generic/random.h \
+ ../../include/device.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.random_lrandom.c b/kern/compile/ASST1/.depend.random_lrandom.c
new file mode 100644
index 0000000..b48dd42
--- /dev/null
+++ b/kern/compile/ASST1/.depend.random_lrandom.c
@@ -0,0 +1,6 @@
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/random.h ../../include/device.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.rtclock.c b/kern/compile/ASST1/.depend.rtclock.c
new file mode 100644
index 0000000..f3c4158
--- /dev/null
+++ b/kern/compile/ASST1/.depend.rtclock.c
@@ -0,0 +1,6 @@
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/clock.h ../../include/kern/time.h \
+ ../../dev/generic/rtclock.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.rtclock_ltimer.c b/kern/compile/ASST1/.depend.rtclock_ltimer.c
new file mode 100644
index 0000000..a9492fc
--- /dev/null
+++ b/kern/compile/ASST1/.depend.rtclock_ltimer.c
@@ -0,0 +1,5 @@
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/rtclock.h ../../dev/lamebus/ltimer.h autoconf.h
diff --git a/kern/compile/ASST1/.depend.runprogram.c b/kern/compile/ASST1/.depend.runprogram.c
new file mode 100644
index 0000000..a68f9db
--- /dev/null
+++ b/kern/compile/ASST1/.depend.runprogram.c
@@ -0,0 +1,12 @@
+runprogram.o: ../../syscall/runprogram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vfs.h ../../include/syscall.h ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.semfs_fsops.c b/kern/compile/ASST1/.depend.semfs_fsops.c
new file mode 100644
index 0000000..5c8d1ea
--- /dev/null
+++ b/kern/compile/ASST1/.depend.semfs_fsops.c
@@ -0,0 +1,7 @@
+semfs_fsops.o: ../../fs/semfs/semfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h ../../fs/semfs/semfs.h
diff --git a/kern/compile/ASST1/.depend.semfs_obj.c b/kern/compile/ASST1/.depend.semfs_obj.c
new file mode 100644
index 0000000..a4a6edf
--- /dev/null
+++ b/kern/compile/ASST1/.depend.semfs_obj.c
@@ -0,0 +1,7 @@
+semfs_obj.o: ../../fs/semfs/semfs_obj.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../fs/semfs/semfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h
diff --git a/kern/compile/ASST1/.depend.semfs_vnops.c b/kern/compile/ASST1/.depend.semfs_vnops.c
new file mode 100644
index 0000000..d94990e
--- /dev/null
+++ b/kern/compile/ASST1/.depend.semfs_vnops.c
@@ -0,0 +1,14 @@
+semfs_vnops.o: ../../fs/semfs/semfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/vnode.h \
+ ../../fs/semfs/semfs.h ../../include/fs.h
diff --git a/kern/compile/ASST1/.depend.semunit.c b/kern/compile/ASST1/.depend.semunit.c
new file mode 100644
index 0000000..91ca484
--- /dev/null
+++ b/kern/compile/ASST1/.depend.semunit.c
@@ -0,0 +1,9 @@
+semunit.o: ../../test/semunit.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/synch.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.setjmp.S b/kern/compile/ASST1/.depend.setjmp.S
new file mode 100644
index 0000000..d60c02b
--- /dev/null
+++ b/kern/compile/ASST1/.depend.setjmp.S
@@ -0,0 +1,2 @@
+setjmp.o: ../../../common/libc/arch/mips/setjmp.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/ASST1/.depend.sfs_balloc.c b/kern/compile/ASST1/.depend.sfs_balloc.c
new file mode 100644
index 0000000..be9bb84
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_balloc.c
@@ -0,0 +1,8 @@
+sfs_balloc.o: ../../fs/sfs/sfs_balloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/buf.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h \
+ ../../include/uio.h ../../include/kern/iovec.h
diff --git a/kern/compile/ASST1/.depend.sfs_bmap.c b/kern/compile/ASST1/.depend.sfs_bmap.c
new file mode 100644
index 0000000..876c342
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_bmap.c
@@ -0,0 +1,9 @@
+sfs_bmap.o: ../../fs/sfs/sfs_bmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
diff --git a/kern/compile/ASST1/.depend.sfs_dir.c b/kern/compile/ASST1/.depend.sfs_dir.c
new file mode 100644
index 0000000..ad4b515
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_dir.c
@@ -0,0 +1,8 @@
+sfs_dir.o: ../../fs/sfs/sfs_dir.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
diff --git a/kern/compile/ASST1/.depend.sfs_fsops.c b/kern/compile/ASST1/.depend.sfs_fsops.c
new file mode 100644
index 0000000..20f9808
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_fsops.c
@@ -0,0 +1,10 @@
+sfs_fsops.o: ../../fs/sfs/sfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h
diff --git a/kern/compile/ASST1/.depend.sfs_inode.c b/kern/compile/ASST1/.depend.sfs_inode.c
new file mode 100644
index 0000000..d6b46e9
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_inode.c
@@ -0,0 +1,13 @@
+sfs_inode.o: ../../fs/sfs/sfs_inode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
diff --git a/kern/compile/ASST1/.depend.sfs_io.c b/kern/compile/ASST1/.depend.sfs_io.c
new file mode 100644
index 0000000..68998d4
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_io.c
@@ -0,0 +1,9 @@
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/device.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
diff --git a/kern/compile/ASST1/.depend.sfs_jphys.c b/kern/compile/ASST1/.depend.sfs_jphys.c
new file mode 100644
index 0000000..1e341ae
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_jphys.c
@@ -0,0 +1,13 @@
+sfs_jphys.o: ../../fs/sfs/sfs_jphys.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
diff --git a/kern/compile/ASST1/.depend.sfs_vnops.c b/kern/compile/ASST1/.depend.sfs_vnops.c
new file mode 100644
index 0000000..6125822
--- /dev/null
+++ b/kern/compile/ASST1/.depend.sfs_vnops.c
@@ -0,0 +1,12 @@
+sfs_vnops.o: ../../fs/sfs/sfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
diff --git a/kern/compile/ASST1/.depend.snprintf.c b/kern/compile/ASST1/.depend.snprintf.c
new file mode 100644
index 0000000..711ba8f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.snprintf.c
@@ -0,0 +1,4 @@
+snprintf.o: ../../../common/libc/printf/snprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
diff --git a/kern/compile/ASST1/.depend.spinlock.c b/kern/compile/ASST1/.depend.spinlock.c
new file mode 100644
index 0000000..28a7be1
--- /dev/null
+++ b/kern/compile/ASST1/.depend.spinlock.c
@@ -0,0 +1,10 @@
+spinlock.o: ../../thread/spinlock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
diff --git a/kern/compile/ASST1/.depend.spl.c b/kern/compile/ASST1/.depend.spl.c
new file mode 100644
index 0000000..49c9fac
--- /dev/null
+++ b/kern/compile/ASST1/.depend.spl.c
@@ -0,0 +1,9 @@
+spl.o: ../../thread/spl.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h
diff --git a/kern/compile/ASST1/.depend.start.S b/kern/compile/ASST1/.depend.start.S
new file mode 100644
index 0000000..ecb1ac8
--- /dev/null
+++ b/kern/compile/ASST1/.depend.start.S
@@ -0,0 +1,2 @@
+start.o: ../../arch/sys161/main/start.S includelinks/kern/mips/regdefs.h \
+ includelinks/mips/specialreg.h
diff --git a/kern/compile/ASST1/.depend.strcat.c b/kern/compile/ASST1/.depend.strcat.c
new file mode 100644
index 0000000..26e2998
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strcat.c
@@ -0,0 +1,4 @@
+strcat.o: ../../../common/libc/string/strcat.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.strchr.c b/kern/compile/ASST1/.depend.strchr.c
new file mode 100644
index 0000000..e225d98
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strchr.c
@@ -0,0 +1,4 @@
+strchr.o: ../../../common/libc/string/strchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.strcmp.c b/kern/compile/ASST1/.depend.strcmp.c
new file mode 100644
index 0000000..7022ede
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strcmp.c
@@ -0,0 +1,4 @@
+strcmp.o: ../../../common/libc/string/strcmp.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.strcpy.c b/kern/compile/ASST1/.depend.strcpy.c
new file mode 100644
index 0000000..a999341
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strcpy.c
@@ -0,0 +1,4 @@
+strcpy.o: ../../../common/libc/string/strcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.strlen.c b/kern/compile/ASST1/.depend.strlen.c
new file mode 100644
index 0000000..4eba669
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strlen.c
@@ -0,0 +1,4 @@
+strlen.o: ../../../common/libc/string/strlen.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.strrchr.c b/kern/compile/ASST1/.depend.strrchr.c
new file mode 100644
index 0000000..2f185f3
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strrchr.c
@@ -0,0 +1,4 @@
+strrchr.o: ../../../common/libc/string/strrchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.strtok_r.c b/kern/compile/ASST1/.depend.strtok_r.c
new file mode 100644
index 0000000..8abfe38
--- /dev/null
+++ b/kern/compile/ASST1/.depend.strtok_r.c
@@ -0,0 +1,4 @@
+strtok_r.o: ../../../common/libc/string/strtok_r.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/ASST1/.depend.subdi3.c b/kern/compile/ASST1/.depend.subdi3.c
new file mode 100644
index 0000000..b9ebb1b
--- /dev/null
+++ b/kern/compile/ASST1/.depend.subdi3.c
@@ -0,0 +1,6 @@
+subdi3.o: ../../../common/gcc-millicode/subdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.switch.S b/kern/compile/ASST1/.depend.switch.S
new file mode 100644
index 0000000..479088e
--- /dev/null
+++ b/kern/compile/ASST1/.depend.switch.S
@@ -0,0 +1,2 @@
+switch.o: ../../arch/mips/thread/switch.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/ASST1/.depend.switchframe.c b/kern/compile/ASST1/.depend.switchframe.c
new file mode 100644
index 0000000..4d3fa88
--- /dev/null
+++ b/kern/compile/ASST1/.depend.switchframe.c
@@ -0,0 +1,8 @@
+switchframe.o: ../../arch/mips/thread/switchframe.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../arch/mips/thread/switchframe.h
diff --git a/kern/compile/ASST1/.depend.synch.c b/kern/compile/ASST1/.depend.synch.c
new file mode 100644
index 0000000..5ecbb85
--- /dev/null
+++ b/kern/compile/ASST1/.depend.synch.c
@@ -0,0 +1,9 @@
+synch.o: ../../thread/synch.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h
diff --git a/kern/compile/ASST1/.depend.synchtest.c b/kern/compile/ASST1/.depend.synchtest.c
new file mode 100644
index 0000000..a0b8c98
--- /dev/null
+++ b/kern/compile/ASST1/.depend.synchtest.c
@@ -0,0 +1,9 @@
+synchtest.o: ../../test/synchtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/clock.h ../../include/kern/time.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.syscall.c b/kern/compile/ASST1/.depend.syscall.c
new file mode 100644
index 0000000..03853f8
--- /dev/null
+++ b/kern/compile/ASST1/.depend.syscall.c
@@ -0,0 +1,10 @@
+syscall.o: ../../arch/mips/syscall/syscall.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/syscall.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/trapframe.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/syscall.h
diff --git a/kern/compile/ASST1/.depend.thread.c b/kern/compile/ASST1/.depend.thread.c
new file mode 100644
index 0000000..bec7aa8
--- /dev/null
+++ b/kern/compile/ASST1/.depend.thread.c
@@ -0,0 +1,13 @@
+thread.o: ../../thread/thread.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/wchan.h \
+ ../../include/thread.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h ../../include/mainbus.h ../../include/vnode.h
diff --git a/kern/compile/ASST1/.depend.thread_machdep.c b/kern/compile/ASST1/.depend.thread_machdep.c
new file mode 100644
index 0000000..595bfbc
--- /dev/null
+++ b/kern/compile/ASST1/.depend.thread_machdep.c
@@ -0,0 +1,8 @@
+thread_machdep.o: ../../arch/mips/thread/thread_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/threadprivate.h
diff --git a/kern/compile/ASST1/.depend.threadlist.c b/kern/compile/ASST1/.depend.threadlist.c
new file mode 100644
index 0000000..f1e1e53
--- /dev/null
+++ b/kern/compile/ASST1/.depend.threadlist.c
@@ -0,0 +1,7 @@
+threadlist.o: ../../thread/threadlist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
diff --git a/kern/compile/ASST1/.depend.threadlisttest.c b/kern/compile/ASST1/.depend.threadlisttest.c
new file mode 100644
index 0000000..7dc2f9a
--- /dev/null
+++ b/kern/compile/ASST1/.depend.threadlisttest.c
@@ -0,0 +1,8 @@
+threadlisttest.o: ../../test/threadlisttest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.threadstart.S b/kern/compile/ASST1/.depend.threadstart.S
new file mode 100644
index 0000000..9476eab
--- /dev/null
+++ b/kern/compile/ASST1/.depend.threadstart.S
@@ -0,0 +1,2 @@
+threadstart.o: ../../arch/mips/thread/threadstart.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/ASST1/.depend.threadtest.c b/kern/compile/ASST1/.depend.threadtest.c
new file mode 100644
index 0000000..2867171
--- /dev/null
+++ b/kern/compile/ASST1/.depend.threadtest.c
@@ -0,0 +1,8 @@
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.time.c b/kern/compile/ASST1/.depend.time.c
new file mode 100644
index 0000000..f453151
--- /dev/null
+++ b/kern/compile/ASST1/.depend.time.c
@@ -0,0 +1,3 @@
+time.o: ../../lib/time.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/clock.h ../../include/kern/time.h
diff --git a/kern/compile/ASST1/.depend.time_syscalls.c b/kern/compile/ASST1/.depend.time_syscalls.c
new file mode 100644
index 0000000..ad82140
--- /dev/null
+++ b/kern/compile/ASST1/.depend.time_syscalls.c
@@ -0,0 +1,5 @@
+time_syscalls.o: ../../syscall/time_syscalls.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/copyinout.h \
+ ../../include/syscall.h ../../include/cdefs.h
diff --git a/kern/compile/ASST1/.depend.tlb-mips161.S b/kern/compile/ASST1/.depend.tlb-mips161.S
new file mode 100644
index 0000000..4d4e680
--- /dev/null
+++ b/kern/compile/ASST1/.depend.tlb-mips161.S
@@ -0,0 +1,2 @@
+tlb-mips161.o: ../../arch/mips/vm/tlb-mips161.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
diff --git a/kern/compile/ASST1/.depend.trap.c b/kern/compile/ASST1/.depend.trap.c
new file mode 100644
index 0000000..e854472
--- /dev/null
+++ b/kern/compile/ASST1/.depend.trap.c
@@ -0,0 +1,13 @@
+trap.o: ../../arch/mips/locore/trap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/signal.h \
+ includelinks/kern/machine/signal.h ../../include/kern/signal.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ includelinks/mips/specialreg.h includelinks/mips/trapframe.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/vm.h ../../include/mainbus.h ../../include/syscall.h
diff --git a/kern/compile/ASST1/.depend.tt3.c b/kern/compile/ASST1/.depend.tt3.c
new file mode 100644
index 0000000..4040d9b
--- /dev/null
+++ b/kern/compile/ASST1/.depend.tt3.c
@@ -0,0 +1,8 @@
+tt3.o: ../../test/tt3.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
diff --git a/kern/compile/ASST1/.depend.ucmpdi2.c b/kern/compile/ASST1/.depend.ucmpdi2.c
new file mode 100644
index 0000000..d3b1030
--- /dev/null
+++ b/kern/compile/ASST1/.depend.ucmpdi2.c
@@ -0,0 +1,6 @@
+ucmpdi2.o: ../../../common/gcc-millicode/ucmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.udivdi3.c b/kern/compile/ASST1/.depend.udivdi3.c
new file mode 100644
index 0000000..a45ad9f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.udivdi3.c
@@ -0,0 +1,6 @@
+udivdi3.o: ../../../common/gcc-millicode/udivdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.uio.c b/kern/compile/ASST1/.depend.uio.c
new file mode 100644
index 0000000..56932e2
--- /dev/null
+++ b/kern/compile/ASST1/.depend.uio.c
@@ -0,0 +1,9 @@
+uio.o: ../../lib/uio.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/copyinout.h
diff --git a/kern/compile/ASST1/.depend.umoddi3.c b/kern/compile/ASST1/.depend.umoddi3.c
new file mode 100644
index 0000000..785c65d
--- /dev/null
+++ b/kern/compile/ASST1/.depend.umoddi3.c
@@ -0,0 +1,6 @@
+umoddi3.o: ../../../common/gcc-millicode/umoddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/.depend.vfscwd.c b/kern/compile/ASST1/.depend.vfscwd.c
new file mode 100644
index 0000000..4f572eb
--- /dev/null
+++ b/kern/compile/ASST1/.depend.vfscwd.c
@@ -0,0 +1,13 @@
+vfscwd.o: ../../vfs/vfscwd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/stat.h ../../include/kern/stat.h \
+ ../../include/kern/stattypes.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/vnode.h
diff --git a/kern/compile/ASST1/.depend.vfsfail.c b/kern/compile/ASST1/.depend.vfsfail.c
new file mode 100644
index 0000000..fb59aa7
--- /dev/null
+++ b/kern/compile/ASST1/.depend.vfsfail.c
@@ -0,0 +1,5 @@
+vfsfail.o: ../../vfs/vfsfail.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/vnode.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h
diff --git a/kern/compile/ASST1/.depend.vfslist.c b/kern/compile/ASST1/.depend.vfslist.c
new file mode 100644
index 0000000..7ddcc06
--- /dev/null
+++ b/kern/compile/ASST1/.depend.vfslist.c
@@ -0,0 +1,7 @@
+vfslist.o: ../../vfs/vfslist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/device.h
diff --git a/kern/compile/ASST1/.depend.vfslookup.c b/kern/compile/ASST1/.depend.vfslookup.c
new file mode 100644
index 0000000..fe59e8f
--- /dev/null
+++ b/kern/compile/ASST1/.depend.vfslookup.c
@@ -0,0 +1,8 @@
+vfslookup.o: ../../vfs/vfslookup.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+ ../../include/vnode.h
diff --git a/kern/compile/ASST1/.depend.vfspath.c b/kern/compile/ASST1/.depend.vfspath.c
new file mode 100644
index 0000000..1a7ced0
--- /dev/null
+++ b/kern/compile/ASST1/.depend.vfspath.c
@@ -0,0 +1,8 @@
+vfspath.o: ../../vfs/vfspath.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vfs.h ../../include/array.h \
+ ../../include/vnode.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h
diff --git a/kern/compile/ASST1/.depend.vnode.c b/kern/compile/ASST1/.depend.vnode.c
new file mode 100644
index 0000000..53c558c
--- /dev/null
+++ b/kern/compile/ASST1/.depend.vnode.c
@@ -0,0 +1,7 @@
+vnode.o: ../../vfs/vnode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/vnode.h
diff --git a/kern/compile/ASST1/.depend.xordi3.c b/kern/compile/ASST1/.depend.xordi3.c
new file mode 100644
index 0000000..c973bcd
--- /dev/null
+++ b/kern/compile/ASST1/.depend.xordi3.c
@@ -0,0 +1,6 @@
+xordi3.o: ../../../common/gcc-millicode/xordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/ASST1/Makefile b/kern/compile/ASST1/Makefile
new file mode 100644
index 0000000..079aad6
--- /dev/null
+++ b/kern/compile/ASST1/Makefile
@@ -0,0 +1,15 @@
+# Automatically generated by config; do not edit.
+#
+
+# Top of the kernel tree
+KTOP=../..
+# Top of the whole tree
+TOP=$(KTOP)/..
+# Debug vs. optimize
+KDEBUG=-g
+# Name of the kernel config file
+CONFNAME=ASST1
+
+.include "$(TOP)/mk/os161.config.mk"
+.include "files.mk"
+.include "$(TOP)/mk/os161.kernel.mk"
diff --git a/kern/compile/ASST1/__printf.o b/kern/compile/ASST1/__printf.o
new file mode 100644
index 0000000..7c69142
Binary files /dev/null and b/kern/compile/ASST1/__printf.o differ
diff --git a/kern/compile/ASST1/adddi3.o b/kern/compile/ASST1/adddi3.o
new file mode 100644
index 0000000..f630657
Binary files /dev/null and b/kern/compile/ASST1/adddi3.o differ
diff --git a/kern/compile/ASST1/airballoon.o b/kern/compile/ASST1/airballoon.o
new file mode 100644
index 0000000..19e6056
Binary files /dev/null and b/kern/compile/ASST1/airballoon.o differ
diff --git a/kern/compile/ASST1/anddi3.o b/kern/compile/ASST1/anddi3.o
new file mode 100644
index 0000000..2f2e5c2
Binary files /dev/null and b/kern/compile/ASST1/anddi3.o differ
diff --git a/kern/compile/ASST1/array.o b/kern/compile/ASST1/array.o
new file mode 100644
index 0000000..aa5c592
Binary files /dev/null and b/kern/compile/ASST1/array.o differ
diff --git a/kern/compile/ASST1/arraytest.o b/kern/compile/ASST1/arraytest.o
new file mode 100644
index 0000000..577d672
Binary files /dev/null and b/kern/compile/ASST1/arraytest.o differ
diff --git a/kern/compile/ASST1/ashldi3.o b/kern/compile/ASST1/ashldi3.o
new file mode 100644
index 0000000..f317c8b
Binary files /dev/null and b/kern/compile/ASST1/ashldi3.o differ
diff --git a/kern/compile/ASST1/ashrdi3.o b/kern/compile/ASST1/ashrdi3.o
new file mode 100644
index 0000000..82527ae
Binary files /dev/null and b/kern/compile/ASST1/ashrdi3.o differ
diff --git a/kern/compile/ASST1/atoi.o b/kern/compile/ASST1/atoi.o
new file mode 100644
index 0000000..3f31f7b
Binary files /dev/null and b/kern/compile/ASST1/atoi.o differ
diff --git a/kern/compile/ASST1/autoconf.c b/kern/compile/ASST1/autoconf.c
new file mode 100644
index 0000000..117c315
--- /dev/null
+++ b/kern/compile/ASST1/autoconf.c
@@ -0,0 +1,410 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+pseudoconfig(void)
+{
+}
+
diff --git a/kern/compile/ASST1/autoconf.h b/kern/compile/ASST1/autoconf.h
new file mode 100644
index 0000000..2c48736
--- /dev/null
+++ b/kern/compile/ASST1/autoconf.h
@@ -0,0 +1,43 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/kern/compile/ASST1/autoconf.o b/kern/compile/ASST1/autoconf.o
new file mode 100644
index 0000000..949700c
Binary files /dev/null and b/kern/compile/ASST1/autoconf.o differ
diff --git a/kern/compile/ASST1/beep.o b/kern/compile/ASST1/beep.o
new file mode 100644
index 0000000..18316ec
Binary files /dev/null and b/kern/compile/ASST1/beep.o differ
diff --git a/kern/compile/ASST1/beep_ltimer.o b/kern/compile/ASST1/beep_ltimer.o
new file mode 100644
index 0000000..6da4cc6
Binary files /dev/null and b/kern/compile/ASST1/beep_ltimer.o differ
diff --git a/kern/compile/ASST1/bitmap.o b/kern/compile/ASST1/bitmap.o
new file mode 100644
index 0000000..1ded5fe
Binary files /dev/null and b/kern/compile/ASST1/bitmap.o differ
diff --git a/kern/compile/ASST1/bitmaptest.o b/kern/compile/ASST1/bitmaptest.o
new file mode 100644
index 0000000..649fc38
Binary files /dev/null and b/kern/compile/ASST1/bitmaptest.o differ
diff --git a/kern/compile/ASST1/bswap.o b/kern/compile/ASST1/bswap.o
new file mode 100644
index 0000000..79daa43
Binary files /dev/null and b/kern/compile/ASST1/bswap.o differ
diff --git a/kern/compile/ASST1/buf.o b/kern/compile/ASST1/buf.o
new file mode 100644
index 0000000..331ca29
Binary files /dev/null and b/kern/compile/ASST1/buf.o differ
diff --git a/kern/compile/ASST1/bzero.o b/kern/compile/ASST1/bzero.o
new file mode 100644
index 0000000..2dc1481
Binary files /dev/null and b/kern/compile/ASST1/bzero.o differ
diff --git a/kern/compile/ASST1/cache-mips161.o b/kern/compile/ASST1/cache-mips161.o
new file mode 100644
index 0000000..3f553dc
Binary files /dev/null and b/kern/compile/ASST1/cache-mips161.o differ
diff --git a/kern/compile/ASST1/clock.o b/kern/compile/ASST1/clock.o
new file mode 100644
index 0000000..033f2b6
Binary files /dev/null and b/kern/compile/ASST1/clock.o differ
diff --git a/kern/compile/ASST1/cmpdi2.o b/kern/compile/ASST1/cmpdi2.o
new file mode 100644
index 0000000..9bdec74
Binary files /dev/null and b/kern/compile/ASST1/cmpdi2.o differ
diff --git a/kern/compile/ASST1/common.o b/kern/compile/ASST1/common.o
new file mode 100644
index 0000000..1463647
Binary files /dev/null and b/kern/compile/ASST1/common.o differ
diff --git a/kern/compile/ASST1/con_lser.o b/kern/compile/ASST1/con_lser.o
new file mode 100644
index 0000000..99e0f72
Binary files /dev/null and b/kern/compile/ASST1/con_lser.o differ
diff --git a/kern/compile/ASST1/console.o b/kern/compile/ASST1/console.o
new file mode 100644
index 0000000..a3cea7a
Binary files /dev/null and b/kern/compile/ASST1/console.o differ
diff --git a/kern/compile/ASST1/copyinout.o b/kern/compile/ASST1/copyinout.o
new file mode 100644
index 0000000..7c221fb
Binary files /dev/null and b/kern/compile/ASST1/copyinout.o differ
diff --git a/kern/compile/ASST1/cpu.o b/kern/compile/ASST1/cpu.o
new file mode 100644
index 0000000..0a6e2e1
Binary files /dev/null and b/kern/compile/ASST1/cpu.o differ
diff --git a/kern/compile/ASST1/device.o b/kern/compile/ASST1/device.o
new file mode 100644
index 0000000..2877702
Binary files /dev/null and b/kern/compile/ASST1/device.o differ
diff --git a/kern/compile/ASST1/devnull.o b/kern/compile/ASST1/devnull.o
new file mode 100644
index 0000000..2daa45e
Binary files /dev/null and b/kern/compile/ASST1/devnull.o differ
diff --git a/kern/compile/ASST1/divdi3.o b/kern/compile/ASST1/divdi3.o
new file mode 100644
index 0000000..5261d5b
Binary files /dev/null and b/kern/compile/ASST1/divdi3.o differ
diff --git a/kern/compile/ASST1/dumbvm.o b/kern/compile/ASST1/dumbvm.o
new file mode 100644
index 0000000..d1377e0
Binary files /dev/null and b/kern/compile/ASST1/dumbvm.o differ
diff --git a/kern/compile/ASST1/elves.o b/kern/compile/ASST1/elves.o
new file mode 100644
index 0000000..a79c2b8
Binary files /dev/null and b/kern/compile/ASST1/elves.o differ
diff --git a/kern/compile/ASST1/emu.o b/kern/compile/ASST1/emu.o
new file mode 100644
index 0000000..105e1de
Binary files /dev/null and b/kern/compile/ASST1/emu.o differ
diff --git a/kern/compile/ASST1/emu_att.o b/kern/compile/ASST1/emu_att.o
new file mode 100644
index 0000000..665d73d
Binary files /dev/null and b/kern/compile/ASST1/emu_att.o differ
diff --git a/kern/compile/ASST1/exception-mips1.o b/kern/compile/ASST1/exception-mips1.o
new file mode 100644
index 0000000..6005627
Binary files /dev/null and b/kern/compile/ASST1/exception-mips1.o differ
diff --git a/kern/compile/ASST1/files.mk b/kern/compile/ASST1/files.mk
new file mode 100644
index 0000000..40fd3cf
--- /dev/null
+++ b/kern/compile/ASST1/files.mk
@@ -0,0 +1,125 @@
+# Automatically generated by config; do not edit
+SRCS+=$(TOP)/common/libc/printf/__printf.c
+SRCS+=$(TOP)/common/libc/printf/snprintf.c
+SRCS+=$(TOP)/common/libc/stdlib/atoi.c
+SRCS+=$(TOP)/common/libc/string/bzero.c
+SRCS+=$(TOP)/common/libc/string/memcpy.c
+SRCS+=$(TOP)/common/libc/string/memmove.c
+SRCS+=$(TOP)/common/libc/string/memset.c
+SRCS+=$(TOP)/common/libc/string/strcat.c
+SRCS+=$(TOP)/common/libc/string/strchr.c
+SRCS+=$(TOP)/common/libc/string/strcmp.c
+SRCS+=$(TOP)/common/libc/string/strcpy.c
+SRCS+=$(TOP)/common/libc/string/strlen.c
+SRCS+=$(TOP)/common/libc/string/strrchr.c
+SRCS+=$(TOP)/common/libc/string/strtok_r.c
+SRCS+=$(KTOP)/compile/ASST1/autoconf.c
+SRCS+=$(KTOP)/dev/generic/beep.c
+SRCS+=$(KTOP)/dev/generic/console.c
+SRCS+=$(KTOP)/dev/generic/random.c
+SRCS+=$(KTOP)/dev/generic/rtclock.c
+SRCS+=$(KTOP)/dev/lamebus/beep_ltimer.c
+SRCS+=$(KTOP)/dev/lamebus/con_lser.c
+SRCS+=$(KTOP)/dev/lamebus/emu_att.c
+SRCS+=$(KTOP)/dev/lamebus/emu.c
+SRCS+=$(KTOP)/dev/lamebus/lamebus.c
+SRCS+=$(KTOP)/dev/lamebus/lhd_att.c
+SRCS+=$(KTOP)/dev/lamebus/lhd.c
+SRCS+=$(KTOP)/dev/lamebus/lrandom_att.c
+SRCS+=$(KTOP)/dev/lamebus/lrandom.c
+SRCS+=$(KTOP)/dev/lamebus/lser_att.c
+SRCS+=$(KTOP)/dev/lamebus/lser.c
+SRCS+=$(KTOP)/dev/lamebus/ltimer_att.c
+SRCS+=$(KTOP)/dev/lamebus/ltimer.c
+SRCS+=$(KTOP)/dev/lamebus/ltrace_att.c
+SRCS+=$(KTOP)/dev/lamebus/ltrace.c
+SRCS+=$(KTOP)/dev/lamebus/random_lrandom.c
+SRCS+=$(KTOP)/dev/lamebus/rtclock_ltimer.c
+SRCS+=$(KTOP)/fs/semfs/semfs_fsops.c
+SRCS+=$(KTOP)/fs/semfs/semfs_obj.c
+SRCS+=$(KTOP)/fs/semfs/semfs_vnops.c
+SRCS+=$(KTOP)/fs/sfs/sfs_balloc.c
+SRCS+=$(KTOP)/fs/sfs/sfs_bmap.c
+SRCS+=$(KTOP)/fs/sfs/sfs_dir.c
+SRCS+=$(KTOP)/fs/sfs/sfs_fsops.c
+SRCS+=$(KTOP)/fs/sfs/sfs_inode.c
+SRCS+=$(KTOP)/fs/sfs/sfs_io.c
+SRCS+=$(KTOP)/fs/sfs/sfs_jphys.c
+SRCS+=$(KTOP)/fs/sfs/sfs_vnops.c
+SRCS+=$(KTOP)/lib/array.c
+SRCS+=$(KTOP)/lib/bitmap.c
+SRCS+=$(KTOP)/lib/bswap.c
+SRCS+=$(KTOP)/lib/kgets.c
+SRCS+=$(KTOP)/lib/kprintf.c
+SRCS+=$(KTOP)/lib/misc.c
+SRCS+=$(KTOP)/lib/time.c
+SRCS+=$(KTOP)/lib/uio.c
+SRCS+=$(KTOP)/main/main.c
+SRCS+=$(KTOP)/main/menu.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/locore/trap.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/syscall/syscall.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/cpu.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/switchframe.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/switch.S
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/thread_machdep.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/threadstart.S
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/vm/dumbvm.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/vm/ram.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/adddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/anddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ashldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ashrdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/cmpdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/divdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/iordi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/lshldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/lshrdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/moddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/muldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/negdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/notdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/qdivrem.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/subdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ucmpdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/udivdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/umoddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/xordi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/libc/arch/mips/setjmp.S
+SRCS.MACHINE.mips+=$(KTOP)/vm/copyinout.c
+SRCS+=$(KTOP)/proc/proc.c
+SRCS+=$(KTOP)/synchprobs/airballoon.c
+SRCS+=$(KTOP)/synchprobs/common.c
+SRCS+=$(KTOP)/synchprobs/elves.c
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/locore/cache-mips161.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/locore/exception-mips1.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/vm/tlb-mips161.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/sys161/dev/lamebus_machdep.c
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/sys161/main/start.S
+SRCS+=$(KTOP)/syscall/loadelf.c
+SRCS+=$(KTOP)/syscall/runprogram.c
+SRCS+=$(KTOP)/syscall/time_syscalls.c
+SRCS+=$(KTOP)/test/arraytest.c
+SRCS+=$(KTOP)/test/bitmaptest.c
+SRCS+=$(KTOP)/test/fstest.c
+SRCS+=$(KTOP)/test/kmalloctest.c
+SRCS+=$(KTOP)/test/semunit.c
+SRCS+=$(KTOP)/test/synchtest.c
+SRCS+=$(KTOP)/test/threadlisttest.c
+SRCS+=$(KTOP)/test/threadtest.c
+SRCS+=$(KTOP)/test/tt3.c
+SRCS+=$(KTOP)/thread/clock.c
+SRCS+=$(KTOP)/thread/spinlock.c
+SRCS+=$(KTOP)/thread/spl.c
+SRCS+=$(KTOP)/thread/synch.c
+SRCS+=$(KTOP)/thread/thread.c
+SRCS+=$(KTOP)/thread/threadlist.c
+SRCS+=$(KTOP)/vfs/buf.c
+SRCS+=$(KTOP)/vfs/device.c
+SRCS+=$(KTOP)/vfs/devnull.c
+SRCS+=$(KTOP)/vfs/vfscwd.c
+SRCS+=$(KTOP)/vfs/vfsfail.c
+SRCS+=$(KTOP)/vfs/vfslist.c
+SRCS+=$(KTOP)/vfs/vfslookup.c
+SRCS+=$(KTOP)/vfs/vfspath.c
+SRCS+=$(KTOP)/vfs/vnode.c
+SRCS+=$(KTOP)/vm/kmalloc.c
diff --git a/kern/compile/ASST1/fstest.o b/kern/compile/ASST1/fstest.o
new file mode 100644
index 0000000..27a5700
Binary files /dev/null and b/kern/compile/ASST1/fstest.o differ
diff --git a/kern/compile/ASST1/includelinks/kern/machine b/kern/compile/ASST1/includelinks/kern/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/kern/compile/ASST1/includelinks/kern/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/kern/compile/ASST1/includelinks/kern/mips b/kern/compile/ASST1/includelinks/kern/mips
new file mode 120000
index 0000000..f26786d
--- /dev/null
+++ b/kern/compile/ASST1/includelinks/kern/mips
@@ -0,0 +1 @@
+../../../../arch/mips/include/kern
\ No newline at end of file
diff --git a/kern/compile/ASST1/includelinks/machine b/kern/compile/ASST1/includelinks/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/kern/compile/ASST1/includelinks/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/kern/compile/ASST1/includelinks/mips b/kern/compile/ASST1/includelinks/mips
new file mode 120000
index 0000000..8d2096d
--- /dev/null
+++ b/kern/compile/ASST1/includelinks/mips
@@ -0,0 +1 @@
+../../../arch/mips/include
\ No newline at end of file
diff --git a/kern/compile/ASST1/includelinks/platform b/kern/compile/ASST1/includelinks/platform
new file mode 120000
index 0000000..6aa3aca
--- /dev/null
+++ b/kern/compile/ASST1/includelinks/platform
@@ -0,0 +1 @@
+sys161
\ No newline at end of file
diff --git a/kern/compile/ASST1/includelinks/sys161 b/kern/compile/ASST1/includelinks/sys161
new file mode 120000
index 0000000..620e8fe
--- /dev/null
+++ b/kern/compile/ASST1/includelinks/sys161
@@ -0,0 +1 @@
+../../../arch/sys161/include
\ No newline at end of file
diff --git a/kern/compile/ASST1/iordi3.o b/kern/compile/ASST1/iordi3.o
new file mode 100644
index 0000000..70d38ba
Binary files /dev/null and b/kern/compile/ASST1/iordi3.o differ
diff --git a/kern/compile/ASST1/kernel b/kern/compile/ASST1/kernel
new file mode 100755
index 0000000..94e8180
Binary files /dev/null and b/kern/compile/ASST1/kernel differ
diff --git a/kern/compile/ASST1/kgets.o b/kern/compile/ASST1/kgets.o
new file mode 100644
index 0000000..d0624e1
Binary files /dev/null and b/kern/compile/ASST1/kgets.o differ
diff --git a/kern/compile/ASST1/kmalloc.o b/kern/compile/ASST1/kmalloc.o
new file mode 100644
index 0000000..9cb93b9
Binary files /dev/null and b/kern/compile/ASST1/kmalloc.o differ
diff --git a/kern/compile/ASST1/kmalloctest.o b/kern/compile/ASST1/kmalloctest.o
new file mode 100644
index 0000000..e0a186a
Binary files /dev/null and b/kern/compile/ASST1/kmalloctest.o differ
diff --git a/kern/compile/ASST1/kprintf.o b/kern/compile/ASST1/kprintf.o
new file mode 100644
index 0000000..a2c37ff
Binary files /dev/null and b/kern/compile/ASST1/kprintf.o differ
diff --git a/kern/compile/ASST1/lamebus.o b/kern/compile/ASST1/lamebus.o
new file mode 100644
index 0000000..43af7db
Binary files /dev/null and b/kern/compile/ASST1/lamebus.o differ
diff --git a/kern/compile/ASST1/lamebus_machdep.o b/kern/compile/ASST1/lamebus_machdep.o
new file mode 100644
index 0000000..256858f
Binary files /dev/null and b/kern/compile/ASST1/lamebus_machdep.o differ
diff --git a/kern/compile/ASST1/lhd.o b/kern/compile/ASST1/lhd.o
new file mode 100644
index 0000000..abfcf69
Binary files /dev/null and b/kern/compile/ASST1/lhd.o differ
diff --git a/kern/compile/ASST1/lhd_att.o b/kern/compile/ASST1/lhd_att.o
new file mode 100644
index 0000000..3cf1a29
Binary files /dev/null and b/kern/compile/ASST1/lhd_att.o differ
diff --git a/kern/compile/ASST1/loadelf.o b/kern/compile/ASST1/loadelf.o
new file mode 100644
index 0000000..69676f0
Binary files /dev/null and b/kern/compile/ASST1/loadelf.o differ
diff --git a/kern/compile/ASST1/lrandom.o b/kern/compile/ASST1/lrandom.o
new file mode 100644
index 0000000..76f25b5
Binary files /dev/null and b/kern/compile/ASST1/lrandom.o differ
diff --git a/kern/compile/ASST1/lrandom_att.o b/kern/compile/ASST1/lrandom_att.o
new file mode 100644
index 0000000..df51eec
Binary files /dev/null and b/kern/compile/ASST1/lrandom_att.o differ
diff --git a/kern/compile/ASST1/lser.o b/kern/compile/ASST1/lser.o
new file mode 100644
index 0000000..3a68d6b
Binary files /dev/null and b/kern/compile/ASST1/lser.o differ
diff --git a/kern/compile/ASST1/lser_att.o b/kern/compile/ASST1/lser_att.o
new file mode 100644
index 0000000..103507e
Binary files /dev/null and b/kern/compile/ASST1/lser_att.o differ
diff --git a/kern/compile/ASST1/lshldi3.o b/kern/compile/ASST1/lshldi3.o
new file mode 100644
index 0000000..ee38c75
Binary files /dev/null and b/kern/compile/ASST1/lshldi3.o differ
diff --git a/kern/compile/ASST1/lshrdi3.o b/kern/compile/ASST1/lshrdi3.o
new file mode 100644
index 0000000..ff433a1
Binary files /dev/null and b/kern/compile/ASST1/lshrdi3.o differ
diff --git a/kern/compile/ASST1/ltimer.o b/kern/compile/ASST1/ltimer.o
new file mode 100644
index 0000000..42473b6
Binary files /dev/null and b/kern/compile/ASST1/ltimer.o differ
diff --git a/kern/compile/ASST1/ltimer_att.o b/kern/compile/ASST1/ltimer_att.o
new file mode 100644
index 0000000..b5366d6
Binary files /dev/null and b/kern/compile/ASST1/ltimer_att.o differ
diff --git a/kern/compile/ASST1/ltrace.o b/kern/compile/ASST1/ltrace.o
new file mode 100644
index 0000000..6bc2e48
Binary files /dev/null and b/kern/compile/ASST1/ltrace.o differ
diff --git a/kern/compile/ASST1/ltrace_att.o b/kern/compile/ASST1/ltrace_att.o
new file mode 100644
index 0000000..813f207
Binary files /dev/null and b/kern/compile/ASST1/ltrace_att.o differ
diff --git a/kern/compile/ASST1/main.o b/kern/compile/ASST1/main.o
new file mode 100644
index 0000000..f2487c3
Binary files /dev/null and b/kern/compile/ASST1/main.o differ
diff --git a/kern/compile/ASST1/memcpy.o b/kern/compile/ASST1/memcpy.o
new file mode 100644
index 0000000..f60d7d1
Binary files /dev/null and b/kern/compile/ASST1/memcpy.o differ
diff --git a/kern/compile/ASST1/memmove.o b/kern/compile/ASST1/memmove.o
new file mode 100644
index 0000000..82637a2
Binary files /dev/null and b/kern/compile/ASST1/memmove.o differ
diff --git a/kern/compile/ASST1/memset.o b/kern/compile/ASST1/memset.o
new file mode 100644
index 0000000..28c46e6
Binary files /dev/null and b/kern/compile/ASST1/memset.o differ
diff --git a/kern/compile/ASST1/menu.o b/kern/compile/ASST1/menu.o
new file mode 100644
index 0000000..ece66ae
Binary files /dev/null and b/kern/compile/ASST1/menu.o differ
diff --git a/kern/compile/ASST1/misc.o b/kern/compile/ASST1/misc.o
new file mode 100644
index 0000000..5de2ab7
Binary files /dev/null and b/kern/compile/ASST1/misc.o differ
diff --git a/kern/compile/ASST1/moddi3.o b/kern/compile/ASST1/moddi3.o
new file mode 100644
index 0000000..dfdf6e3
Binary files /dev/null and b/kern/compile/ASST1/moddi3.o differ
diff --git a/kern/compile/ASST1/muldi3.o b/kern/compile/ASST1/muldi3.o
new file mode 100644
index 0000000..e224df5
Binary files /dev/null and b/kern/compile/ASST1/muldi3.o differ
diff --git a/kern/compile/ASST1/negdi2.o b/kern/compile/ASST1/negdi2.o
new file mode 100644
index 0000000..7f31f6a
Binary files /dev/null and b/kern/compile/ASST1/negdi2.o differ
diff --git a/kern/compile/ASST1/notdi2.o b/kern/compile/ASST1/notdi2.o
new file mode 100644
index 0000000..cfd815d
Binary files /dev/null and b/kern/compile/ASST1/notdi2.o differ
diff --git a/kern/compile/ASST1/opt-dumbvm.h b/kern/compile/ASST1/opt-dumbvm.h
new file mode 100644
index 0000000..7db9b01
--- /dev/null
+++ b/kern/compile/ASST1/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 1
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/kern/compile/ASST1/opt-net.h b/kern/compile/ASST1/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/kern/compile/ASST1/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/kern/compile/ASST1/opt-netfs.h b/kern/compile/ASST1/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/kern/compile/ASST1/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/kern/compile/ASST1/opt-noasserts.h b/kern/compile/ASST1/opt-noasserts.h
new file mode 100644
index 0000000..e4cd61c
--- /dev/null
+++ b/kern/compile/ASST1/opt-noasserts.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NOASSERTS_H_
+#define _OPT_NOASSERTS_H_
+#define OPT_NOASSERTS 0
+#endif /* _OPT_NOASSERTS_H_ */
diff --git a/kern/compile/ASST1/opt-semfs.h b/kern/compile/ASST1/opt-semfs.h
new file mode 100644
index 0000000..8b7a4f4
--- /dev/null
+++ b/kern/compile/ASST1/opt-semfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SEMFS_H_
+#define _OPT_SEMFS_H_
+#define OPT_SEMFS 1
+#endif /* _OPT_SEMFS_H_ */
diff --git a/kern/compile/ASST1/opt-sfs.h b/kern/compile/ASST1/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/kern/compile/ASST1/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/kern/compile/ASST1/opt-synchprobs.h b/kern/compile/ASST1/opt-synchprobs.h
new file mode 100644
index 0000000..57b9186
--- /dev/null
+++ b/kern/compile/ASST1/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 1
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/kern/compile/ASST1/proc.o b/kern/compile/ASST1/proc.o
new file mode 100644
index 0000000..e4705a6
Binary files /dev/null and b/kern/compile/ASST1/proc.o differ
diff --git a/kern/compile/ASST1/qdivrem.o b/kern/compile/ASST1/qdivrem.o
new file mode 100644
index 0000000..e5f9b6c
Binary files /dev/null and b/kern/compile/ASST1/qdivrem.o differ
diff --git a/kern/compile/ASST1/ram.o b/kern/compile/ASST1/ram.o
new file mode 100644
index 0000000..6cf983a
Binary files /dev/null and b/kern/compile/ASST1/ram.o differ
diff --git a/kern/compile/ASST1/random.o b/kern/compile/ASST1/random.o
new file mode 100644
index 0000000..fa8feeb
Binary files /dev/null and b/kern/compile/ASST1/random.o differ
diff --git a/kern/compile/ASST1/random_lrandom.o b/kern/compile/ASST1/random_lrandom.o
new file mode 100644
index 0000000..6320784
Binary files /dev/null and b/kern/compile/ASST1/random_lrandom.o differ
diff --git a/kern/compile/ASST1/rtclock.o b/kern/compile/ASST1/rtclock.o
new file mode 100644
index 0000000..b7a9911
Binary files /dev/null and b/kern/compile/ASST1/rtclock.o differ
diff --git a/kern/compile/ASST1/rtclock_ltimer.o b/kern/compile/ASST1/rtclock_ltimer.o
new file mode 100644
index 0000000..41d2653
Binary files /dev/null and b/kern/compile/ASST1/rtclock_ltimer.o differ
diff --git a/kern/compile/ASST1/runprogram.o b/kern/compile/ASST1/runprogram.o
new file mode 100644
index 0000000..673a4cf
Binary files /dev/null and b/kern/compile/ASST1/runprogram.o differ
diff --git a/kern/compile/ASST1/semfs_fsops.o b/kern/compile/ASST1/semfs_fsops.o
new file mode 100644
index 0000000..d316399
Binary files /dev/null and b/kern/compile/ASST1/semfs_fsops.o differ
diff --git a/kern/compile/ASST1/semfs_obj.o b/kern/compile/ASST1/semfs_obj.o
new file mode 100644
index 0000000..b38a374
Binary files /dev/null and b/kern/compile/ASST1/semfs_obj.o differ
diff --git a/kern/compile/ASST1/semfs_vnops.o b/kern/compile/ASST1/semfs_vnops.o
new file mode 100644
index 0000000..d26262f
Binary files /dev/null and b/kern/compile/ASST1/semfs_vnops.o differ
diff --git a/kern/compile/ASST1/semunit.o b/kern/compile/ASST1/semunit.o
new file mode 100644
index 0000000..c311cd6
Binary files /dev/null and b/kern/compile/ASST1/semunit.o differ
diff --git a/kern/compile/ASST1/setjmp.o b/kern/compile/ASST1/setjmp.o
new file mode 100644
index 0000000..6ec472c
Binary files /dev/null and b/kern/compile/ASST1/setjmp.o differ
diff --git a/kern/compile/ASST1/sfs_balloc.o b/kern/compile/ASST1/sfs_balloc.o
new file mode 100644
index 0000000..c1111a6
Binary files /dev/null and b/kern/compile/ASST1/sfs_balloc.o differ
diff --git a/kern/compile/ASST1/sfs_bmap.o b/kern/compile/ASST1/sfs_bmap.o
new file mode 100644
index 0000000..7564040
Binary files /dev/null and b/kern/compile/ASST1/sfs_bmap.o differ
diff --git a/kern/compile/ASST1/sfs_dir.o b/kern/compile/ASST1/sfs_dir.o
new file mode 100644
index 0000000..da459db
Binary files /dev/null and b/kern/compile/ASST1/sfs_dir.o differ
diff --git a/kern/compile/ASST1/sfs_fsops.o b/kern/compile/ASST1/sfs_fsops.o
new file mode 100644
index 0000000..995a002
Binary files /dev/null and b/kern/compile/ASST1/sfs_fsops.o differ
diff --git a/kern/compile/ASST1/sfs_inode.o b/kern/compile/ASST1/sfs_inode.o
new file mode 100644
index 0000000..4e3b866
Binary files /dev/null and b/kern/compile/ASST1/sfs_inode.o differ
diff --git a/kern/compile/ASST1/sfs_io.o b/kern/compile/ASST1/sfs_io.o
new file mode 100644
index 0000000..8ffa343
Binary files /dev/null and b/kern/compile/ASST1/sfs_io.o differ
diff --git a/kern/compile/ASST1/sfs_jphys.o b/kern/compile/ASST1/sfs_jphys.o
new file mode 100644
index 0000000..5696bbc
Binary files /dev/null and b/kern/compile/ASST1/sfs_jphys.o differ
diff --git a/kern/compile/ASST1/sfs_vnops.o b/kern/compile/ASST1/sfs_vnops.o
new file mode 100644
index 0000000..1e28795
Binary files /dev/null and b/kern/compile/ASST1/sfs_vnops.o differ
diff --git a/kern/compile/ASST1/snprintf.o b/kern/compile/ASST1/snprintf.o
new file mode 100644
index 0000000..d58c279
Binary files /dev/null and b/kern/compile/ASST1/snprintf.o differ
diff --git a/kern/compile/ASST1/spinlock.o b/kern/compile/ASST1/spinlock.o
new file mode 100644
index 0000000..f2fff6f
Binary files /dev/null and b/kern/compile/ASST1/spinlock.o differ
diff --git a/kern/compile/ASST1/spl.o b/kern/compile/ASST1/spl.o
new file mode 100644
index 0000000..81a82f6
Binary files /dev/null and b/kern/compile/ASST1/spl.o differ
diff --git a/kern/compile/ASST1/start.o b/kern/compile/ASST1/start.o
new file mode 100644
index 0000000..39879b8
Binary files /dev/null and b/kern/compile/ASST1/start.o differ
diff --git a/kern/compile/ASST1/strcat.o b/kern/compile/ASST1/strcat.o
new file mode 100644
index 0000000..770cc49
Binary files /dev/null and b/kern/compile/ASST1/strcat.o differ
diff --git a/kern/compile/ASST1/strchr.o b/kern/compile/ASST1/strchr.o
new file mode 100644
index 0000000..ff25904
Binary files /dev/null and b/kern/compile/ASST1/strchr.o differ
diff --git a/kern/compile/ASST1/strcmp.o b/kern/compile/ASST1/strcmp.o
new file mode 100644
index 0000000..360040e
Binary files /dev/null and b/kern/compile/ASST1/strcmp.o differ
diff --git a/kern/compile/ASST1/strcpy.o b/kern/compile/ASST1/strcpy.o
new file mode 100644
index 0000000..b188f2d
Binary files /dev/null and b/kern/compile/ASST1/strcpy.o differ
diff --git a/kern/compile/ASST1/strlen.o b/kern/compile/ASST1/strlen.o
new file mode 100644
index 0000000..acc1ecf
Binary files /dev/null and b/kern/compile/ASST1/strlen.o differ
diff --git a/kern/compile/ASST1/strrchr.o b/kern/compile/ASST1/strrchr.o
new file mode 100644
index 0000000..964bee0
Binary files /dev/null and b/kern/compile/ASST1/strrchr.o differ
diff --git a/kern/compile/ASST1/strtok_r.o b/kern/compile/ASST1/strtok_r.o
new file mode 100644
index 0000000..ba4b17f
Binary files /dev/null and b/kern/compile/ASST1/strtok_r.o differ
diff --git a/kern/compile/ASST1/subdi3.o b/kern/compile/ASST1/subdi3.o
new file mode 100644
index 0000000..0e2f8d6
Binary files /dev/null and b/kern/compile/ASST1/subdi3.o differ
diff --git a/kern/compile/ASST1/switch.o b/kern/compile/ASST1/switch.o
new file mode 100644
index 0000000..6b93614
Binary files /dev/null and b/kern/compile/ASST1/switch.o differ
diff --git a/kern/compile/ASST1/switchframe.o b/kern/compile/ASST1/switchframe.o
new file mode 100644
index 0000000..a966352
Binary files /dev/null and b/kern/compile/ASST1/switchframe.o differ
diff --git a/kern/compile/ASST1/synch.o b/kern/compile/ASST1/synch.o
new file mode 100644
index 0000000..cbaf711
Binary files /dev/null and b/kern/compile/ASST1/synch.o differ
diff --git a/kern/compile/ASST1/synchtest.o b/kern/compile/ASST1/synchtest.o
new file mode 100644
index 0000000..ebec595
Binary files /dev/null and b/kern/compile/ASST1/synchtest.o differ
diff --git a/kern/compile/ASST1/syscall.o b/kern/compile/ASST1/syscall.o
new file mode 100644
index 0000000..db66870
Binary files /dev/null and b/kern/compile/ASST1/syscall.o differ
diff --git a/kern/compile/ASST1/thread.o b/kern/compile/ASST1/thread.o
new file mode 100644
index 0000000..0ed8274
Binary files /dev/null and b/kern/compile/ASST1/thread.o differ
diff --git a/kern/compile/ASST1/thread_machdep.o b/kern/compile/ASST1/thread_machdep.o
new file mode 100644
index 0000000..74ff51b
Binary files /dev/null and b/kern/compile/ASST1/thread_machdep.o differ
diff --git a/kern/compile/ASST1/threadlist.o b/kern/compile/ASST1/threadlist.o
new file mode 100644
index 0000000..56b88f3
Binary files /dev/null and b/kern/compile/ASST1/threadlist.o differ
diff --git a/kern/compile/ASST1/threadlisttest.o b/kern/compile/ASST1/threadlisttest.o
new file mode 100644
index 0000000..6312c0c
Binary files /dev/null and b/kern/compile/ASST1/threadlisttest.o differ
diff --git a/kern/compile/ASST1/threadstart.o b/kern/compile/ASST1/threadstart.o
new file mode 100644
index 0000000..2df5f32
Binary files /dev/null and b/kern/compile/ASST1/threadstart.o differ
diff --git a/kern/compile/ASST1/threadtest.o b/kern/compile/ASST1/threadtest.o
new file mode 100644
index 0000000..62b344a
Binary files /dev/null and b/kern/compile/ASST1/threadtest.o differ
diff --git a/kern/compile/ASST1/time.o b/kern/compile/ASST1/time.o
new file mode 100644
index 0000000..fbf8ebb
Binary files /dev/null and b/kern/compile/ASST1/time.o differ
diff --git a/kern/compile/ASST1/time_syscalls.o b/kern/compile/ASST1/time_syscalls.o
new file mode 100644
index 0000000..691c292
Binary files /dev/null and b/kern/compile/ASST1/time_syscalls.o differ
diff --git a/kern/compile/ASST1/tlb-mips161.o b/kern/compile/ASST1/tlb-mips161.o
new file mode 100644
index 0000000..a860dc9
Binary files /dev/null and b/kern/compile/ASST1/tlb-mips161.o differ
diff --git a/kern/compile/ASST1/trap.o b/kern/compile/ASST1/trap.o
new file mode 100644
index 0000000..359a154
Binary files /dev/null and b/kern/compile/ASST1/trap.o differ
diff --git a/kern/compile/ASST1/tt3.o b/kern/compile/ASST1/tt3.o
new file mode 100644
index 0000000..57c5aac
Binary files /dev/null and b/kern/compile/ASST1/tt3.o differ
diff --git a/kern/compile/ASST1/ucmpdi2.o b/kern/compile/ASST1/ucmpdi2.o
new file mode 100644
index 0000000..15831f7
Binary files /dev/null and b/kern/compile/ASST1/ucmpdi2.o differ
diff --git a/kern/compile/ASST1/udivdi3.o b/kern/compile/ASST1/udivdi3.o
new file mode 100644
index 0000000..26d536a
Binary files /dev/null and b/kern/compile/ASST1/udivdi3.o differ
diff --git a/kern/compile/ASST1/uio.o b/kern/compile/ASST1/uio.o
new file mode 100644
index 0000000..202e6e4
Binary files /dev/null and b/kern/compile/ASST1/uio.o differ
diff --git a/kern/compile/ASST1/umoddi3.o b/kern/compile/ASST1/umoddi3.o
new file mode 100644
index 0000000..c42d4fe
Binary files /dev/null and b/kern/compile/ASST1/umoddi3.o differ
diff --git a/kern/compile/ASST1/vers.c b/kern/compile/ASST1/vers.c
new file mode 100644
index 0000000..d1434a8
--- /dev/null
+++ b/kern/compile/ASST1/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 12;
+const char buildconfig[] = "ASST1";
diff --git a/kern/compile/ASST1/vers.o b/kern/compile/ASST1/vers.o
new file mode 100644
index 0000000..416a729
Binary files /dev/null and b/kern/compile/ASST1/vers.o differ
diff --git a/kern/compile/ASST1/version b/kern/compile/ASST1/version
new file mode 100644
index 0000000..48082f7
--- /dev/null
+++ b/kern/compile/ASST1/version
@@ -0,0 +1 @@
+12
diff --git a/kern/compile/ASST1/vfscwd.o b/kern/compile/ASST1/vfscwd.o
new file mode 100644
index 0000000..f927976
Binary files /dev/null and b/kern/compile/ASST1/vfscwd.o differ
diff --git a/kern/compile/ASST1/vfsfail.o b/kern/compile/ASST1/vfsfail.o
new file mode 100644
index 0000000..7742adf
Binary files /dev/null and b/kern/compile/ASST1/vfsfail.o differ
diff --git a/kern/compile/ASST1/vfslist.o b/kern/compile/ASST1/vfslist.o
new file mode 100644
index 0000000..c0e041d
Binary files /dev/null and b/kern/compile/ASST1/vfslist.o differ
diff --git a/kern/compile/ASST1/vfslookup.o b/kern/compile/ASST1/vfslookup.o
new file mode 100644
index 0000000..d3e004d
Binary files /dev/null and b/kern/compile/ASST1/vfslookup.o differ
diff --git a/kern/compile/ASST1/vfspath.o b/kern/compile/ASST1/vfspath.o
new file mode 100644
index 0000000..f0117e1
Binary files /dev/null and b/kern/compile/ASST1/vfspath.o differ
diff --git a/kern/compile/ASST1/vnode.o b/kern/compile/ASST1/vnode.o
new file mode 100644
index 0000000..dca7706
Binary files /dev/null and b/kern/compile/ASST1/vnode.o differ
diff --git a/kern/compile/ASST1/xordi3.o b/kern/compile/ASST1/xordi3.o
new file mode 100644
index 0000000..2d42caf
Binary files /dev/null and b/kern/compile/ASST1/xordi3.o differ
diff --git a/kern/compile/DUMBVM/.depend b/kern/compile/DUMBVM/.depend
new file mode 100644
index 0000000..f97156c
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend
@@ -0,0 +1,874 @@
+__printf.o: ../../../common/libc/printf/__printf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
+snprintf.o: ../../../common/libc/printf/snprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
+atoi.o: ../../../common/libc/stdlib/atoi.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+bzero.o: ../../../common/libc/string/bzero.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+memcpy.o: ../../../common/libc/string/memcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+memmove.o: ../../../common/libc/string/memmove.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+memset.o: ../../../common/libc/string/memset.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strcat.o: ../../../common/libc/string/strcat.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strchr.o: ../../../common/libc/string/strchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strcmp.o: ../../../common/libc/string/strcmp.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strcpy.o: ../../../common/libc/string/strcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strlen.o: ../../../common/libc/string/strlen.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strrchr.o: ../../../common/libc/string/strrchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+strtok_r.o: ../../../common/libc/string/strtok_r.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+autoconf.o: ../../compile/DUMBVM/autoconf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../compile/DUMBVM/autoconf.h
+beep.o: ../../dev/generic/beep.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/beep.h autoconf.h
+console.o: ../../dev/generic/console.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../dev/generic/console.h ../../include/vfs.h ../../include/device.h \
+ autoconf.h
+random.o: ../../dev/generic/random.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/vfs.h ../../include/array.h ../../dev/generic/random.h \
+ ../../include/device.h autoconf.h
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/clock.h ../../include/kern/time.h \
+ ../../dev/generic/rtclock.h autoconf.h
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+ autoconf.h
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h autoconf.h
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/emu.h autoconf.h
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../dev/lamebus/emu.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/emufs.h \
+ ../../include/fs.h ../../include/vnode.h autoconf.h
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../dev/lamebus/lamebus.h
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/array.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lser.h autoconf.h
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../dev/lamebus/lser.h autoconf.h
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h includelinks/platform/bus.h \
+ includelinks/machine/vm.h ../../dev/lamebus/lamebus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/random.h ../../include/device.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/rtclock.h ../../dev/lamebus/ltimer.h autoconf.h
+semfs_fsops.o: ../../fs/semfs/semfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h ../../fs/semfs/semfs.h
+semfs_obj.o: ../../fs/semfs/semfs_obj.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../fs/semfs/semfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h
+semfs_vnops.o: ../../fs/semfs/semfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/vnode.h \
+ ../../fs/semfs/semfs.h ../../include/fs.h
+sfs_balloc.o: ../../fs/sfs/sfs_balloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/buf.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h \
+ ../../include/uio.h ../../include/kern/iovec.h
+sfs_bmap.o: ../../fs/sfs/sfs_bmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
+sfs_dir.o: ../../fs/sfs/sfs_dir.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
+sfs_fsops.o: ../../fs/sfs/sfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h
+sfs_inode.o: ../../fs/sfs/sfs_inode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/device.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
+sfs_jphys.o: ../../fs/sfs/sfs_jphys.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
+sfs_vnops.o: ../../fs/sfs/sfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
+array.o: ../../lib/array.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h
+bitmap.o: ../../lib/bitmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/bitmap.h
+bswap.o: ../../lib/bswap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h
+kgets.o: ../../lib/kgets.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+kprintf.o: ../../lib/kprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/unistd.h \
+ ../../include/stdarg.h ../../include/cdefs.h ../../include/lib.h \
+ opt-noasserts.h ../../include/spl.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../include/mainbus.h ../../include/vfs.h ../../dev/lamebus/ltrace.h
+misc.o: ../../lib/misc.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errmsg.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
+time.o: ../../lib/time.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/clock.h ../../include/kern/time.h
+uio.o: ../../lib/uio.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/copyinout.h
+main.o: ../../main/main.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/wait.h \
+ ../../include/kern/errno.h ../../include/kern/reboot.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/syscall.h \
+ ../../include/test.h ../../include/version.h autoconf.h
+menu.o: ../../main/menu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/reboot.h ../../include/kern/unistd.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/uio.h \
+ ../../include/kern/iovec.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../include/syscall.h ../../include/test.h \
+ opt-synchprobs.h opt-sfs.h opt-net.h
+proc.o: ../../proc/proc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/spl.h ../../include/cdefs.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/addrspace.h ../../include/vm.h includelinks/machine/vm.h \
+ opt-dumbvm.h ../../include/vnode.h
+loadelf.o: ../../syscall/loadelf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vnode.h ../../include/elf.h includelinks/machine/elf.h
+runprogram.o: ../../syscall/runprogram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vfs.h ../../include/syscall.h ../../include/test.h
+time_syscalls.o: ../../syscall/time_syscalls.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/copyinout.h \
+ ../../include/syscall.h ../../include/cdefs.h
+arraytest.o: ../../test/arraytest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/test.h
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/test.h
+fstest.o: ../../test/fstest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/test.h
+kmalloctest.o: ../../test/kmalloctest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vm.h includelinks/machine/vm.h ../../include/test.h \
+ opt-dumbvm.h
+semunit.o: ../../test/semunit.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/synch.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/test.h
+synchtest.o: ../../test/synchtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/clock.h ../../include/kern/time.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h
+threadlisttest.o: ../../test/threadlisttest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/test.h
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
+tt3.o: ../../test/tt3.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
+clock.o: ../../thread/clock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/wchan.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h
+spinlock.o: ../../thread/spinlock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
+spl.o: ../../thread/spl.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h
+synch.o: ../../thread/synch.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h
+thread.o: ../../thread/thread.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/wchan.h \
+ ../../include/thread.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h ../../include/mainbus.h ../../include/vnode.h
+threadlist.o: ../../thread/threadlist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
+buf.o: ../../vfs/buf.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errno.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/buf.h
+device.o: ../../vfs/device.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vnode.h ../../include/device.h
+devnull.o: ../../vfs/devnull.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/array.h ../../include/device.h
+vfscwd.o: ../../vfs/vfscwd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/stat.h ../../include/kern/stat.h \
+ ../../include/kern/stattypes.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/vnode.h
+vfsfail.o: ../../vfs/vfsfail.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/vnode.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h
+vfslist.o: ../../vfs/vfslist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/device.h
+vfslookup.o: ../../vfs/vfslookup.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+ ../../include/vnode.h
+vfspath.o: ../../vfs/vfspath.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vfs.h ../../include/array.h \
+ ../../include/vnode.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h
+vnode.o: ../../vfs/vnode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/vnode.h
+kmalloc.o: ../../vm/kmalloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vm.h includelinks/machine/vm.h
+trap.o: ../../arch/mips/locore/trap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/signal.h \
+ includelinks/kern/machine/signal.h ../../include/kern/signal.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ includelinks/mips/specialreg.h includelinks/mips/trapframe.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/vm.h ../../include/mainbus.h ../../include/syscall.h
+syscall.o: ../../arch/mips/syscall/syscall.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/syscall.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/trapframe.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/syscall.h
+cpu.o: ../../arch/mips/thread/cpu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h includelinks/platform/maxcpus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h
+switchframe.o: ../../arch/mips/thread/switchframe.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../arch/mips/thread/switchframe.h
+switch.o: ../../arch/mips/thread/switch.S \
+ includelinks/kern/mips/regdefs.h
+thread_machdep.o: ../../arch/mips/thread/thread_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/threadprivate.h
+threadstart.o: ../../arch/mips/thread/threadstart.S \
+ includelinks/kern/mips/regdefs.h
+dumbvm.o: ../../arch/mips/vm/dumbvm.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/spl.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ includelinks/mips/tlb.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h
+ram.o: ../../arch/mips/vm/ram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vm.h includelinks/machine/vm.h \
+ ../../include/mainbus.h
+adddi3.o: ../../../common/gcc-millicode/adddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+anddi3.o: ../../../common/gcc-millicode/anddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+ashldi3.o: ../../../common/gcc-millicode/ashldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+ashrdi3.o: ../../../common/gcc-millicode/ashrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+cmpdi2.o: ../../../common/gcc-millicode/cmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+divdi3.o: ../../../common/gcc-millicode/divdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+iordi3.o: ../../../common/gcc-millicode/iordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+lshldi3.o: ../../../common/gcc-millicode/lshldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+lshrdi3.o: ../../../common/gcc-millicode/lshrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+moddi3.o: ../../../common/gcc-millicode/moddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+muldi3.o: ../../../common/gcc-millicode/muldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+negdi2.o: ../../../common/gcc-millicode/negdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+notdi2.o: ../../../common/gcc-millicode/notdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+qdivrem.o: ../../../common/gcc-millicode/qdivrem.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+subdi3.o: ../../../common/gcc-millicode/subdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+ucmpdi2.o: ../../../common/gcc-millicode/ucmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+udivdi3.o: ../../../common/gcc-millicode/udivdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+umoddi3.o: ../../../common/gcc-millicode/umoddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+xordi3.o: ../../../common/gcc-millicode/xordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
+setjmp.o: ../../../common/libc/arch/mips/setjmp.S \
+ includelinks/kern/mips/regdefs.h
+copyinout.o: ../../vm/copyinout.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/copyinout.h
+cache-mips161.o: ../../arch/mips/locore/cache-mips161.S \
+ includelinks/kern/mips/regdefs.h
+exception-mips1.o: ../../arch/mips/locore/exception-mips1.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
+tlb-mips161.o: ../../arch/mips/vm/tlb-mips161.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
+lamebus_machdep.o: ../../arch/sys161/dev/lamebus_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h ../../include/spl.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/mainbus.h includelinks/sys161/bus.h \
+ ../../dev/lamebus/lamebus.h autoconf.h
+start.o: ../../arch/sys161/main/start.S includelinks/kern/mips/regdefs.h \
+ includelinks/mips/specialreg.h
diff --git a/kern/compile/DUMBVM/.depend.__printf.c b/kern/compile/DUMBVM/.depend.__printf.c
new file mode 100644
index 0000000..f105fcf
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.__printf.c
@@ -0,0 +1,4 @@
+__printf.o: ../../../common/libc/printf/__printf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
diff --git a/kern/compile/DUMBVM/.depend.adddi3.c b/kern/compile/DUMBVM/.depend.adddi3.c
new file mode 100644
index 0000000..b26c51a
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.adddi3.c
@@ -0,0 +1,6 @@
+adddi3.o: ../../../common/gcc-millicode/adddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.anddi3.c b/kern/compile/DUMBVM/.depend.anddi3.c
new file mode 100644
index 0000000..5c3af59
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.anddi3.c
@@ -0,0 +1,6 @@
+anddi3.o: ../../../common/gcc-millicode/anddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.array.c b/kern/compile/DUMBVM/.depend.array.c
new file mode 100644
index 0000000..11769df
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.array.c
@@ -0,0 +1,5 @@
+array.o: ../../lib/array.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h
diff --git a/kern/compile/DUMBVM/.depend.arraytest.c b/kern/compile/DUMBVM/.depend.arraytest.c
new file mode 100644
index 0000000..d5f5a99
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.arraytest.c
@@ -0,0 +1,4 @@
+arraytest.o: ../../test/arraytest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.ashldi3.c b/kern/compile/DUMBVM/.depend.ashldi3.c
new file mode 100644
index 0000000..5a9b439
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ashldi3.c
@@ -0,0 +1,6 @@
+ashldi3.o: ../../../common/gcc-millicode/ashldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.ashrdi3.c b/kern/compile/DUMBVM/.depend.ashrdi3.c
new file mode 100644
index 0000000..501df15
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ashrdi3.c
@@ -0,0 +1,6 @@
+ashrdi3.o: ../../../common/gcc-millicode/ashrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.atoi.c b/kern/compile/DUMBVM/.depend.atoi.c
new file mode 100644
index 0000000..b1309d1
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.atoi.c
@@ -0,0 +1,4 @@
+atoi.o: ../../../common/libc/stdlib/atoi.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.autoconf.c b/kern/compile/DUMBVM/.depend.autoconf.c
new file mode 100644
index 0000000..3e97aff
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.autoconf.c
@@ -0,0 +1,4 @@
+autoconf.o: ../../compile/DUMBVM/autoconf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../compile/DUMBVM/autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.beep.c b/kern/compile/DUMBVM/.depend.beep.c
new file mode 100644
index 0000000..2eb1f4f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.beep.c
@@ -0,0 +1,5 @@
+beep.o: ../../dev/generic/beep.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/beep.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.beep_ltimer.c b/kern/compile/DUMBVM/.depend.beep_ltimer.c
new file mode 100644
index 0000000..4997972
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.beep_ltimer.c
@@ -0,0 +1,5 @@
+beep_ltimer.o: ../../dev/lamebus/beep_ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/beep.h ../../dev/lamebus/ltimer.h \
+ autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.bitmap.c b/kern/compile/DUMBVM/.depend.bitmap.c
new file mode 100644
index 0000000..0abdd43
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.bitmap.c
@@ -0,0 +1,5 @@
+bitmap.o: ../../lib/bitmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/bitmap.h
diff --git a/kern/compile/DUMBVM/.depend.bitmaptest.c b/kern/compile/DUMBVM/.depend.bitmaptest.c
new file mode 100644
index 0000000..ac59647
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.bitmaptest.c
@@ -0,0 +1,4 @@
+bitmaptest.o: ../../test/bitmaptest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.bswap.c b/kern/compile/DUMBVM/.depend.bswap.c
new file mode 100644
index 0000000..3e30c8c
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.bswap.c
@@ -0,0 +1,4 @@
+bswap.o: ../../lib/bswap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h
diff --git a/kern/compile/DUMBVM/.depend.buf.c b/kern/compile/DUMBVM/.depend.buf.c
new file mode 100644
index 0000000..765d478
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.buf.c
@@ -0,0 +1,11 @@
+buf.o: ../../vfs/buf.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errno.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/array.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/buf.h
diff --git a/kern/compile/DUMBVM/.depend.bzero.c b/kern/compile/DUMBVM/.depend.bzero.c
new file mode 100644
index 0000000..5b7b54a
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.bzero.c
@@ -0,0 +1,4 @@
+bzero.o: ../../../common/libc/string/bzero.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.cache-mips161.S b/kern/compile/DUMBVM/.depend.cache-mips161.S
new file mode 100644
index 0000000..ab451a9
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.cache-mips161.S
@@ -0,0 +1,2 @@
+cache-mips161.o: ../../arch/mips/locore/cache-mips161.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/DUMBVM/.depend.clock.c b/kern/compile/DUMBVM/.depend.clock.c
new file mode 100644
index 0000000..0b983e9
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.clock.c
@@ -0,0 +1,10 @@
+clock.o: ../../thread/clock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/wchan.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h
diff --git a/kern/compile/DUMBVM/.depend.cmpdi2.c b/kern/compile/DUMBVM/.depend.cmpdi2.c
new file mode 100644
index 0000000..6720414
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.cmpdi2.c
@@ -0,0 +1,6 @@
+cmpdi2.o: ../../../common/gcc-millicode/cmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.con_lser.c b/kern/compile/DUMBVM/.depend.con_lser.c
new file mode 100644
index 0000000..7a5a2db
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.con_lser.c
@@ -0,0 +1,5 @@
+con_lser.o: ../../dev/lamebus/con_lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/generic/console.h ../../dev/lamebus/lser.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.console.c b/kern/compile/DUMBVM/.depend.console.c
new file mode 100644
index 0000000..aae4ea0
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.console.c
@@ -0,0 +1,13 @@
+console.o: ../../dev/generic/console.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../dev/generic/console.h ../../include/vfs.h ../../include/device.h \
+ autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.copyinout.c b/kern/compile/DUMBVM/.depend.copyinout.c
new file mode 100644
index 0000000..3812981
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.copyinout.c
@@ -0,0 +1,10 @@
+copyinout.o: ../../vm/copyinout.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/copyinout.h
diff --git a/kern/compile/DUMBVM/.depend.cpu.c b/kern/compile/DUMBVM/.depend.cpu.c
new file mode 100644
index 0000000..12b41ff
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.cpu.c
@@ -0,0 +1,10 @@
+cpu.o: ../../arch/mips/thread/cpu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h includelinks/platform/maxcpus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h
diff --git a/kern/compile/DUMBVM/.depend.device.c b/kern/compile/DUMBVM/.depend.device.c
new file mode 100644
index 0000000..283f8ae
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.device.c
@@ -0,0 +1,9 @@
+device.o: ../../vfs/device.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vnode.h ../../include/device.h
diff --git a/kern/compile/DUMBVM/.depend.devnull.c b/kern/compile/DUMBVM/.depend.devnull.c
new file mode 100644
index 0000000..b8237d8
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.devnull.c
@@ -0,0 +1,6 @@
+devnull.o: ../../vfs/devnull.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/array.h ../../include/device.h
diff --git a/kern/compile/DUMBVM/.depend.divdi3.c b/kern/compile/DUMBVM/.depend.divdi3.c
new file mode 100644
index 0000000..6a93f7a
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.divdi3.c
@@ -0,0 +1,6 @@
+divdi3.o: ../../../common/gcc-millicode/divdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.dumbvm.c b/kern/compile/DUMBVM/.depend.dumbvm.c
new file mode 100644
index 0000000..01c06ae
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.dumbvm.c
@@ -0,0 +1,12 @@
+dumbvm.o: ../../arch/mips/vm/dumbvm.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/spl.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ includelinks/mips/tlb.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h
diff --git a/kern/compile/DUMBVM/.depend.emu.c b/kern/compile/DUMBVM/.depend.emu.c
new file mode 100644
index 0000000..92de4b8
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.emu.c
@@ -0,0 +1,14 @@
+emu.o: ../../dev/lamebus/emu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../dev/lamebus/emu.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/emufs.h \
+ ../../include/fs.h ../../include/vnode.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.emu_att.c b/kern/compile/DUMBVM/.depend.emu_att.c
new file mode 100644
index 0000000..05e253f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.emu_att.c
@@ -0,0 +1,7 @@
+emu_att.o: ../../dev/lamebus/emu_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/emu.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.exception-mips1.S b/kern/compile/DUMBVM/.depend.exception-mips1.S
new file mode 100644
index 0000000..67ce24f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.exception-mips1.S
@@ -0,0 +1,2 @@
+exception-mips1.o: ../../arch/mips/locore/exception-mips1.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
diff --git a/kern/compile/DUMBVM/.depend.fstest.c b/kern/compile/DUMBVM/.depend.fstest.c
new file mode 100644
index 0000000..5acf37d
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.fstest.c
@@ -0,0 +1,11 @@
+fstest.o: ../../test/fstest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.iordi3.c b/kern/compile/DUMBVM/.depend.iordi3.c
new file mode 100644
index 0000000..b6a3add
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.iordi3.c
@@ -0,0 +1,6 @@
+iordi3.o: ../../../common/gcc-millicode/iordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.kgets.c b/kern/compile/DUMBVM/.depend.kgets.c
new file mode 100644
index 0000000..6f40418
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.kgets.c
@@ -0,0 +1,4 @@
+kgets.o: ../../lib/kgets.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.kmalloc.c b/kern/compile/DUMBVM/.depend.kmalloc.c
new file mode 100644
index 0000000..5c81e8a
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.kmalloc.c
@@ -0,0 +1,5 @@
+kmalloc.o: ../../vm/kmalloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vm.h includelinks/machine/vm.h
diff --git a/kern/compile/DUMBVM/.depend.kmalloctest.c b/kern/compile/DUMBVM/.depend.kmalloctest.c
new file mode 100644
index 0000000..a6c4284
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.kmalloctest.c
@@ -0,0 +1,10 @@
+kmalloctest.o: ../../test/kmalloctest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/vm.h includelinks/machine/vm.h ../../include/test.h \
+ opt-dumbvm.h
diff --git a/kern/compile/DUMBVM/.depend.kprintf.c b/kern/compile/DUMBVM/.depend.kprintf.c
new file mode 100644
index 0000000..08447d3
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.kprintf.c
@@ -0,0 +1,12 @@
+kprintf.o: ../../lib/kprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/unistd.h \
+ ../../include/stdarg.h ../../include/cdefs.h ../../include/lib.h \
+ opt-noasserts.h ../../include/spl.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../include/thread.h ../../include/array.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h \
+ ../../include/mainbus.h ../../include/vfs.h ../../dev/lamebus/ltrace.h
diff --git a/kern/compile/DUMBVM/.depend.lamebus.c b/kern/compile/DUMBVM/.depend.lamebus.c
new file mode 100644
index 0000000..e92be68
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lamebus.c
@@ -0,0 +1,11 @@
+lamebus.o: ../../dev/lamebus/lamebus.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../dev/lamebus/lamebus.h
diff --git a/kern/compile/DUMBVM/.depend.lamebus_machdep.c b/kern/compile/DUMBVM/.depend.lamebus_machdep.c
new file mode 100644
index 0000000..113727d
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lamebus_machdep.c
@@ -0,0 +1,15 @@
+lamebus_machdep.o: ../../arch/sys161/dev/lamebus_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/specialreg.h \
+ includelinks/mips/trapframe.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h ../../include/spl.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/membar.h includelinks/machine/membar.h \
+ ../../include/synch.h ../../include/mainbus.h includelinks/sys161/bus.h \
+ ../../dev/lamebus/lamebus.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.lhd.c b/kern/compile/DUMBVM/.depend.lhd.c
new file mode 100644
index 0000000..5b8e494
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lhd.c
@@ -0,0 +1,11 @@
+lhd.o: ../../dev/lamebus/lhd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../include/vfs.h ../../include/array.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.lhd_att.c b/kern/compile/DUMBVM/.depend.lhd_att.c
new file mode 100644
index 0000000..2f69f50
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lhd_att.c
@@ -0,0 +1,7 @@
+lhd_att.o: ../../dev/lamebus/lhd_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lhd.h ../../include/device.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.loadelf.c b/kern/compile/DUMBVM/.depend.loadelf.c
new file mode 100644
index 0000000..412a9fd
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.loadelf.c
@@ -0,0 +1,12 @@
+loadelf.o: ../../syscall/loadelf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vnode.h ../../include/elf.h includelinks/machine/elf.h
diff --git a/kern/compile/DUMBVM/.depend.lrandom.c b/kern/compile/DUMBVM/.depend.lrandom.c
new file mode 100644
index 0000000..7dccf3f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lrandom.c
@@ -0,0 +1,8 @@
+lrandom.o: ../../dev/lamebus/lrandom.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.lrandom_att.c b/kern/compile/DUMBVM/.depend.lrandom_att.c
new file mode 100644
index 0000000..e4dc766
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lrandom_att.c
@@ -0,0 +1,7 @@
+lrandom_att.o: ../../dev/lamebus/lrandom_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.lser.c b/kern/compile/DUMBVM/.depend.lser.c
new file mode 100644
index 0000000..a2ba69c
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lser.c
@@ -0,0 +1,7 @@
+lser.o: ../../dev/lamebus/lser.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/threadlist.h ../../dev/lamebus/lser.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.lser_att.c b/kern/compile/DUMBVM/.depend.lser_att.c
new file mode 100644
index 0000000..7c095cb
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lser_att.c
@@ -0,0 +1,7 @@
+lser_att.o: ../../dev/lamebus/lser_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lser.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.lshldi3.c b/kern/compile/DUMBVM/.depend.lshldi3.c
new file mode 100644
index 0000000..19fd20f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lshldi3.c
@@ -0,0 +1,6 @@
+lshldi3.o: ../../../common/gcc-millicode/lshldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.lshrdi3.c b/kern/compile/DUMBVM/.depend.lshrdi3.c
new file mode 100644
index 0000000..f867bad
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.lshrdi3.c
@@ -0,0 +1,6 @@
+lshrdi3.o: ../../../common/gcc-millicode/lshrdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.ltimer.c b/kern/compile/DUMBVM/.depend.ltimer.c
new file mode 100644
index 0000000..13379e3
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ltimer.c
@@ -0,0 +1,9 @@
+ltimer.o: ../../dev/lamebus/ltimer.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h includelinks/platform/bus.h \
+ includelinks/machine/vm.h ../../dev/lamebus/lamebus.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.ltimer_att.c b/kern/compile/DUMBVM/.depend.ltimer_att.c
new file mode 100644
index 0000000..c7afbc9
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ltimer_att.c
@@ -0,0 +1,7 @@
+ltimer_att.o: ../../dev/lamebus/ltimer_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltimer.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.ltrace.c b/kern/compile/DUMBVM/.depend.ltrace.c
new file mode 100644
index 0000000..4dacdd3
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ltrace.c
@@ -0,0 +1,7 @@
+ltrace.o: ../../dev/lamebus/ltrace.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/platform/bus.h includelinks/machine/vm.h \
+ ../../dev/lamebus/lamebus.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.ltrace_att.c b/kern/compile/DUMBVM/.depend.ltrace_att.c
new file mode 100644
index 0000000..5fe2f14
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ltrace_att.c
@@ -0,0 +1,7 @@
+ltrace_att.o: ../../dev/lamebus/ltrace_att.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../dev/lamebus/lamebus.h ../../include/cpu.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/vm.h \
+ ../../dev/lamebus/ltrace.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.main.c b/kern/compile/DUMBVM/.depend.main.c
new file mode 100644
index 0000000..cdd6610
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.main.c
@@ -0,0 +1,15 @@
+main.o: ../../main/main.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/wait.h \
+ ../../include/kern/errno.h ../../include/kern/reboot.h \
+ ../../include/kern/unistd.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spl.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/synch.h ../../include/vm.h \
+ includelinks/machine/vm.h ../../include/mainbus.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/syscall.h \
+ ../../include/test.h ../../include/version.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.memcpy.c b/kern/compile/DUMBVM/.depend.memcpy.c
new file mode 100644
index 0000000..0b67cb4
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.memcpy.c
@@ -0,0 +1,4 @@
+memcpy.o: ../../../common/libc/string/memcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.memmove.c b/kern/compile/DUMBVM/.depend.memmove.c
new file mode 100644
index 0000000..4dcbc31
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.memmove.c
@@ -0,0 +1,4 @@
+memmove.o: ../../../common/libc/string/memmove.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.memset.c b/kern/compile/DUMBVM/.depend.memset.c
new file mode 100644
index 0000000..15bb933
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.memset.c
@@ -0,0 +1,4 @@
+memset.o: ../../../common/libc/string/memset.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.menu.c b/kern/compile/DUMBVM/.depend.menu.c
new file mode 100644
index 0000000..0d45641
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.menu.c
@@ -0,0 +1,15 @@
+menu.o: ../../main/menu.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/reboot.h ../../include/kern/unistd.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/uio.h \
+ ../../include/kern/iovec.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../include/syscall.h ../../include/test.h \
+ opt-synchprobs.h opt-sfs.h opt-net.h
diff --git a/kern/compile/DUMBVM/.depend.misc.c b/kern/compile/DUMBVM/.depend.misc.c
new file mode 100644
index 0000000..7aaf652
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.misc.c
@@ -0,0 +1,4 @@
+misc.o: ../../lib/misc.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/kern/errmsg.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.moddi3.c b/kern/compile/DUMBVM/.depend.moddi3.c
new file mode 100644
index 0000000..4a05e30
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.moddi3.c
@@ -0,0 +1,6 @@
+moddi3.o: ../../../common/gcc-millicode/moddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.muldi3.c b/kern/compile/DUMBVM/.depend.muldi3.c
new file mode 100644
index 0000000..d43769e
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.muldi3.c
@@ -0,0 +1,6 @@
+muldi3.o: ../../../common/gcc-millicode/muldi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.negdi2.c b/kern/compile/DUMBVM/.depend.negdi2.c
new file mode 100644
index 0000000..6da3714
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.negdi2.c
@@ -0,0 +1,6 @@
+negdi2.o: ../../../common/gcc-millicode/negdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.notdi2.c b/kern/compile/DUMBVM/.depend.notdi2.c
new file mode 100644
index 0000000..c4f6a31
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.notdi2.c
@@ -0,0 +1,6 @@
+notdi2.o: ../../../common/gcc-millicode/notdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.proc.c b/kern/compile/DUMBVM/.depend.proc.c
new file mode 100644
index 0000000..157e915
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.proc.c
@@ -0,0 +1,11 @@
+proc.o: ../../proc/proc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/spl.h ../../include/cdefs.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/addrspace.h ../../include/vm.h includelinks/machine/vm.h \
+ opt-dumbvm.h ../../include/vnode.h
diff --git a/kern/compile/DUMBVM/.depend.qdivrem.c b/kern/compile/DUMBVM/.depend.qdivrem.c
new file mode 100644
index 0000000..d85cc1b
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.qdivrem.c
@@ -0,0 +1,6 @@
+qdivrem.o: ../../../common/gcc-millicode/qdivrem.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.ram.c b/kern/compile/DUMBVM/.depend.ram.c
new file mode 100644
index 0000000..731b6ed
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ram.c
@@ -0,0 +1,5 @@
+ram.o: ../../arch/mips/vm/ram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vm.h includelinks/machine/vm.h \
+ ../../include/mainbus.h
diff --git a/kern/compile/DUMBVM/.depend.random.c b/kern/compile/DUMBVM/.depend.random.c
new file mode 100644
index 0000000..639be22
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.random.c
@@ -0,0 +1,7 @@
+random.o: ../../dev/generic/random.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/vfs.h ../../include/array.h ../../dev/generic/random.h \
+ ../../include/device.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.random_lrandom.c b/kern/compile/DUMBVM/.depend.random_lrandom.c
new file mode 100644
index 0000000..b48dd42
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.random_lrandom.c
@@ -0,0 +1,6 @@
+random_lrandom.o: ../../dev/lamebus/random_lrandom.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/random.h ../../include/device.h \
+ ../../dev/lamebus/lrandom.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.rtclock.c b/kern/compile/DUMBVM/.depend.rtclock.c
new file mode 100644
index 0000000..f3c4158
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.rtclock.c
@@ -0,0 +1,6 @@
+rtclock.o: ../../dev/generic/rtclock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/clock.h ../../include/kern/time.h \
+ ../../dev/generic/rtclock.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.rtclock_ltimer.c b/kern/compile/DUMBVM/.depend.rtclock_ltimer.c
new file mode 100644
index 0000000..a9492fc
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.rtclock_ltimer.c
@@ -0,0 +1,5 @@
+rtclock_ltimer.o: ../../dev/lamebus/rtclock_ltimer.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../dev/generic/rtclock.h ../../dev/lamebus/ltimer.h autoconf.h
diff --git a/kern/compile/DUMBVM/.depend.runprogram.c b/kern/compile/DUMBVM/.depend.runprogram.c
new file mode 100644
index 0000000..a68f9db
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.runprogram.c
@@ -0,0 +1,12 @@
+runprogram.o: ../../syscall/runprogram.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/addrspace.h \
+ ../../include/vm.h includelinks/machine/vm.h opt-dumbvm.h \
+ ../../include/vfs.h ../../include/syscall.h ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.semfs_fsops.c b/kern/compile/DUMBVM/.depend.semfs_fsops.c
new file mode 100644
index 0000000..5c8d1ea
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.semfs_fsops.c
@@ -0,0 +1,7 @@
+semfs_fsops.o: ../../fs/semfs/semfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h ../../fs/semfs/semfs.h
diff --git a/kern/compile/DUMBVM/.depend.semfs_obj.c b/kern/compile/DUMBVM/.depend.semfs_obj.c
new file mode 100644
index 0000000..a4a6edf
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.semfs_obj.c
@@ -0,0 +1,7 @@
+semfs_obj.o: ../../fs/semfs/semfs_obj.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/synch.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../fs/semfs/semfs.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/fs.h ../../include/vnode.h
diff --git a/kern/compile/DUMBVM/.depend.semfs_vnops.c b/kern/compile/DUMBVM/.depend.semfs_vnops.c
new file mode 100644
index 0000000..d94990e
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.semfs_vnops.c
@@ -0,0 +1,14 @@
+semfs_vnops.o: ../../fs/semfs/semfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/lib.h opt-noasserts.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/proc.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/vnode.h \
+ ../../fs/semfs/semfs.h ../../include/fs.h
diff --git a/kern/compile/DUMBVM/.depend.semunit.c b/kern/compile/DUMBVM/.depend.semunit.c
new file mode 100644
index 0000000..91ca484
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.semunit.c
@@ -0,0 +1,9 @@
+semunit.o: ../../test/semunit.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/synch.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/clock.h ../../include/kern/time.h ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.setjmp.S b/kern/compile/DUMBVM/.depend.setjmp.S
new file mode 100644
index 0000000..d60c02b
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.setjmp.S
@@ -0,0 +1,2 @@
+setjmp.o: ../../../common/libc/arch/mips/setjmp.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_balloc.c b/kern/compile/DUMBVM/.depend.sfs_balloc.c
new file mode 100644
index 0000000..be9bb84
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_balloc.c
@@ -0,0 +1,8 @@
+sfs_balloc.o: ../../fs/sfs/sfs_balloc.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/buf.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h \
+ ../../include/uio.h ../../include/kern/iovec.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_bmap.c b/kern/compile/DUMBVM/.depend.sfs_bmap.c
new file mode 100644
index 0000000..876c342
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_bmap.c
@@ -0,0 +1,9 @@
+sfs_bmap.o: ../../fs/sfs/sfs_bmap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_dir.c b/kern/compile/DUMBVM/.depend.sfs_dir.c
new file mode 100644
index 0000000..ad4b515
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_dir.c
@@ -0,0 +1,8 @@
+sfs_dir.o: ../../fs/sfs/sfs_dir.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/buf.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h ../../include/uio.h ../../include/kern/iovec.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_fsops.c b/kern/compile/DUMBVM/.depend.sfs_fsops.c
new file mode 100644
index 0000000..20f9808
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_fsops.c
@@ -0,0 +1,10 @@
+sfs_fsops.o: ../../fs/sfs/sfs_fsops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/bitmap.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/vfs.h \
+ ../../include/buf.h ../../include/device.h ../../include/sfs.h \
+ ../../include/fs.h ../../include/vnode.h ../../include/kern/sfs.h \
+ ../../fs/sfs/sfsprivate.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_inode.c b/kern/compile/DUMBVM/.depend.sfs_inode.c
new file mode 100644
index 0000000..d6b46e9
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_inode.c
@@ -0,0 +1,13 @@
+sfs_inode.o: ../../fs/sfs/sfs_inode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/vfs.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_io.c b/kern/compile/DUMBVM/.depend.sfs_io.c
new file mode 100644
index 0000000..68998d4
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_io.c
@@ -0,0 +1,9 @@
+sfs_io.o: ../../fs/sfs/sfs_io.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/device.h ../../include/sfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_jphys.c b/kern/compile/DUMBVM/.depend.sfs_jphys.c
new file mode 100644
index 0000000..1e341ae
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_jphys.c
@@ -0,0 +1,13 @@
+sfs_jphys.o: ../../fs/sfs/sfs_jphys.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h ../../include/uio.h \
+ ../../include/kern/iovec.h
diff --git a/kern/compile/DUMBVM/.depend.sfs_vnops.c b/kern/compile/DUMBVM/.depend.sfs_vnops.c
new file mode 100644
index 0000000..6125822
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.sfs_vnops.c
@@ -0,0 +1,12 @@
+sfs_vnops.o: ../../fs/sfs/sfs_vnops.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/stat.h \
+ ../../include/kern/stat.h ../../include/kern/stattypes.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/buf.h \
+ ../../include/sfs.h ../../include/fs.h ../../include/vnode.h \
+ ../../include/kern/sfs.h ../../fs/sfs/sfsprivate.h
diff --git a/kern/compile/DUMBVM/.depend.snprintf.c b/kern/compile/DUMBVM/.depend.snprintf.c
new file mode 100644
index 0000000..711ba8f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.snprintf.c
@@ -0,0 +1,4 @@
+snprintf.o: ../../../common/libc/printf/snprintf.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/stdarg.h
diff --git a/kern/compile/DUMBVM/.depend.spinlock.c b/kern/compile/DUMBVM/.depend.spinlock.c
new file mode 100644
index 0000000..28a7be1
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.spinlock.c
@@ -0,0 +1,10 @@
+spinlock.o: ../../thread/spinlock.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/membar.h \
+ includelinks/machine/membar.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
diff --git a/kern/compile/DUMBVM/.depend.spl.c b/kern/compile/DUMBVM/.depend.spl.c
new file mode 100644
index 0000000..49c9fac
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.spl.c
@@ -0,0 +1,9 @@
+spl.o: ../../thread/spl.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h
diff --git a/kern/compile/DUMBVM/.depend.start.S b/kern/compile/DUMBVM/.depend.start.S
new file mode 100644
index 0000000..ecb1ac8
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.start.S
@@ -0,0 +1,2 @@
+start.o: ../../arch/sys161/main/start.S includelinks/kern/mips/regdefs.h \
+ includelinks/mips/specialreg.h
diff --git a/kern/compile/DUMBVM/.depend.strcat.c b/kern/compile/DUMBVM/.depend.strcat.c
new file mode 100644
index 0000000..26e2998
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strcat.c
@@ -0,0 +1,4 @@
+strcat.o: ../../../common/libc/string/strcat.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.strchr.c b/kern/compile/DUMBVM/.depend.strchr.c
new file mode 100644
index 0000000..e225d98
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strchr.c
@@ -0,0 +1,4 @@
+strchr.o: ../../../common/libc/string/strchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.strcmp.c b/kern/compile/DUMBVM/.depend.strcmp.c
new file mode 100644
index 0000000..7022ede
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strcmp.c
@@ -0,0 +1,4 @@
+strcmp.o: ../../../common/libc/string/strcmp.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.strcpy.c b/kern/compile/DUMBVM/.depend.strcpy.c
new file mode 100644
index 0000000..a999341
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strcpy.c
@@ -0,0 +1,4 @@
+strcpy.o: ../../../common/libc/string/strcpy.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.strlen.c b/kern/compile/DUMBVM/.depend.strlen.c
new file mode 100644
index 0000000..4eba669
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strlen.c
@@ -0,0 +1,4 @@
+strlen.o: ../../../common/libc/string/strlen.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.strrchr.c b/kern/compile/DUMBVM/.depend.strrchr.c
new file mode 100644
index 0000000..2f185f3
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strrchr.c
@@ -0,0 +1,4 @@
+strrchr.o: ../../../common/libc/string/strrchr.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.strtok_r.c b/kern/compile/DUMBVM/.depend.strtok_r.c
new file mode 100644
index 0000000..8abfe38
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.strtok_r.c
@@ -0,0 +1,4 @@
+strtok_r.o: ../../../common/libc/string/strtok_r.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h
diff --git a/kern/compile/DUMBVM/.depend.subdi3.c b/kern/compile/DUMBVM/.depend.subdi3.c
new file mode 100644
index 0000000..b9ebb1b
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.subdi3.c
@@ -0,0 +1,6 @@
+subdi3.o: ../../../common/gcc-millicode/subdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.switch.S b/kern/compile/DUMBVM/.depend.switch.S
new file mode 100644
index 0000000..479088e
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.switch.S
@@ -0,0 +1,2 @@
+switch.o: ../../arch/mips/thread/switch.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/DUMBVM/.depend.switchframe.c b/kern/compile/DUMBVM/.depend.switchframe.c
new file mode 100644
index 0000000..4d3fa88
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.switchframe.c
@@ -0,0 +1,8 @@
+switchframe.o: ../../arch/mips/thread/switchframe.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../arch/mips/thread/switchframe.h
diff --git a/kern/compile/DUMBVM/.depend.synch.c b/kern/compile/DUMBVM/.depend.synch.c
new file mode 100644
index 0000000..5ecbb85
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.synch.c
@@ -0,0 +1,9 @@
+synch.o: ../../thread/synch.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h
diff --git a/kern/compile/DUMBVM/.depend.synchtest.c b/kern/compile/DUMBVM/.depend.synchtest.c
new file mode 100644
index 0000000..a0b8c98
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.synchtest.c
@@ -0,0 +1,9 @@
+synchtest.o: ../../test/synchtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/clock.h ../../include/kern/time.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/synch.h \
+ ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.syscall.c b/kern/compile/DUMBVM/.depend.syscall.c
new file mode 100644
index 0000000..03853f8
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.syscall.c
@@ -0,0 +1,10 @@
+syscall.o: ../../arch/mips/syscall/syscall.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/syscall.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h includelinks/mips/trapframe.h ../../include/thread.h \
+ ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/syscall.h
diff --git a/kern/compile/DUMBVM/.depend.thread.c b/kern/compile/DUMBVM/.depend.thread.c
new file mode 100644
index 0000000..bec7aa8
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.thread.c
@@ -0,0 +1,13 @@
+thread.o: ../../thread/thread.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/wchan.h \
+ ../../include/thread.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/threadprivate.h ../../include/proc.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/synch.h ../../include/addrspace.h ../../include/vm.h \
+ opt-dumbvm.h ../../include/mainbus.h ../../include/vnode.h
diff --git a/kern/compile/DUMBVM/.depend.thread_machdep.c b/kern/compile/DUMBVM/.depend.thread_machdep.c
new file mode 100644
index 0000000..595bfbc
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.thread_machdep.c
@@ -0,0 +1,8 @@
+thread_machdep.o: ../../arch/mips/thread/thread_machdep.c \
+ ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/thread.h ../../include/array.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/threadprivate.h
diff --git a/kern/compile/DUMBVM/.depend.threadlist.c b/kern/compile/DUMBVM/.depend.threadlist.c
new file mode 100644
index 0000000..f1e1e53
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.threadlist.c
@@ -0,0 +1,7 @@
+threadlist.o: ../../thread/threadlist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h
diff --git a/kern/compile/DUMBVM/.depend.threadlisttest.c b/kern/compile/DUMBVM/.depend.threadlisttest.c
new file mode 100644
index 0000000..7dc2f9a
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.threadlisttest.c
@@ -0,0 +1,8 @@
+threadlisttest.o: ../../test/threadlisttest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.threadstart.S b/kern/compile/DUMBVM/.depend.threadstart.S
new file mode 100644
index 0000000..9476eab
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.threadstart.S
@@ -0,0 +1,2 @@
+threadstart.o: ../../arch/mips/thread/threadstart.S \
+ includelinks/kern/mips/regdefs.h
diff --git a/kern/compile/DUMBVM/.depend.threadtest.c b/kern/compile/DUMBVM/.depend.threadtest.c
new file mode 100644
index 0000000..2867171
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.threadtest.c
@@ -0,0 +1,8 @@
+threadtest.o: ../../test/threadtest.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.time.c b/kern/compile/DUMBVM/.depend.time.c
new file mode 100644
index 0000000..f453151
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.time.c
@@ -0,0 +1,3 @@
+time.o: ../../lib/time.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/clock.h ../../include/kern/time.h
diff --git a/kern/compile/DUMBVM/.depend.time_syscalls.c b/kern/compile/DUMBVM/.depend.time_syscalls.c
new file mode 100644
index 0000000..ad82140
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.time_syscalls.c
@@ -0,0 +1,5 @@
+time_syscalls.o: ../../syscall/time_syscalls.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/clock.h \
+ ../../include/kern/time.h ../../include/copyinout.h \
+ ../../include/syscall.h ../../include/cdefs.h
diff --git a/kern/compile/DUMBVM/.depend.tlb-mips161.S b/kern/compile/DUMBVM/.depend.tlb-mips161.S
new file mode 100644
index 0000000..4d4e680
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.tlb-mips161.S
@@ -0,0 +1,2 @@
+tlb-mips161.o: ../../arch/mips/vm/tlb-mips161.S \
+ includelinks/kern/mips/regdefs.h includelinks/mips/specialreg.h
diff --git a/kern/compile/DUMBVM/.depend.trap.c b/kern/compile/DUMBVM/.depend.trap.c
new file mode 100644
index 0000000..e854472
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.trap.c
@@ -0,0 +1,13 @@
+trap.o: ../../arch/mips/locore/trap.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/signal.h \
+ includelinks/kern/machine/signal.h ../../include/kern/signal.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ includelinks/mips/specialreg.h includelinks/mips/trapframe.h \
+ ../../include/cpu.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/threadlist.h \
+ includelinks/machine/vm.h ../../include/spl.h ../../include/thread.h \
+ ../../include/array.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/vm.h ../../include/mainbus.h ../../include/syscall.h
diff --git a/kern/compile/DUMBVM/.depend.tt3.c b/kern/compile/DUMBVM/.depend.tt3.c
new file mode 100644
index 0000000..4040d9b
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.tt3.c
@@ -0,0 +1,8 @@
+tt3.o: ../../test/tt3.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/wchan.h ../../include/thread.h ../../include/array.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/threadlist.h includelinks/machine/thread.h \
+ ../../include/setjmp.h includelinks/kern/machine/setjmp.h \
+ ../../include/synch.h ../../include/test.h
diff --git a/kern/compile/DUMBVM/.depend.ucmpdi2.c b/kern/compile/DUMBVM/.depend.ucmpdi2.c
new file mode 100644
index 0000000..d3b1030
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.ucmpdi2.c
@@ -0,0 +1,6 @@
+ucmpdi2.o: ../../../common/gcc-millicode/ucmpdi2.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.udivdi3.c b/kern/compile/DUMBVM/.depend.udivdi3.c
new file mode 100644
index 0000000..a45ad9f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.udivdi3.c
@@ -0,0 +1,6 @@
+udivdi3.o: ../../../common/gcc-millicode/udivdi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.uio.c b/kern/compile/DUMBVM/.depend.uio.c
new file mode 100644
index 0000000..56932e2
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.uio.c
@@ -0,0 +1,9 @@
+uio.o: ../../lib/uio.c ../../include/types.h ../../include/kern/types.h \
+ includelinks/kern/machine/types.h includelinks/machine/types.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/uio.h ../../include/kern/iovec.h ../../include/proc.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/current.h includelinks/machine/current.h \
+ ../../include/thread.h ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/copyinout.h
diff --git a/kern/compile/DUMBVM/.depend.umoddi3.c b/kern/compile/DUMBVM/.depend.umoddi3.c
new file mode 100644
index 0000000..785c65d
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.umoddi3.c
@@ -0,0 +1,6 @@
+umoddi3.o: ../../../common/gcc-millicode/umoddi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/.depend.vfscwd.c b/kern/compile/DUMBVM/.depend.vfscwd.c
new file mode 100644
index 0000000..4f572eb
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.vfscwd.c
@@ -0,0 +1,13 @@
+vfscwd.o: ../../vfs/vfscwd.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/stat.h ../../include/kern/stat.h \
+ ../../include/kern/stattypes.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/uio.h ../../include/kern/iovec.h \
+ ../../include/proc.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/current.h \
+ includelinks/machine/current.h ../../include/thread.h \
+ ../../include/array.h ../../include/threadlist.h \
+ includelinks/machine/thread.h ../../include/setjmp.h \
+ includelinks/kern/machine/setjmp.h ../../include/vfs.h \
+ ../../include/fs.h ../../include/vnode.h
diff --git a/kern/compile/DUMBVM/.depend.vfsfail.c b/kern/compile/DUMBVM/.depend.vfsfail.c
new file mode 100644
index 0000000..fb59aa7
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.vfsfail.c
@@ -0,0 +1,5 @@
+vfsfail.o: ../../vfs/vfsfail.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/vnode.h ../../include/spinlock.h ../../include/cdefs.h \
+ includelinks/machine/spinlock.h
diff --git a/kern/compile/DUMBVM/.depend.vfslist.c b/kern/compile/DUMBVM/.depend.vfslist.c
new file mode 100644
index 0000000..7ddcc06
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.vfslist.c
@@ -0,0 +1,7 @@
+vfslist.o: ../../vfs/vfslist.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/array.h ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h ../../include/fs.h \
+ ../../include/vnode.h ../../include/device.h
diff --git a/kern/compile/DUMBVM/.depend.vfslookup.c b/kern/compile/DUMBVM/.depend.vfslookup.c
new file mode 100644
index 0000000..fe59e8f
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.vfslookup.c
@@ -0,0 +1,8 @@
+vfslookup.o: ../../vfs/vfslookup.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/limits.h ../../include/kern/limits.h ../../include/lib.h \
+ ../../include/cdefs.h opt-noasserts.h ../../include/synch.h \
+ ../../include/spinlock.h includelinks/machine/spinlock.h \
+ ../../include/vfs.h ../../include/array.h ../../include/fs.h \
+ ../../include/vnode.h
diff --git a/kern/compile/DUMBVM/.depend.vfspath.c b/kern/compile/DUMBVM/.depend.vfspath.c
new file mode 100644
index 0000000..1a7ced0
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.vfspath.c
@@ -0,0 +1,8 @@
+vfspath.o: ../../vfs/vfspath.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/kern/fcntl.h ../../include/limits.h \
+ ../../include/kern/limits.h ../../include/lib.h ../../include/cdefs.h \
+ opt-noasserts.h ../../include/vfs.h ../../include/array.h \
+ ../../include/vnode.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h
diff --git a/kern/compile/DUMBVM/.depend.vnode.c b/kern/compile/DUMBVM/.depend.vnode.c
new file mode 100644
index 0000000..53c558c
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.vnode.c
@@ -0,0 +1,7 @@
+vnode.o: ../../vfs/vnode.c ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/kern/errno.h \
+ ../../include/lib.h ../../include/cdefs.h opt-noasserts.h \
+ ../../include/synch.h ../../include/spinlock.h \
+ includelinks/machine/spinlock.h ../../include/vfs.h \
+ ../../include/array.h ../../include/vnode.h
diff --git a/kern/compile/DUMBVM/.depend.xordi3.c b/kern/compile/DUMBVM/.depend.xordi3.c
new file mode 100644
index 0000000..c973bcd
--- /dev/null
+++ b/kern/compile/DUMBVM/.depend.xordi3.c
@@ -0,0 +1,6 @@
+xordi3.o: ../../../common/gcc-millicode/xordi3.c \
+ ../../../common/gcc-millicode/longlong.h ../../include/types.h \
+ ../../include/kern/types.h includelinks/kern/machine/types.h \
+ includelinks/machine/types.h ../../include/endian.h \
+ ../../include/kern/endian.h includelinks/kern/machine/endian.h \
+ ../../include/limits.h ../../include/kern/limits.h
diff --git a/kern/compile/DUMBVM/Makefile b/kern/compile/DUMBVM/Makefile
new file mode 100644
index 0000000..1978e0a
--- /dev/null
+++ b/kern/compile/DUMBVM/Makefile
@@ -0,0 +1,15 @@
+# Automatically generated by config; do not edit.
+#
+
+# Top of the kernel tree
+KTOP=../..
+# Top of the whole tree
+TOP=$(KTOP)/..
+# Debug vs. optimize
+KDEBUG=-g
+# Name of the kernel config file
+CONFNAME=DUMBVM
+
+.include "$(TOP)/mk/os161.config.mk"
+.include "files.mk"
+.include "$(TOP)/mk/os161.kernel.mk"
diff --git a/kern/compile/DUMBVM/__printf.o b/kern/compile/DUMBVM/__printf.o
new file mode 100644
index 0000000..5a3764d
Binary files /dev/null and b/kern/compile/DUMBVM/__printf.o differ
diff --git a/kern/compile/DUMBVM/adddi3.o b/kern/compile/DUMBVM/adddi3.o
new file mode 100644
index 0000000..2bf1bb8
Binary files /dev/null and b/kern/compile/DUMBVM/adddi3.o differ
diff --git a/kern/compile/DUMBVM/anddi3.o b/kern/compile/DUMBVM/anddi3.o
new file mode 100644
index 0000000..74b44e5
Binary files /dev/null and b/kern/compile/DUMBVM/anddi3.o differ
diff --git a/kern/compile/DUMBVM/array.o b/kern/compile/DUMBVM/array.o
new file mode 100644
index 0000000..ef0fd11
Binary files /dev/null and b/kern/compile/DUMBVM/array.o differ
diff --git a/kern/compile/DUMBVM/arraytest.o b/kern/compile/DUMBVM/arraytest.o
new file mode 100644
index 0000000..85299cc
Binary files /dev/null and b/kern/compile/DUMBVM/arraytest.o differ
diff --git a/kern/compile/DUMBVM/ashldi3.o b/kern/compile/DUMBVM/ashldi3.o
new file mode 100644
index 0000000..d038f14
Binary files /dev/null and b/kern/compile/DUMBVM/ashldi3.o differ
diff --git a/kern/compile/DUMBVM/ashrdi3.o b/kern/compile/DUMBVM/ashrdi3.o
new file mode 100644
index 0000000..394774a
Binary files /dev/null and b/kern/compile/DUMBVM/ashrdi3.o differ
diff --git a/kern/compile/DUMBVM/atoi.o b/kern/compile/DUMBVM/atoi.o
new file mode 100644
index 0000000..c40b2e3
Binary files /dev/null and b/kern/compile/DUMBVM/atoi.o differ
diff --git a/kern/compile/DUMBVM/autoconf.c b/kern/compile/DUMBVM/autoconf.c
new file mode 100644
index 0000000..117c315
--- /dev/null
+++ b/kern/compile/DUMBVM/autoconf.c
@@ -0,0 +1,410 @@
+/* Automatically generated; do not edit */
+#include <types.h>
+#include <lib.h>
+#include "autoconf.h"
+
+static void autoconf_beep(struct beep_softc *, int);
+static void autoconf_con(struct con_softc *, int);
+static void autoconf_emu(struct emu_softc *, int);
+static void autoconf_lhd(struct lhd_softc *, int);
+static void autoconf_lrandom(struct lrandom_softc *, int);
+static void autoconf_lser(struct lser_softc *, int);
+static void autoconf_ltimer(struct ltimer_softc *, int);
+static void autoconf_ltrace(struct ltrace_softc *, int);
+static void autoconf_random(struct random_softc *, int);
+static void autoconf_rtclock(struct rtclock_softc *, int);
+static int nextunit_beep;
+static int nextunit_con;
+static int nextunit_emu;
+static int nextunit_lhd;
+static int nextunit_lrandom;
+static int nextunit_lser;
+static int nextunit_ltimer;
+static int nextunit_ltrace;
+static int nextunit_random;
+static int nextunit_rtclock;
+
+static
+int
+tryattach_emu_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct emu_softc *dev;
+	int result;
+
+	dev = attach_emu_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("emu%d at lamebus%d", devunit, busunit);
+	result = config_emu(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_emu = devunit+1;
+	autoconf_emu(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltrace_softc *dev;
+	int result;
+
+	dev = attach_ltrace_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltrace%d at lamebus%d", devunit, busunit);
+	result = config_ltrace(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltrace = devunit+1;
+	autoconf_ltrace(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct ltimer_softc *dev;
+	int result;
+
+	dev = attach_ltimer_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("ltimer%d at lamebus%d", devunit, busunit);
+	result = config_ltimer(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_ltimer = devunit+1;
+	autoconf_ltimer(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lrandom_softc *dev;
+	int result;
+
+	dev = attach_lrandom_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lrandom%d at lamebus%d", devunit, busunit);
+	result = config_lrandom(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lrandom = devunit+1;
+	autoconf_lrandom(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lhd_softc *dev;
+	int result;
+
+	dev = attach_lhd_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lhd%d at lamebus%d", devunit, busunit);
+	result = config_lhd(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lhd = devunit+1;
+	autoconf_lhd(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_lser_to_lamebus(int devunit, struct lamebus_softc *bus, int busunit)
+{
+	struct lser_softc *dev;
+	int result;
+
+	dev = attach_lser_to_lamebus(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("lser%d at lamebus%d", devunit, busunit);
+	result = config_lser(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_lser = devunit+1;
+	autoconf_lser(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_beep_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct beep_softc *dev;
+	int result;
+
+	dev = attach_beep_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("beep%d at ltimer%d", devunit, busunit);
+	result = config_beep(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_beep = devunit+1;
+	autoconf_beep(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_con_to_lser(int devunit, struct lser_softc *bus, int busunit)
+{
+	struct con_softc *dev;
+	int result;
+
+	dev = attach_con_to_lser(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("con%d at lser%d", devunit, busunit);
+	result = config_con(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_con = devunit+1;
+	autoconf_con(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus, int busunit)
+{
+	struct rtclock_softc *dev;
+	int result;
+
+	dev = attach_rtclock_to_ltimer(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("rtclock%d at ltimer%d", devunit, busunit);
+	result = config_rtclock(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_rtclock = devunit+1;
+	autoconf_rtclock(dev, devunit);
+	return 0;
+}
+
+static
+int
+tryattach_random_to_lrandom(int devunit, struct lrandom_softc *bus, int busunit)
+{
+	struct random_softc *dev;
+	int result;
+
+	dev = attach_random_to_lrandom(devunit, bus);
+	if (dev==NULL) {
+		return -1;
+	}
+	kprintf("random%d at lrandom%d", devunit, busunit);
+	result = config_random(dev, devunit);
+	if (result != 0) {
+		kprintf(": %s\n", strerror(result));
+		/* should really clean up dev */
+		return result;
+	}
+	kprintf("\n");
+	nextunit_random = devunit+1;
+	autoconf_random(dev, devunit);
+	return 0;
+}
+
+
+static
+void
+autoconf_rtclock(struct rtclock_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lrandom(struct lrandom_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_random <= 0) {
+			tryattach_random_to_lrandom(0, bus, busunit);
+		}
+	}
+}
+
+void
+autoconf_lamebus(struct lamebus_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		int result, devunit=nextunit_emu;
+		do {
+			result = tryattach_emu_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltrace;
+		do {
+			result = tryattach_ltrace_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_ltimer;
+		do {
+			result = tryattach_ltimer_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lrandom;
+		do {
+			result = tryattach_lrandom_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lhd;
+		do {
+			result = tryattach_lhd_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+	{
+		int result, devunit=nextunit_lser;
+		do {
+			result = tryattach_lser_to_lamebus(devunit, bus, busunit);
+			devunit++;
+		} while (result==0);
+	}
+}
+
+static
+void
+autoconf_lser(struct lser_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_con <= 0) {
+			tryattach_con_to_lser(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_beep(struct beep_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_con(struct con_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltimer(struct ltimer_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+	{
+		if (nextunit_beep <= 0) {
+			tryattach_beep_to_ltimer(0, bus, busunit);
+		}
+	}
+	{
+		if (nextunit_rtclock <= 0) {
+			tryattach_rtclock_to_ltimer(0, bus, busunit);
+		}
+	}
+}
+
+static
+void
+autoconf_emu(struct emu_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_random(struct random_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_lhd(struct lhd_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+static
+void
+autoconf_ltrace(struct ltrace_softc *bus, int busunit)
+{
+	(void)bus; (void)busunit;
+}
+
+void
+pseudoconfig(void)
+{
+}
+
diff --git a/kern/compile/DUMBVM/autoconf.h b/kern/compile/DUMBVM/autoconf.h
new file mode 100644
index 0000000..2c48736
--- /dev/null
+++ b/kern/compile/DUMBVM/autoconf.h
@@ -0,0 +1,43 @@
+/* Automatically generated; do not edit */
+#ifndef _AUTOCONF_H_
+#define _AUTOCONF_H_
+
+struct lamebus_softc;
+struct emu_softc;
+struct ltrace_softc;
+struct ltimer_softc;
+struct lrandom_softc;
+struct lhd_softc;
+struct lser_softc;
+struct beep_softc;
+struct con_softc;
+struct rtclock_softc;
+struct random_softc;
+
+void autoconf_lamebus(struct lamebus_softc *dev, int unit);
+
+struct emu_softc *attach_emu_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltrace_softc *attach_ltrace_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct ltimer_softc *attach_ltimer_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lrandom_softc *attach_lrandom_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lhd_softc *attach_lhd_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct lser_softc *attach_lser_to_lamebus(int devunit, struct lamebus_softc *bus);
+struct beep_softc *attach_beep_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct con_softc *attach_con_to_lser(int devunit, struct lser_softc *bus);
+struct rtclock_softc *attach_rtclock_to_ltimer(int devunit, struct ltimer_softc *bus);
+struct random_softc *attach_random_to_lrandom(int devunit, struct lrandom_softc *bus);
+
+int config_emu(struct emu_softc *dev, int unit);
+int config_ltrace(struct ltrace_softc *dev, int unit);
+int config_ltimer(struct ltimer_softc *dev, int unit);
+int config_lrandom(struct lrandom_softc *dev, int unit);
+int config_lhd(struct lhd_softc *dev, int unit);
+int config_lser(struct lser_softc *dev, int unit);
+int config_beep(struct beep_softc *dev, int unit);
+int config_con(struct con_softc *dev, int unit);
+int config_rtclock(struct rtclock_softc *dev, int unit);
+int config_random(struct random_softc *dev, int unit);
+
+void pseudoconfig(void);
+
+#endif /* _AUTOCONF_H_ */
diff --git a/kern/compile/DUMBVM/autoconf.o b/kern/compile/DUMBVM/autoconf.o
new file mode 100644
index 0000000..8a05197
Binary files /dev/null and b/kern/compile/DUMBVM/autoconf.o differ
diff --git a/kern/compile/DUMBVM/beep.o b/kern/compile/DUMBVM/beep.o
new file mode 100644
index 0000000..7e78736
Binary files /dev/null and b/kern/compile/DUMBVM/beep.o differ
diff --git a/kern/compile/DUMBVM/beep_ltimer.o b/kern/compile/DUMBVM/beep_ltimer.o
new file mode 100644
index 0000000..0c18e7d
Binary files /dev/null and b/kern/compile/DUMBVM/beep_ltimer.o differ
diff --git a/kern/compile/DUMBVM/bitmap.o b/kern/compile/DUMBVM/bitmap.o
new file mode 100644
index 0000000..ba834ab
Binary files /dev/null and b/kern/compile/DUMBVM/bitmap.o differ
diff --git a/kern/compile/DUMBVM/bitmaptest.o b/kern/compile/DUMBVM/bitmaptest.o
new file mode 100644
index 0000000..9a4b78e
Binary files /dev/null and b/kern/compile/DUMBVM/bitmaptest.o differ
diff --git a/kern/compile/DUMBVM/bswap.o b/kern/compile/DUMBVM/bswap.o
new file mode 100644
index 0000000..b492773
Binary files /dev/null and b/kern/compile/DUMBVM/bswap.o differ
diff --git a/kern/compile/DUMBVM/buf.o b/kern/compile/DUMBVM/buf.o
new file mode 100644
index 0000000..69bbd8b
Binary files /dev/null and b/kern/compile/DUMBVM/buf.o differ
diff --git a/kern/compile/DUMBVM/bzero.o b/kern/compile/DUMBVM/bzero.o
new file mode 100644
index 0000000..4f965de
Binary files /dev/null and b/kern/compile/DUMBVM/bzero.o differ
diff --git a/kern/compile/DUMBVM/cache-mips161.o b/kern/compile/DUMBVM/cache-mips161.o
new file mode 100644
index 0000000..40195dc
Binary files /dev/null and b/kern/compile/DUMBVM/cache-mips161.o differ
diff --git a/kern/compile/DUMBVM/clock.o b/kern/compile/DUMBVM/clock.o
new file mode 100644
index 0000000..1158876
Binary files /dev/null and b/kern/compile/DUMBVM/clock.o differ
diff --git a/kern/compile/DUMBVM/cmpdi2.o b/kern/compile/DUMBVM/cmpdi2.o
new file mode 100644
index 0000000..26bb92a
Binary files /dev/null and b/kern/compile/DUMBVM/cmpdi2.o differ
diff --git a/kern/compile/DUMBVM/con_lser.o b/kern/compile/DUMBVM/con_lser.o
new file mode 100644
index 0000000..bd17425
Binary files /dev/null and b/kern/compile/DUMBVM/con_lser.o differ
diff --git a/kern/compile/DUMBVM/console.o b/kern/compile/DUMBVM/console.o
new file mode 100644
index 0000000..49458cd
Binary files /dev/null and b/kern/compile/DUMBVM/console.o differ
diff --git a/kern/compile/DUMBVM/copyinout.o b/kern/compile/DUMBVM/copyinout.o
new file mode 100644
index 0000000..4c43b9f
Binary files /dev/null and b/kern/compile/DUMBVM/copyinout.o differ
diff --git a/kern/compile/DUMBVM/cpu.o b/kern/compile/DUMBVM/cpu.o
new file mode 100644
index 0000000..0e6025d
Binary files /dev/null and b/kern/compile/DUMBVM/cpu.o differ
diff --git a/kern/compile/DUMBVM/device.o b/kern/compile/DUMBVM/device.o
new file mode 100644
index 0000000..990e0aa
Binary files /dev/null and b/kern/compile/DUMBVM/device.o differ
diff --git a/kern/compile/DUMBVM/devnull.o b/kern/compile/DUMBVM/devnull.o
new file mode 100644
index 0000000..8faf62c
Binary files /dev/null and b/kern/compile/DUMBVM/devnull.o differ
diff --git a/kern/compile/DUMBVM/divdi3.o b/kern/compile/DUMBVM/divdi3.o
new file mode 100644
index 0000000..d6b526e
Binary files /dev/null and b/kern/compile/DUMBVM/divdi3.o differ
diff --git a/kern/compile/DUMBVM/dumbvm.o b/kern/compile/DUMBVM/dumbvm.o
new file mode 100644
index 0000000..f616033
Binary files /dev/null and b/kern/compile/DUMBVM/dumbvm.o differ
diff --git a/kern/compile/DUMBVM/emu.o b/kern/compile/DUMBVM/emu.o
new file mode 100644
index 0000000..0d24604
Binary files /dev/null and b/kern/compile/DUMBVM/emu.o differ
diff --git a/kern/compile/DUMBVM/emu_att.o b/kern/compile/DUMBVM/emu_att.o
new file mode 100644
index 0000000..063580d
Binary files /dev/null and b/kern/compile/DUMBVM/emu_att.o differ
diff --git a/kern/compile/DUMBVM/exception-mips1.o b/kern/compile/DUMBVM/exception-mips1.o
new file mode 100644
index 0000000..1bf95b5
Binary files /dev/null and b/kern/compile/DUMBVM/exception-mips1.o differ
diff --git a/kern/compile/DUMBVM/files.mk b/kern/compile/DUMBVM/files.mk
new file mode 100644
index 0000000..0ec897e
--- /dev/null
+++ b/kern/compile/DUMBVM/files.mk
@@ -0,0 +1,122 @@
+# Automatically generated by config; do not edit
+SRCS+=$(TOP)/common/libc/printf/__printf.c
+SRCS+=$(TOP)/common/libc/printf/snprintf.c
+SRCS+=$(TOP)/common/libc/stdlib/atoi.c
+SRCS+=$(TOP)/common/libc/string/bzero.c
+SRCS+=$(TOP)/common/libc/string/memcpy.c
+SRCS+=$(TOP)/common/libc/string/memmove.c
+SRCS+=$(TOP)/common/libc/string/memset.c
+SRCS+=$(TOP)/common/libc/string/strcat.c
+SRCS+=$(TOP)/common/libc/string/strchr.c
+SRCS+=$(TOP)/common/libc/string/strcmp.c
+SRCS+=$(TOP)/common/libc/string/strcpy.c
+SRCS+=$(TOP)/common/libc/string/strlen.c
+SRCS+=$(TOP)/common/libc/string/strrchr.c
+SRCS+=$(TOP)/common/libc/string/strtok_r.c
+SRCS+=$(KTOP)/compile/DUMBVM/autoconf.c
+SRCS+=$(KTOP)/dev/generic/beep.c
+SRCS+=$(KTOP)/dev/generic/console.c
+SRCS+=$(KTOP)/dev/generic/random.c
+SRCS+=$(KTOP)/dev/generic/rtclock.c
+SRCS+=$(KTOP)/dev/lamebus/beep_ltimer.c
+SRCS+=$(KTOP)/dev/lamebus/con_lser.c
+SRCS+=$(KTOP)/dev/lamebus/emu_att.c
+SRCS+=$(KTOP)/dev/lamebus/emu.c
+SRCS+=$(KTOP)/dev/lamebus/lamebus.c
+SRCS+=$(KTOP)/dev/lamebus/lhd_att.c
+SRCS+=$(KTOP)/dev/lamebus/lhd.c
+SRCS+=$(KTOP)/dev/lamebus/lrandom_att.c
+SRCS+=$(KTOP)/dev/lamebus/lrandom.c
+SRCS+=$(KTOP)/dev/lamebus/lser_att.c
+SRCS+=$(KTOP)/dev/lamebus/lser.c
+SRCS+=$(KTOP)/dev/lamebus/ltimer_att.c
+SRCS+=$(KTOP)/dev/lamebus/ltimer.c
+SRCS+=$(KTOP)/dev/lamebus/ltrace_att.c
+SRCS+=$(KTOP)/dev/lamebus/ltrace.c
+SRCS+=$(KTOP)/dev/lamebus/random_lrandom.c
+SRCS+=$(KTOP)/dev/lamebus/rtclock_ltimer.c
+SRCS+=$(KTOP)/fs/semfs/semfs_fsops.c
+SRCS+=$(KTOP)/fs/semfs/semfs_obj.c
+SRCS+=$(KTOP)/fs/semfs/semfs_vnops.c
+SRCS+=$(KTOP)/fs/sfs/sfs_balloc.c
+SRCS+=$(KTOP)/fs/sfs/sfs_bmap.c
+SRCS+=$(KTOP)/fs/sfs/sfs_dir.c
+SRCS+=$(KTOP)/fs/sfs/sfs_fsops.c
+SRCS+=$(KTOP)/fs/sfs/sfs_inode.c
+SRCS+=$(KTOP)/fs/sfs/sfs_io.c
+SRCS+=$(KTOP)/fs/sfs/sfs_jphys.c
+SRCS+=$(KTOP)/fs/sfs/sfs_vnops.c
+SRCS+=$(KTOP)/lib/array.c
+SRCS+=$(KTOP)/lib/bitmap.c
+SRCS+=$(KTOP)/lib/bswap.c
+SRCS+=$(KTOP)/lib/kgets.c
+SRCS+=$(KTOP)/lib/kprintf.c
+SRCS+=$(KTOP)/lib/misc.c
+SRCS+=$(KTOP)/lib/time.c
+SRCS+=$(KTOP)/lib/uio.c
+SRCS+=$(KTOP)/main/main.c
+SRCS+=$(KTOP)/main/menu.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/locore/trap.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/syscall/syscall.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/cpu.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/switchframe.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/switch.S
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/thread_machdep.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/thread/threadstart.S
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/vm/dumbvm.c
+SRCS.MACHINE.mips+=$(KTOP)/arch/mips/vm/ram.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/adddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/anddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ashldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ashrdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/cmpdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/divdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/iordi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/lshldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/lshrdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/moddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/muldi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/negdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/notdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/qdivrem.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/subdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/ucmpdi2.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/udivdi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/umoddi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/gcc-millicode/xordi3.c
+SRCS.MACHINE.mips+=$(TOP)/common/libc/arch/mips/setjmp.S
+SRCS.MACHINE.mips+=$(KTOP)/vm/copyinout.c
+SRCS+=$(KTOP)/proc/proc.c
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/locore/cache-mips161.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/locore/exception-mips1.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/mips/vm/tlb-mips161.S
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/sys161/dev/lamebus_machdep.c
+SRCS.PLATFORM.sys161+=$(KTOP)/arch/sys161/main/start.S
+SRCS+=$(KTOP)/syscall/loadelf.c
+SRCS+=$(KTOP)/syscall/runprogram.c
+SRCS+=$(KTOP)/syscall/time_syscalls.c
+SRCS+=$(KTOP)/test/arraytest.c
+SRCS+=$(KTOP)/test/bitmaptest.c
+SRCS+=$(KTOP)/test/fstest.c
+SRCS+=$(KTOP)/test/kmalloctest.c
+SRCS+=$(KTOP)/test/semunit.c
+SRCS+=$(KTOP)/test/synchtest.c
+SRCS+=$(KTOP)/test/threadlisttest.c
+SRCS+=$(KTOP)/test/threadtest.c
+SRCS+=$(KTOP)/test/tt3.c
+SRCS+=$(KTOP)/thread/clock.c
+SRCS+=$(KTOP)/thread/spinlock.c
+SRCS+=$(KTOP)/thread/spl.c
+SRCS+=$(KTOP)/thread/synch.c
+SRCS+=$(KTOP)/thread/thread.c
+SRCS+=$(KTOP)/thread/threadlist.c
+SRCS+=$(KTOP)/vfs/buf.c
+SRCS+=$(KTOP)/vfs/device.c
+SRCS+=$(KTOP)/vfs/devnull.c
+SRCS+=$(KTOP)/vfs/vfscwd.c
+SRCS+=$(KTOP)/vfs/vfsfail.c
+SRCS+=$(KTOP)/vfs/vfslist.c
+SRCS+=$(KTOP)/vfs/vfslookup.c
+SRCS+=$(KTOP)/vfs/vfspath.c
+SRCS+=$(KTOP)/vfs/vnode.c
+SRCS+=$(KTOP)/vm/kmalloc.c
diff --git a/kern/compile/DUMBVM/fstest.o b/kern/compile/DUMBVM/fstest.o
new file mode 100644
index 0000000..4a8a82d
Binary files /dev/null and b/kern/compile/DUMBVM/fstest.o differ
diff --git a/kern/compile/DUMBVM/includelinks/kern/machine b/kern/compile/DUMBVM/includelinks/kern/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/kern/compile/DUMBVM/includelinks/kern/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/kern/compile/DUMBVM/includelinks/kern/mips b/kern/compile/DUMBVM/includelinks/kern/mips
new file mode 120000
index 0000000..f26786d
--- /dev/null
+++ b/kern/compile/DUMBVM/includelinks/kern/mips
@@ -0,0 +1 @@
+../../../../arch/mips/include/kern
\ No newline at end of file
diff --git a/kern/compile/DUMBVM/includelinks/machine b/kern/compile/DUMBVM/includelinks/machine
new file mode 120000
index 0000000..af28acb
--- /dev/null
+++ b/kern/compile/DUMBVM/includelinks/machine
@@ -0,0 +1 @@
+mips
\ No newline at end of file
diff --git a/kern/compile/DUMBVM/includelinks/mips b/kern/compile/DUMBVM/includelinks/mips
new file mode 120000
index 0000000..8d2096d
--- /dev/null
+++ b/kern/compile/DUMBVM/includelinks/mips
@@ -0,0 +1 @@
+../../../arch/mips/include
\ No newline at end of file
diff --git a/kern/compile/DUMBVM/includelinks/platform b/kern/compile/DUMBVM/includelinks/platform
new file mode 120000
index 0000000..6aa3aca
--- /dev/null
+++ b/kern/compile/DUMBVM/includelinks/platform
@@ -0,0 +1 @@
+sys161
\ No newline at end of file
diff --git a/kern/compile/DUMBVM/includelinks/sys161 b/kern/compile/DUMBVM/includelinks/sys161
new file mode 120000
index 0000000..620e8fe
--- /dev/null
+++ b/kern/compile/DUMBVM/includelinks/sys161
@@ -0,0 +1 @@
+../../../arch/sys161/include
\ No newline at end of file
diff --git a/kern/compile/DUMBVM/iordi3.o b/kern/compile/DUMBVM/iordi3.o
new file mode 100644
index 0000000..2efd418
Binary files /dev/null and b/kern/compile/DUMBVM/iordi3.o differ
diff --git a/kern/compile/DUMBVM/kernel b/kern/compile/DUMBVM/kernel
new file mode 100755
index 0000000..270263c
Binary files /dev/null and b/kern/compile/DUMBVM/kernel differ
diff --git a/kern/compile/DUMBVM/kgets.o b/kern/compile/DUMBVM/kgets.o
new file mode 100644
index 0000000..0cd00e3
Binary files /dev/null and b/kern/compile/DUMBVM/kgets.o differ
diff --git a/kern/compile/DUMBVM/kmalloc.o b/kern/compile/DUMBVM/kmalloc.o
new file mode 100644
index 0000000..f52f416
Binary files /dev/null and b/kern/compile/DUMBVM/kmalloc.o differ
diff --git a/kern/compile/DUMBVM/kmalloctest.o b/kern/compile/DUMBVM/kmalloctest.o
new file mode 100644
index 0000000..0a56fa1
Binary files /dev/null and b/kern/compile/DUMBVM/kmalloctest.o differ
diff --git a/kern/compile/DUMBVM/kprintf.o b/kern/compile/DUMBVM/kprintf.o
new file mode 100644
index 0000000..aca2f05
Binary files /dev/null and b/kern/compile/DUMBVM/kprintf.o differ
diff --git a/kern/compile/DUMBVM/lamebus.o b/kern/compile/DUMBVM/lamebus.o
new file mode 100644
index 0000000..f18c3e9
Binary files /dev/null and b/kern/compile/DUMBVM/lamebus.o differ
diff --git a/kern/compile/DUMBVM/lamebus_machdep.o b/kern/compile/DUMBVM/lamebus_machdep.o
new file mode 100644
index 0000000..adef6b7
Binary files /dev/null and b/kern/compile/DUMBVM/lamebus_machdep.o differ
diff --git a/kern/compile/DUMBVM/lhd.o b/kern/compile/DUMBVM/lhd.o
new file mode 100644
index 0000000..8a96c05
Binary files /dev/null and b/kern/compile/DUMBVM/lhd.o differ
diff --git a/kern/compile/DUMBVM/lhd_att.o b/kern/compile/DUMBVM/lhd_att.o
new file mode 100644
index 0000000..5c21aa4
Binary files /dev/null and b/kern/compile/DUMBVM/lhd_att.o differ
diff --git a/kern/compile/DUMBVM/loadelf.o b/kern/compile/DUMBVM/loadelf.o
new file mode 100644
index 0000000..9d3b5e7
Binary files /dev/null and b/kern/compile/DUMBVM/loadelf.o differ
diff --git a/kern/compile/DUMBVM/lrandom.o b/kern/compile/DUMBVM/lrandom.o
new file mode 100644
index 0000000..5896260
Binary files /dev/null and b/kern/compile/DUMBVM/lrandom.o differ
diff --git a/kern/compile/DUMBVM/lrandom_att.o b/kern/compile/DUMBVM/lrandom_att.o
new file mode 100644
index 0000000..9e40477
Binary files /dev/null and b/kern/compile/DUMBVM/lrandom_att.o differ
diff --git a/kern/compile/DUMBVM/lser.o b/kern/compile/DUMBVM/lser.o
new file mode 100644
index 0000000..821b3f4
Binary files /dev/null and b/kern/compile/DUMBVM/lser.o differ
diff --git a/kern/compile/DUMBVM/lser_att.o b/kern/compile/DUMBVM/lser_att.o
new file mode 100644
index 0000000..666a31d
Binary files /dev/null and b/kern/compile/DUMBVM/lser_att.o differ
diff --git a/kern/compile/DUMBVM/lshldi3.o b/kern/compile/DUMBVM/lshldi3.o
new file mode 100644
index 0000000..41f8be6
Binary files /dev/null and b/kern/compile/DUMBVM/lshldi3.o differ
diff --git a/kern/compile/DUMBVM/lshrdi3.o b/kern/compile/DUMBVM/lshrdi3.o
new file mode 100644
index 0000000..1006cca
Binary files /dev/null and b/kern/compile/DUMBVM/lshrdi3.o differ
diff --git a/kern/compile/DUMBVM/ltimer.o b/kern/compile/DUMBVM/ltimer.o
new file mode 100644
index 0000000..0db7ad0
Binary files /dev/null and b/kern/compile/DUMBVM/ltimer.o differ
diff --git a/kern/compile/DUMBVM/ltimer_att.o b/kern/compile/DUMBVM/ltimer_att.o
new file mode 100644
index 0000000..eee46db
Binary files /dev/null and b/kern/compile/DUMBVM/ltimer_att.o differ
diff --git a/kern/compile/DUMBVM/ltrace.o b/kern/compile/DUMBVM/ltrace.o
new file mode 100644
index 0000000..3501b77
Binary files /dev/null and b/kern/compile/DUMBVM/ltrace.o differ
diff --git a/kern/compile/DUMBVM/ltrace_att.o b/kern/compile/DUMBVM/ltrace_att.o
new file mode 100644
index 0000000..a6bcf06
Binary files /dev/null and b/kern/compile/DUMBVM/ltrace_att.o differ
diff --git a/kern/compile/DUMBVM/main.o b/kern/compile/DUMBVM/main.o
new file mode 100644
index 0000000..7f7e379
Binary files /dev/null and b/kern/compile/DUMBVM/main.o differ
diff --git a/kern/compile/DUMBVM/memcpy.o b/kern/compile/DUMBVM/memcpy.o
new file mode 100644
index 0000000..0f401ca
Binary files /dev/null and b/kern/compile/DUMBVM/memcpy.o differ
diff --git a/kern/compile/DUMBVM/memmove.o b/kern/compile/DUMBVM/memmove.o
new file mode 100644
index 0000000..547601c
Binary files /dev/null and b/kern/compile/DUMBVM/memmove.o differ
diff --git a/kern/compile/DUMBVM/memset.o b/kern/compile/DUMBVM/memset.o
new file mode 100644
index 0000000..aed6004
Binary files /dev/null and b/kern/compile/DUMBVM/memset.o differ
diff --git a/kern/compile/DUMBVM/menu.o b/kern/compile/DUMBVM/menu.o
new file mode 100644
index 0000000..b17ceda
Binary files /dev/null and b/kern/compile/DUMBVM/menu.o differ
diff --git a/kern/compile/DUMBVM/misc.o b/kern/compile/DUMBVM/misc.o
new file mode 100644
index 0000000..56d9460
Binary files /dev/null and b/kern/compile/DUMBVM/misc.o differ
diff --git a/kern/compile/DUMBVM/moddi3.o b/kern/compile/DUMBVM/moddi3.o
new file mode 100644
index 0000000..e3d14b3
Binary files /dev/null and b/kern/compile/DUMBVM/moddi3.o differ
diff --git a/kern/compile/DUMBVM/muldi3.o b/kern/compile/DUMBVM/muldi3.o
new file mode 100644
index 0000000..8ae0034
Binary files /dev/null and b/kern/compile/DUMBVM/muldi3.o differ
diff --git a/kern/compile/DUMBVM/negdi2.o b/kern/compile/DUMBVM/negdi2.o
new file mode 100644
index 0000000..59534e0
Binary files /dev/null and b/kern/compile/DUMBVM/negdi2.o differ
diff --git a/kern/compile/DUMBVM/notdi2.o b/kern/compile/DUMBVM/notdi2.o
new file mode 100644
index 0000000..d31087c
Binary files /dev/null and b/kern/compile/DUMBVM/notdi2.o differ
diff --git a/kern/compile/DUMBVM/opt-dumbvm.h b/kern/compile/DUMBVM/opt-dumbvm.h
new file mode 100644
index 0000000..7db9b01
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-dumbvm.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_DUMBVM_H_
+#define _OPT_DUMBVM_H_
+#define OPT_DUMBVM 1
+#endif /* _OPT_DUMBVM_H_ */
diff --git a/kern/compile/DUMBVM/opt-net.h b/kern/compile/DUMBVM/opt-net.h
new file mode 100644
index 0000000..0340a83
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-net.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NET_H_
+#define _OPT_NET_H_
+#define OPT_NET 0
+#endif /* _OPT_NET_H_ */
diff --git a/kern/compile/DUMBVM/opt-netfs.h b/kern/compile/DUMBVM/opt-netfs.h
new file mode 100644
index 0000000..cd21c56
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-netfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NETFS_H_
+#define _OPT_NETFS_H_
+#define OPT_NETFS 0
+#endif /* _OPT_NETFS_H_ */
diff --git a/kern/compile/DUMBVM/opt-noasserts.h b/kern/compile/DUMBVM/opt-noasserts.h
new file mode 100644
index 0000000..e4cd61c
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-noasserts.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_NOASSERTS_H_
+#define _OPT_NOASSERTS_H_
+#define OPT_NOASSERTS 0
+#endif /* _OPT_NOASSERTS_H_ */
diff --git a/kern/compile/DUMBVM/opt-semfs.h b/kern/compile/DUMBVM/opt-semfs.h
new file mode 100644
index 0000000..8b7a4f4
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-semfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SEMFS_H_
+#define _OPT_SEMFS_H_
+#define OPT_SEMFS 1
+#endif /* _OPT_SEMFS_H_ */
diff --git a/kern/compile/DUMBVM/opt-sfs.h b/kern/compile/DUMBVM/opt-sfs.h
new file mode 100644
index 0000000..94095ad
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-sfs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SFS_H_
+#define _OPT_SFS_H_
+#define OPT_SFS 1
+#endif /* _OPT_SFS_H_ */
diff --git a/kern/compile/DUMBVM/opt-synchprobs.h b/kern/compile/DUMBVM/opt-synchprobs.h
new file mode 100644
index 0000000..9114407
--- /dev/null
+++ b/kern/compile/DUMBVM/opt-synchprobs.h
@@ -0,0 +1,5 @@
+/* Automatically generated; do not edit */
+#ifndef _OPT_SYNCHPROBS_H_
+#define _OPT_SYNCHPROBS_H_
+#define OPT_SYNCHPROBS 0
+#endif /* _OPT_SYNCHPROBS_H_ */
diff --git a/kern/compile/DUMBVM/proc.o b/kern/compile/DUMBVM/proc.o
new file mode 100644
index 0000000..0690037
Binary files /dev/null and b/kern/compile/DUMBVM/proc.o differ
diff --git a/kern/compile/DUMBVM/qdivrem.o b/kern/compile/DUMBVM/qdivrem.o
new file mode 100644
index 0000000..64972a4
Binary files /dev/null and b/kern/compile/DUMBVM/qdivrem.o differ
diff --git a/kern/compile/DUMBVM/ram.o b/kern/compile/DUMBVM/ram.o
new file mode 100644
index 0000000..864fcf4
Binary files /dev/null and b/kern/compile/DUMBVM/ram.o differ
diff --git a/kern/compile/DUMBVM/random.o b/kern/compile/DUMBVM/random.o
new file mode 100644
index 0000000..5fe50aa
Binary files /dev/null and b/kern/compile/DUMBVM/random.o differ
diff --git a/kern/compile/DUMBVM/random_lrandom.o b/kern/compile/DUMBVM/random_lrandom.o
new file mode 100644
index 0000000..5ab913f
Binary files /dev/null and b/kern/compile/DUMBVM/random_lrandom.o differ
diff --git a/kern/compile/DUMBVM/rtclock.o b/kern/compile/DUMBVM/rtclock.o
new file mode 100644
index 0000000..f182253
Binary files /dev/null and b/kern/compile/DUMBVM/rtclock.o differ
diff --git a/kern/compile/DUMBVM/rtclock_ltimer.o b/kern/compile/DUMBVM/rtclock_ltimer.o
new file mode 100644
index 0000000..92fcd06
Binary files /dev/null and b/kern/compile/DUMBVM/rtclock_ltimer.o differ
diff --git a/kern/compile/DUMBVM/runprogram.o b/kern/compile/DUMBVM/runprogram.o
new file mode 100644
index 0000000..cd81a92
Binary files /dev/null and b/kern/compile/DUMBVM/runprogram.o differ
diff --git a/kern/compile/DUMBVM/semfs_fsops.o b/kern/compile/DUMBVM/semfs_fsops.o
new file mode 100644
index 0000000..d66faac
Binary files /dev/null and b/kern/compile/DUMBVM/semfs_fsops.o differ
diff --git a/kern/compile/DUMBVM/semfs_obj.o b/kern/compile/DUMBVM/semfs_obj.o
new file mode 100644
index 0000000..675d02c
Binary files /dev/null and b/kern/compile/DUMBVM/semfs_obj.o differ
diff --git a/kern/compile/DUMBVM/semfs_vnops.o b/kern/compile/DUMBVM/semfs_vnops.o
new file mode 100644
index 0000000..6701581
Binary files /dev/null and b/kern/compile/DUMBVM/semfs_vnops.o differ
diff --git a/kern/compile/DUMBVM/semunit.o b/kern/compile/DUMBVM/semunit.o
new file mode 100644
index 0000000..7023e2b
Binary files /dev/null and b/kern/compile/DUMBVM/semunit.o differ
diff --git a/kern/compile/DUMBVM/setjmp.o b/kern/compile/DUMBVM/setjmp.o
new file mode 100644
index 0000000..cef88d8
Binary files /dev/null and b/kern/compile/DUMBVM/setjmp.o differ
diff --git a/kern/compile/DUMBVM/sfs_balloc.o b/kern/compile/DUMBVM/sfs_balloc.o
new file mode 100644
index 0000000..dea1447
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_balloc.o differ
diff --git a/kern/compile/DUMBVM/sfs_bmap.o b/kern/compile/DUMBVM/sfs_bmap.o
new file mode 100644
index 0000000..403d026
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_bmap.o differ
diff --git a/kern/compile/DUMBVM/sfs_dir.o b/kern/compile/DUMBVM/sfs_dir.o
new file mode 100644
index 0000000..29e169b
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_dir.o differ
diff --git a/kern/compile/DUMBVM/sfs_fsops.o b/kern/compile/DUMBVM/sfs_fsops.o
new file mode 100644
index 0000000..68a592e
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_fsops.o differ
diff --git a/kern/compile/DUMBVM/sfs_inode.o b/kern/compile/DUMBVM/sfs_inode.o
new file mode 100644
index 0000000..bf6e5e1
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_inode.o differ
diff --git a/kern/compile/DUMBVM/sfs_io.o b/kern/compile/DUMBVM/sfs_io.o
new file mode 100644
index 0000000..103ad58
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_io.o differ
diff --git a/kern/compile/DUMBVM/sfs_jphys.o b/kern/compile/DUMBVM/sfs_jphys.o
new file mode 100644
index 0000000..ee0b454
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_jphys.o differ
diff --git a/kern/compile/DUMBVM/sfs_vnops.o b/kern/compile/DUMBVM/sfs_vnops.o
new file mode 100644
index 0000000..5e71983
Binary files /dev/null and b/kern/compile/DUMBVM/sfs_vnops.o differ
diff --git a/kern/compile/DUMBVM/snprintf.o b/kern/compile/DUMBVM/snprintf.o
new file mode 100644
index 0000000..316e050
Binary files /dev/null and b/kern/compile/DUMBVM/snprintf.o differ
diff --git a/kern/compile/DUMBVM/spinlock.o b/kern/compile/DUMBVM/spinlock.o
new file mode 100644
index 0000000..9103501
Binary files /dev/null and b/kern/compile/DUMBVM/spinlock.o differ
diff --git a/kern/compile/DUMBVM/spl.o b/kern/compile/DUMBVM/spl.o
new file mode 100644
index 0000000..cf3076f
Binary files /dev/null and b/kern/compile/DUMBVM/spl.o differ
diff --git a/kern/compile/DUMBVM/start.o b/kern/compile/DUMBVM/start.o
new file mode 100644
index 0000000..81936e3
Binary files /dev/null and b/kern/compile/DUMBVM/start.o differ
diff --git a/kern/compile/DUMBVM/strcat.o b/kern/compile/DUMBVM/strcat.o
new file mode 100644
index 0000000..bf03315
Binary files /dev/null and b/kern/compile/DUMBVM/strcat.o differ
diff --git a/kern/compile/DUMBVM/strchr.o b/kern/compile/DUMBVM/strchr.o
new file mode 100644
index 0000000..81bc6ed
Binary files /dev/null and b/kern/compile/DUMBVM/strchr.o differ
diff --git a/kern/compile/DUMBVM/strcmp.o b/kern/compile/DUMBVM/strcmp.o
new file mode 100644
index 0000000..4994a7c
Binary files /dev/null and b/kern/compile/DUMBVM/strcmp.o differ
diff --git a/kern/compile/DUMBVM/strcpy.o b/kern/compile/DUMBVM/strcpy.o
new file mode 100644
index 0000000..d423fa4
Binary files /dev/null and b/kern/compile/DUMBVM/strcpy.o differ
diff --git a/kern/compile/DUMBVM/strlen.o b/kern/compile/DUMBVM/strlen.o
new file mode 100644
index 0000000..2308864
Binary files /dev/null and b/kern/compile/DUMBVM/strlen.o differ
diff --git a/kern/compile/DUMBVM/strrchr.o b/kern/compile/DUMBVM/strrchr.o
new file mode 100644
index 0000000..0c9642d
Binary files /dev/null and b/kern/compile/DUMBVM/strrchr.o differ
diff --git a/kern/compile/DUMBVM/strtok_r.o b/kern/compile/DUMBVM/strtok_r.o
new file mode 100644
index 0000000..b1f73f9
Binary files /dev/null and b/kern/compile/DUMBVM/strtok_r.o differ
diff --git a/kern/compile/DUMBVM/subdi3.o b/kern/compile/DUMBVM/subdi3.o
new file mode 100644
index 0000000..e6b0ff0
Binary files /dev/null and b/kern/compile/DUMBVM/subdi3.o differ
diff --git a/kern/compile/DUMBVM/switch.o b/kern/compile/DUMBVM/switch.o
new file mode 100644
index 0000000..2afcbfe
Binary files /dev/null and b/kern/compile/DUMBVM/switch.o differ
diff --git a/kern/compile/DUMBVM/switchframe.o b/kern/compile/DUMBVM/switchframe.o
new file mode 100644
index 0000000..511ac41
Binary files /dev/null and b/kern/compile/DUMBVM/switchframe.o differ
diff --git a/kern/compile/DUMBVM/synch.o b/kern/compile/DUMBVM/synch.o
new file mode 100644
index 0000000..3065182
Binary files /dev/null and b/kern/compile/DUMBVM/synch.o differ
diff --git a/kern/compile/DUMBVM/synchtest.o b/kern/compile/DUMBVM/synchtest.o
new file mode 100644
index 0000000..3cd61a4
Binary files /dev/null and b/kern/compile/DUMBVM/synchtest.o differ
diff --git a/kern/compile/DUMBVM/syscall.o b/kern/compile/DUMBVM/syscall.o
new file mode 100644
index 0000000..61db66d
Binary files /dev/null and b/kern/compile/DUMBVM/syscall.o differ
diff --git a/kern/compile/DUMBVM/thread.o b/kern/compile/DUMBVM/thread.o
new file mode 100644
index 0000000..8a65c8f
Binary files /dev/null and b/kern/compile/DUMBVM/thread.o differ
diff --git a/kern/compile/DUMBVM/thread_machdep.o b/kern/compile/DUMBVM/thread_machdep.o
new file mode 100644
index 0000000..e31b3ff
Binary files /dev/null and b/kern/compile/DUMBVM/thread_machdep.o differ
diff --git a/kern/compile/DUMBVM/threadlist.o b/kern/compile/DUMBVM/threadlist.o
new file mode 100644
index 0000000..68d3539
Binary files /dev/null and b/kern/compile/DUMBVM/threadlist.o differ
diff --git a/kern/compile/DUMBVM/threadlisttest.o b/kern/compile/DUMBVM/threadlisttest.o
new file mode 100644
index 0000000..b09468f
Binary files /dev/null and b/kern/compile/DUMBVM/threadlisttest.o differ
diff --git a/kern/compile/DUMBVM/threadstart.o b/kern/compile/DUMBVM/threadstart.o
new file mode 100644
index 0000000..aabf97b
Binary files /dev/null and b/kern/compile/DUMBVM/threadstart.o differ
diff --git a/kern/compile/DUMBVM/threadtest.o b/kern/compile/DUMBVM/threadtest.o
new file mode 100644
index 0000000..a337073
Binary files /dev/null and b/kern/compile/DUMBVM/threadtest.o differ
diff --git a/kern/compile/DUMBVM/time.o b/kern/compile/DUMBVM/time.o
new file mode 100644
index 0000000..9b98864
Binary files /dev/null and b/kern/compile/DUMBVM/time.o differ
diff --git a/kern/compile/DUMBVM/time_syscalls.o b/kern/compile/DUMBVM/time_syscalls.o
new file mode 100644
index 0000000..d6ea4d6
Binary files /dev/null and b/kern/compile/DUMBVM/time_syscalls.o differ
diff --git a/kern/compile/DUMBVM/tlb-mips161.o b/kern/compile/DUMBVM/tlb-mips161.o
new file mode 100644
index 0000000..f171f0b
Binary files /dev/null and b/kern/compile/DUMBVM/tlb-mips161.o differ
diff --git a/kern/compile/DUMBVM/trap.o b/kern/compile/DUMBVM/trap.o
new file mode 100644
index 0000000..05cb083
Binary files /dev/null and b/kern/compile/DUMBVM/trap.o differ
diff --git a/kern/compile/DUMBVM/tt3.o b/kern/compile/DUMBVM/tt3.o
new file mode 100644
index 0000000..3bd263d
Binary files /dev/null and b/kern/compile/DUMBVM/tt3.o differ
diff --git a/kern/compile/DUMBVM/ucmpdi2.o b/kern/compile/DUMBVM/ucmpdi2.o
new file mode 100644
index 0000000..67c92f6
Binary files /dev/null and b/kern/compile/DUMBVM/ucmpdi2.o differ
diff --git a/kern/compile/DUMBVM/udivdi3.o b/kern/compile/DUMBVM/udivdi3.o
new file mode 100644
index 0000000..7125de3
Binary files /dev/null and b/kern/compile/DUMBVM/udivdi3.o differ
diff --git a/kern/compile/DUMBVM/uio.o b/kern/compile/DUMBVM/uio.o
new file mode 100644
index 0000000..6be7685
Binary files /dev/null and b/kern/compile/DUMBVM/uio.o differ
diff --git a/kern/compile/DUMBVM/umoddi3.o b/kern/compile/DUMBVM/umoddi3.o
new file mode 100644
index 0000000..b857335
Binary files /dev/null and b/kern/compile/DUMBVM/umoddi3.o differ
diff --git a/kern/compile/DUMBVM/vers.c b/kern/compile/DUMBVM/vers.c
new file mode 100644
index 0000000..23b8d88
--- /dev/null
+++ b/kern/compile/DUMBVM/vers.c
@@ -0,0 +1,3 @@
+/* This file is automatically generated. Edits will be lost.*/
+const int buildversion = 1;
+const char buildconfig[] = "DUMBVM";
diff --git a/kern/compile/DUMBVM/vers.o b/kern/compile/DUMBVM/vers.o
new file mode 100644
index 0000000..71add56
Binary files /dev/null and b/kern/compile/DUMBVM/vers.o differ
diff --git a/kern/compile/DUMBVM/version b/kern/compile/DUMBVM/version
new file mode 100644
index 0000000..d00491f
--- /dev/null
+++ b/kern/compile/DUMBVM/version
@@ -0,0 +1 @@
+1
diff --git a/kern/compile/DUMBVM/vfscwd.o b/kern/compile/DUMBVM/vfscwd.o
new file mode 100644
index 0000000..9e88081
Binary files /dev/null and b/kern/compile/DUMBVM/vfscwd.o differ
diff --git a/kern/compile/DUMBVM/vfsfail.o b/kern/compile/DUMBVM/vfsfail.o
new file mode 100644
index 0000000..10d5155
Binary files /dev/null and b/kern/compile/DUMBVM/vfsfail.o differ
diff --git a/kern/compile/DUMBVM/vfslist.o b/kern/compile/DUMBVM/vfslist.o
new file mode 100644
index 0000000..0a4b570
Binary files /dev/null and b/kern/compile/DUMBVM/vfslist.o differ
diff --git a/kern/compile/DUMBVM/vfslookup.o b/kern/compile/DUMBVM/vfslookup.o
new file mode 100644
index 0000000..2d4a597
Binary files /dev/null and b/kern/compile/DUMBVM/vfslookup.o differ
diff --git a/kern/compile/DUMBVM/vfspath.o b/kern/compile/DUMBVM/vfspath.o
new file mode 100644
index 0000000..0de10ad
Binary files /dev/null and b/kern/compile/DUMBVM/vfspath.o differ
diff --git a/kern/compile/DUMBVM/vnode.o b/kern/compile/DUMBVM/vnode.o
new file mode 100644
index 0000000..673952a
Binary files /dev/null and b/kern/compile/DUMBVM/vnode.o differ
diff --git a/kern/compile/DUMBVM/xordi3.o b/kern/compile/DUMBVM/xordi3.o
new file mode 100644
index 0000000..676d5c7
Binary files /dev/null and b/kern/compile/DUMBVM/xordi3.o differ
diff --git a/kern/conf/conf.kern b/kern/conf/conf.kern
index 10008b8..bac699b 100644
--- a/kern/conf/conf.kern
+++ b/kern/conf/conf.kern
@@ -449,4 +449,5 @@ file		test/synchtest.c
 file		test/semunit.c
 file		test/kmalloctest.c
 file		test/fstest.c
+#file        test/jointest.c
 optfile net	test/nettest.c
diff --git a/kern/include/synch.h b/kern/include/synch.h
index fee3b07..8a1ebe1 100644
--- a/kern/include/synch.h
+++ b/kern/include/synch.h
@@ -74,8 +74,10 @@ void V(struct semaphore *);
  */
 struct lock {
         char *lk_name;
-        // add what you need here
-        // (don't forget to mark things volatile as needed)
+        volatile bool lk_busy;
+        struct spinlock lk_spinlock;
+        struct thread *lk_thread;
+        struct wchan *lk_wchan;
 };
 
 struct lock *lock_create(const char *name);
@@ -113,8 +115,8 @@ bool lock_do_i_hold(struct lock *);
 
 struct cv {
         char *cv_name;
-        // add what you need here
-        // (don't forget to mark things volatile as needed)
+        struct spinlock cv_lock;
+        struct wchan *cv_wchan;
 };
 
 struct cv *cv_create(const char *name);
@@ -138,4 +140,4 @@ void cv_signal(struct cv *cv, struct lock *lock);
 void cv_broadcast(struct cv *cv, struct lock *lock);
 
 
-#endif /* _SYNCH_H_ */
+#endif /* _SYNCH_H_ */
\ No newline at end of file
diff --git a/kern/include/test.h b/kern/include/test.h
index ad3552f..1fa5a22 100644
--- a/kern/include/test.h
+++ b/kern/include/test.h
@@ -54,6 +54,7 @@ int threadlisttest(int, char **);
 int threadtest(int, char **);
 int threadtest2(int, char **);
 int threadtest3(int, char **);
+int threadtest4(int, char**);
 int semtest(int, char **);
 int locktest(int, char **);
 int cvtest(int, char **);
diff --git a/kern/include/thread.h b/kern/include/thread.h
index d161c8f..894ba6e 100644
--- a/kern/include/thread.h
+++ b/kern/include/thread.h
@@ -104,6 +104,13 @@ struct thread {
 	/*
 	 * Public fields
 	 */
+	struct thread *t_parent;
+	bool t_has_parent;
+	int t_ret;
+	struct semaphore *t_join_parent;
+	struct semaphore *t_join_child;
+	int t_children;
+
 
 	/* VFS */
 	bool t_did_reserve_buffers;	/* reserve_buffers() in effect */
@@ -145,7 +152,13 @@ void thread_shutdown(void);
  */
 int thread_fork(const char *name, struct proc *proc,
                 void (*func)(void *, unsigned long),
-                void *data1, unsigned long data2);
+				void *data1, unsigned long data2);/*, struct thread **thd);*/
+				
+int thread_fork2(const char *name, struct proc *proc,
+	void (*func)(void *, unsigned long),
+	void *data1, unsigned long data2, struct thread **thd);
+
+int thread_join(struct thread *thd, int*ret);
 
 /*
  * Cause the current thread to exit.
@@ -172,4 +185,4 @@ void schedule(void);
 void thread_consider_migration(void);
 
 
-#endif /* _THREAD_H_ */
+#endif /* _THREAD_H_ */
\ No newline at end of file
diff --git a/kern/main/menu.c b/kern/main/menu.c
index 33522bb..45a7d79 100644
--- a/kern/main/menu.c
+++ b/kern/main/menu.c
@@ -437,7 +437,7 @@ showmenu(const char *name, const char *x[])
 	}
 	half = (ct+1)/2;
 
-	for (i=0; i<half; i++) {
+	for (i=0; i<ct; i++) {
 		kprintf("    %-36s", x[i]);
 		if (i+half < ct) {
 			kprintf("%s", x[i+half]);
@@ -486,6 +486,7 @@ static const char *testmenu[] = {
 	"[tt1] Thread test 1                 ",
 	"[tt2] Thread test 2                 ",
 	"[tt3] Thread test 3                 ",
+	"[tt4] Thread test 4		    	 ",
 #if OPT_NET
 	"[net] Network test                  ",
 #endif
@@ -595,6 +596,7 @@ static struct {
 	{ "tt1",	threadtest },
 	{ "tt2",	threadtest2 },
 	{ "tt3",	threadtest3 },
+	{ "tt4",	threadtest4 },
 	{ "sy1",	semtest },
 
 	/* synchronization assignment tests */
diff --git a/kern/test/jointest.c b/kern/test/jointest.c
new file mode 100644
index 0000000..8d2644b
--- /dev/null
+++ b/kern/test/jointest.c
@@ -0,0 +1,37 @@
+#include <types.h>
+#include <lib.h>
+#include <thread.h>
+#include <synch.h>
+#include <test.h>
+
+//int jointest(int, char **);
+
+int jointest(int nargs, char **args)
+{
+    kprintf("jointest");
+    struct proc *proc;
+	int result;
+
+	/* Create a process for the new program to run in. */
+	proc = proc_create_runprogram(args[0] /* name */);
+	if (proc == NULL) {
+		return ENOMEM;
+    }
+    
+    int i=0;
+    for(i;i<20;i++)
+    {
+        result = thread_fork(args[0] /* thread name */,
+                proc /* new process */,
+                cmd_progthread /* thread function */,
+                args /* thread arg */, nargs /* thread arg */);
+        if (result) {
+            kprintf("thread_fork failed: %s\n", strerror(result));
+            proc_destroy(proc);
+            return result;
+	    }
+    }
+
+    thread_join(args[0],result);
+    return result;
+}
\ No newline at end of file
diff --git a/kern/test/threadtest.c b/kern/test/threadtest.c
index be9f282..560dda4 100644
--- a/kern/test/threadtest.c
+++ b/kern/test/threadtest.c
@@ -138,9 +138,48 @@ threadtest2(int nargs, char **args)
 	(void)args;
 
 	init_sem();
-	kprintf("Starting thread test 2...\n");
+	kprintf("Starting thread test 2...hi\n");
 	runthreads(0);
 	kprintf("\nThread test 2 done.\n");
 
 	return 0;
 }
+
+
+static void t_join(void *temp, unsigned long t_thread)
+{
+	(void) temp;
+	kprintf("Join thread: %lu\n", t_thread);
+}
+
+static void jointest(void)
+{
+	struct thread *t_arr[NTHREADS];
+	int i=0;
+	for(i=0; i<NTHREADS; i++)
+	{
+		thread_fork2("child", NULL, &t_join, NULL, i, &(t_arr[i]));
+	}
+
+	int ret_val;
+	for(i=0; i<NTHREADS; i++)
+	{
+		kprintf("Joining: %d\n", i);
+		thread_join(t_arr[i], &ret_val);
+	}
+}
+
+int
+threadtest4(int nargs, char **args)
+{
+	(void)nargs;
+	(void)args;
+
+	init_sem();
+	kprintf("Starting thread test 4...\n");
+	jointest();
+	kprintf("\nThread test 4 done.\n");
+
+	return 0;
+}
+
diff --git a/kern/thread/synch.c b/kern/thread/synch.c
index d083f4b..897c99a 100644
--- a/kern/thread/synch.c
+++ b/kern/thread/synch.c
@@ -138,7 +138,7 @@ V(struct semaphore *sem)
 //
 // Lock.
 
-struct lock *
+struct lock*
 lock_create(const char *name)
 {
         struct lock *lock;
@@ -154,7 +154,16 @@ lock_create(const char *name)
                 return NULL;
         }
 
-        // add stuff here as needed
+        lock->lk_wchan=wchan_create(name);
+        if(lock->lk_wchan==NULL)
+        {
+                kfree(lock->lk_name);
+		kfree(lock);
+		return NULL;
+        }
+
+        spinlock_init(&lock->lk_spinlock);
+        lock->lk_busy=false;
 
         return lock;
 }
@@ -164,8 +173,8 @@ lock_destroy(struct lock *lock)
 {
         KASSERT(lock != NULL);
 
-        // add stuff here as needed
-
+        wchan_destroy(lock->lk_wchan);
+        spinlock_cleanup(&lock->lk_spinlock);
         kfree(lock->lk_name);
         kfree(lock);
 }
@@ -173,27 +182,34 @@ lock_destroy(struct lock *lock)
 void
 lock_acquire(struct lock *lock)
 {
-        // Write this
+        spinlock_acquire(&lock->lk_spinlock);
+
+        while(lock->lk_busy)
+        {
+            wchan_sleep(lock->lk_wchan, &lock->lk_spinlock);
+        }
+        lock->lk_busy=true;
+        lock->lk_thread=curthread;
+        spinlock_release(&lock->lk_spinlock);
 
-        (void)lock;  // suppress warning until code gets written
 }
 
 void
 lock_release(struct lock *lock)
 {
-        // Write this
+        spinlock_acquire(&lock->lk_spinlock);
+        KASSERT(lock->lk_thread==curthread&&lock->lk_busy);
 
-        (void)lock;  // suppress warning until code gets written
+        lock->lk_busy = false;        
+        lock->lk_thread = NULL;
+        wchan_wakeone(lock->lk_wchan, &lock->lk_spinlock);
+        spinlock_release(&lock->lk_spinlock);
 }
 
 bool
 lock_do_i_hold(struct lock *lock)
 {
-        // Write this
-
-        (void)lock;  // suppress warning until code gets written
-
-        return true; // dummy until code gets written
+        return lock->lk_thread == curthread;
 }
 
 ////////////////////////////////////////////////////////////
@@ -217,7 +233,14 @@ cv_create(const char *name)
                 return NULL;
         }
 
-        // add stuff here as needed
+        cv->cv_wchan = wchan_create(cv->cv_name);
+        if(cv->cv_wchan==NULL)
+        {
+            kfree(cv->cv_name);
+            kfree(cv);
+            return NULL;
+        }
+        spinlock_init(&cv->cv_lock);
 
         return cv;
 }
@@ -227,8 +250,8 @@ cv_destroy(struct cv *cv)
 {
         KASSERT(cv != NULL);
 
-        // add stuff here as needed
-
+        spinlock_cleanup(&cv->cv_lock);
+        wchan_destroy(cv->cv_wchan);
         kfree(cv->cv_name);
         kfree(cv);
 }
@@ -236,23 +259,38 @@ cv_destroy(struct cv *cv)
 void
 cv_wait(struct cv *cv, struct lock *lock)
 {
-        // Write this
-        (void)cv;    // suppress warning until code gets written
-        (void)lock;  // suppress warning until code gets written
+    KASSERT(cv != NULL && lock != NULL);
+    KASSERT(curthread->t_in_interrupt == false);
+    //KASSERT(lock_do_i_hold(lock));
+
+    if(lock_do_i_hold(lock))
+    {
+        spinlock_acquire(&cv->cv_lock);
+        lock_release(lock);
+        wchan_sleep(cv->cv_wchan, &cv->cv_lock);
+        spinlock_release(&cv->cv_lock);
+        lock_acquire(lock);
+        //KASSERT(lock_do_i_hold(lock));
+
+    }
 }
 
 void
 cv_signal(struct cv *cv, struct lock *lock)
 {
-        // Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+    KASSERT(cv != NULL && lock != NULL && lock_do_i_hold(lock));
+
+    spinlock_acquire(&cv->cv_lock);
+    wchan_wakeone(cv->cv_wchan, &cv->cv_lock);
+    spinlock_release(&cv->cv_lock);
 }
 
 void
 cv_broadcast(struct cv *cv, struct lock *lock)
 {
-	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
-}
+        KASSERT(cv != NULL && lock != NULL && lock_do_i_hold(lock));
+    
+    spinlock_acquire(&cv->cv_lock);
+    wchan_wakeall(cv->cv_wchan, &cv->cv_lock);
+    spinlock_release(&cv->cv_lock);
+}
\ No newline at end of file
diff --git a/kern/thread/thread.c b/kern/thread/thread.c
index 8ac3b9d..e63dc21 100644
--- a/kern/thread/thread.c
+++ b/kern/thread/thread.c
@@ -150,6 +150,14 @@ thread_create(const char *name)
 	thread->t_did_reserve_buffers = false;
 
 	/* If you add to struct thread, be sure to initialize here */
+    thread->t_parent=NULL;
+    thread->t_has_parent=false;
+    thread->t_children = 0;
+    thread->t_ret=0;
+    thread->t_join_parent=NULL;
+	thread->t_join_child=NULL;
+	//thread->join_lk = lock_create(name);
+	//thread->join_cv = cv_create(name);
 
 	return thread;
 }
@@ -494,6 +502,8 @@ thread_make_runnable(struct thread *target, bool already_have_lock)
  * process is inherited from the caller. It will start on the same CPU
  * as the caller, unless the scheduler intervenes first.
  */
+
+
 int
 thread_fork(const char *name,
 	    struct proc *proc,
@@ -550,6 +560,101 @@ thread_fork(const char *name,
 	return 0;
 }
 
+
+/******************************** added */
+int
+thread_fork2(const char *name,
+	    struct proc *proc,
+	    void (*entrypoint)(void *data1, unsigned long data2),
+	    void *data1, unsigned long data2, struct thread **thd)
+{
+	struct thread *newthread;
+	int result;
+
+	newthread = thread_create(name);
+	if (newthread == NULL) {
+		return ENOMEM;
+	}
+
+	/* Allocate a stack */
+	newthread->t_stack = kmalloc(STACK_SIZE);
+	if (newthread->t_stack == NULL) {
+		thread_destroy(newthread);
+		return ENOMEM;
+	}
+	thread_checkstack_init(newthread);
+
+	/*
+	 * Now we clone various fields from the parent thread.
+	 */
+
+	/* Thread subsystem fields */
+	newthread->t_cpu = curthread->t_cpu;
+
+	if(thd != NULL)
+	{
+		*thd = newthread;
+		newthread->t_parent = curthread;
+		newthread->t_join_parent = sem_create(name,0);
+	}
+
+	/* Attach the new thread to its process */
+	if (proc == NULL) {
+		proc = curthread->t_proc;
+	}
+	result = proc_addthread(proc, newthread);
+	if (result) {
+		/* thread_destroy will clean up the stack */
+		thread_destroy(newthread);
+		return result;
+	}
+
+	/*
+	 * Because new threads come out holding the cpu runqueue lock
+	 * (see notes at bottom of thread_switch), we need to account
+	 * for the spllower() that will be done releasing it.
+	 */
+	newthread->t_iplhigh_count++;
+
+	/* Set up the switchframe so entrypoint() gets called */
+	switchframe_init(newthread, entrypoint, data1, data2);
+
+	/* Lock the current cpu's run queue and make the new thread runnable */
+	thread_make_runnable(newthread, false);
+
+	return 0;
+}
+
+
+/* My added thread_join **********/
+
+int thread_join(struct thread *thread, int * ret)
+{
+    struct thread* cur_t;
+    struct thread *t_parent;
+
+    t_parent = thread->t_parent;
+    KASSERT(thread!=NULL&&t_parent!=NULL);
+    cur_t=curthread;
+    KASSERT(thread!=cur_t && thread->t_join_child!=NULL && thread->t_join_parent!=NULL);
+    P(thread->t_join_child);
+
+    *ret = thread->t_ret;
+    cur_t->t_children--;
+    thread->t_parent=NULL;
+	V(thread->t_join_parent);
+	//Not dealing with deadlocks
+	return 0;
+	/*struct thread *cur;
+	cur = curthread;
+
+	lock_acquire(cur->join_lk);
+	cv_wait(cur->join_cv, cur->join_lk);
+	lock_release(cur->join_lk);*/
+	return 0;
+
+}
+
 /*
  * High level, machine-independent context switch code.
  *
diff --git a/proj02-isd13.txt b/proj02-isd13.txt
new file mode 100644
index 0000000..f239d6b
--- /dev/null
+++ b/proj02-isd13.txt
@@ -0,0 +1,280 @@
+diff --git a/defs.mk b/defs.mk
+index 9932652..d82a764 100644
+--- a/defs.mk
++++ b/defs.mk
+@@ -13,7 +13,7 @@
+ # The things that can be set here are documented in mk/os161.config.mk.
+ #
+ 
+-OSTREE=/home/ubuntu/cs161/root
++OSTREE=/home/iman/os161/root
+ PLATFORM=sys161
+ MACHINE=mips
+ COMPAT_CFLAGS= -DNEED_NTOHLL
+diff --git a/kern/include/synch.h b/kern/include/synch.h
+index fee3b07..a6f7a76 100644
+--- a/kern/include/synch.h
++++ b/kern/include/synch.h
+@@ -138,4 +138,4 @@ void cv_signal(struct cv *cv, struct lock *lock);
+ void cv_broadcast(struct cv *cv, struct lock *lock);
+ 
+ 
+-#endif /* _SYNCH_H_ */
++#endif /* _SYNCH_H_ */
+\ No newline at end of file
+diff --git a/kern/include/thread.h b/kern/include/thread.h
+index d161c8f..9e8376f 100644
+--- a/kern/include/thread.h
++++ b/kern/include/thread.h
+@@ -145,7 +145,9 @@ void thread_shutdown(void);
+  */
+ int thread_fork(const char *name, struct proc *proc,
+                 void (*func)(void *, unsigned long),
+-                void *data1, unsigned long data2);
++                void *data1, unsigned long data2, struct thread **thd);
++
++int thread_join(struct thread *thd, int*ret);
+ 
+ /*
+  * Cause the current thread to exit.
+@@ -172,4 +174,4 @@ void schedule(void);
+ void thread_consider_migration(void);
+ 
+ 
+-#endif /* _THREAD_H_ */
++#endif /* _THREAD_H_ */
+\ No newline at end of file
+diff --git a/kern/thread/synch.c b/kern/thread/synch.c
+index d083f4b..d6610e8 100644
+--- a/kern/thread/synch.c
++++ b/kern/thread/synch.c
+@@ -154,7 +154,9 @@ lock_create(const char *name)
+                 return NULL;
+         }
+ 
+-        // add stuff here as needed
++        lock->lk_wchan=wchan_create(name);
++        lock->lk_busy=false;
++        spinlock_init(&lock->lk_spinlock);
+ 
+         return lock;
+ }
+@@ -164,8 +166,8 @@ lock_destroy(struct lock *lock)
+ {
+         KASSERT(lock != NULL);
+ 
+-        // add stuff here as needed
+-
++        wchan_destroy(lock->lk_wchan);
++        spinlock_cleanup(&lock->lk_spinlock);
+         kfree(lock->lk_name);
+         kfree(lock);
+ }
+@@ -173,27 +175,34 @@ lock_destroy(struct lock *lock)
+ void
+ lock_acquire(struct lock *lock)
+ {
+-        // Write this
++        spinlock_acquire(&lock->lk_spinlock);
++
++        while(lock->lk_busy)
++        {
++            wchan_sleep(lock->lk_wchan, &lock->lk_spinlock);
++        }
++        lock->lk_busy=true;
++        lock->lk_thread=curthread;
++        spinlock_release(&lock->lk_spinlock);
+ 
+-        (void)lock;  // suppress warning until code gets written
+ }
+ 
+ void
+ lock_release(struct lock *lock)
+ {
+-        // Write this
++        spinlock_acquire(&lock->lk_spinlock);
++        KASSERT(lock->lk_thread==curthread&&lock->lk_busy);
+ 
+-        (void)lock;  // suppress warning until code gets written
++        lock->lk_busy = false;        
++        lock->lk_thread = NULL;
++        wchan_wakeone(lock->lk_wchan, &lock->lk_spinlock);
++        spinlock_release(&lock->lk_spinlock);
+ }
+ 
+ bool
+ lock_do_i_hold(struct lock *lock)
+ {
+-        // Write this
+-
+-        (void)lock;  // suppress warning until code gets written
+-
+-        return true; // dummy until code gets written
++        return lock->lk_thread == curthread;
+ }
+ 
+ ////////////////////////////////////////////////////////////
+@@ -217,7 +226,14 @@ cv_create(const char *name)
+                 return NULL;
+         }
+ 
+-        // add stuff here as needed
++        cv->cv_wchan = wchan_create(cv->cv_name);
++        if(cv->cv_wchan==NULL)
++        {
++            kfree(cv->cv_name);
++            kfree(cv);
++            return NULL;
++        }
++        spinlock_init(&cv->cv_lock);
+ 
+         return cv;
+ }
+@@ -227,8 +243,8 @@ cv_destroy(struct cv *cv)
+ {
+         KASSERT(cv != NULL);
+ 
+-        // add stuff here as needed
+-
++        spinlock_cleanup(&cv->cv_lock);
++        wchan_destroy(cv->cv_wchan);
+         kfree(cv->cv_name);
+         kfree(cv);
+ }
+@@ -236,23 +252,38 @@ cv_destroy(struct cv *cv)
+ void
+ cv_wait(struct cv *cv, struct lock *lock)
+ {
+-        // Write this
+-        (void)cv;    // suppress warning until code gets written
+-        (void)lock;  // suppress warning until code gets written
++    KASSERT(cv != NULL && lock != NULL);
++    KASSERT(curthread->t_in_interrupt == false);
++    KASSERT(lock_do_i_hold(lock));
++
++    spinlock_acquire(&cv->cv_lock);
++    lock_release(lock);
++    if(lock_do_i_hold(lock) == false)
++    {
++        wchan_sleep(cv->cv_wchan, &cv->cv_lock);
++        spinlock_release(&cv->cv_lock);
++        lock_acquire(lock);
++        KASSERT(lock_do_i_hold(lock));
++
++    }
+ }
+ 
+ void
+ cv_signal(struct cv *cv, struct lock *lock)
+ {
+-        // Write this
+-	(void)cv;    // suppress warning until code gets written
+-	(void)lock;  // suppress warning until code gets written
++    KASSERT(cv != NULL && lock != NULL && lock_do_i_hold(lock));
++
++    spinlock_acquire(&cv->cv_lock);
++    wchan_wakeone(cv->cv_wchan, &cv->cv_lock);
++    spinlock_release(&cv->cv_lock);
+ }
+ 
+ void
+ cv_broadcast(struct cv *cv, struct lock *lock)
+ {
+-	// Write this
+-	(void)cv;    // suppress warning until code gets written
+-	(void)lock;  // suppress warning until code gets written
+-}
++	KASSERT(cv != NULL && lock != NULL && lock_do_i_hold(lock));
++    
++    spinlock_acquire(&cv->cv_lock);
++    wchan_wakeall(cv->cv_wchan, &cv->cv_lock);
++    spinlock_release(&cv->cv_lock);
++}
+\ No newline at end of file
+diff --git a/kern/thread/thread.c b/kern/thread/thread.c
+index 8ac3b9d..b02ff34 100644
+--- a/kern/thread/thread.c
++++ b/kern/thread/thread.c
+@@ -150,7 +150,12 @@ thread_create(const char *name)
+ 	thread->t_did_reserve_buffers = false;
+ 
+ 	/* If you add to struct thread, be sure to initialize here */
+-
++    thread->t_parent=NULL;
++    thread->t_has_parent=false;
++    thread->t_children = 0;
++    thread->t_ret=0;
++    thread->t_join_parent=NULL;
++    thread->t_join_child=NULL;
+ 	return thread;
+ }
+ 
+@@ -495,11 +500,11 @@ thread_make_runnable(struct thread *target, bool already_have_lock)
+  * as the caller, unless the scheduler intervenes first.
+  */
+ int
+-thread_fork(const char *name,
+-	    struct proc *proc,
++thread_fork(const char *name, struct proc *proc,
+ 	    void (*entrypoint)(void *data1, unsigned long data2),
+-	    void *data1, unsigned long data2)
++	    void *data1, unsigned long data2, struct thread **thd)
+ {
++
+ 	struct thread *newthread;
+ 	int result;
+ 
+@@ -516,6 +521,29 @@ thread_fork(const char *name,
+ 	}
+ 	thread_checkstack_init(newthread);
+ 
++    if(thd!=NULL)
++    {
++        curthread->t_children++;
++
++        *thd=newthread;
++        newthread->t_parent=curthread;
++        newthread->t_has_parent=true;
++        newthread->t_join_parent = sem_create(name, 0);
++
++        if(newthread->t_join_parent==NULL)
++        {
++            thread_destroy(newthread);
++            return -1;
++        }
++
++        newthread->t_join_child = sem_create(name,0);
++        if(newthread->t_join_child==NULL)
++        {
++            thread_destroy(newthread);
++            sem_destroy(newthread->t_join_parent);
++            return -1;
++        }
++    }
+ 	/*
+ 	 * Now we clone various fields from the parent thread.
+ 	 */
+@@ -550,6 +578,23 @@ thread_fork(const char *name,
+ 	return 0;
+ }
+ 
++int thread_join(struct thread *thread, int * ret)
++{
++    struct thread* cur_t;
++    struct thread *t_parent;
++
++    t_parent = thread->t_parent;
++    KASSERT(thread!=NULL&&t_parent!=NULL);
++    cur_t=curthread;
++    KASSERT(thread!=cur_t && thread->t_join_child!=NULL && thread->t_join_parent!=NULL);
++    P(thread->t_join_child);
++
++    *ret = thread->t_ret;
++    cur->t_children--;
++    thread->t_parent=NULL;
++    V(thread->t_join_parent);
++}
++
+ /*
+  * High level, machine-independent context switch code.
+  *
diff --git a/proj2-isd13.tar b/proj2-isd13.tar
new file mode 100644
index 0000000..2361475
Binary files /dev/null and b/proj2-isd13.tar differ
